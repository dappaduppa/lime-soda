<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 226 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_226{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_226{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_226{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_226{
font-size: 16.50px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_226{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_226{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s7_226{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_226{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s9_226{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_226{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_226"
>The Curse of Dimensionality</text>

<text 
x="55" 
y="122" 
class="s2_226"
>k-nearest neighbors runs into trouble in higher dimensions thanks to the “curse of</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_226"
>dimensionality,” which boils down to the fact that high-dimensional spaces are</text>

<text 
x="753" 
y="149" 
class="s3_226"
>vast</text>

<text 
x="788" 
y="149" 
class="s2_226"
>.</text>

<text 
x="55" 
y="177" 
class="s2_226"
>Points in high-dimensional spaces tend not to be close to one another at all. One way to</text>

<text 
x="55" 
y="204" 
class="s2_226"
>see this is by randomly generating pairs of points in the d-dimensional “unit cube” in a</text>

<text 
x="55" 
y="232" 
class="s2_226"
>variety of dimensions, and calculating the distances between them.</text>

<image preserveAspectRatio="none" x="86" y="255" width="739" height="587" xlink:href="226/img/1.png" />
<text 
x="264" 
y="868" 
dx="0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_226"
>Figure 12-3. 3-Nearest neighbor programming languages</text>

<text 
x="55" 
y="909" 
class="s2_226"
>Generating random points should be second nature by now:</text>

<text 
x="76" 
y="955" 
class="s5_226"
>def</text>

<text 
x="108" 
y="955" 
class="s6_226"
>random_point</text>

<text 
x="203" 
y="955" 
class="s7_226"
>(</text>

<text 
x="211" 
y="955" 
class="s8_226"
>dim</text>

<text 
x="235" 
y="955" 
class="s7_226"
>):</text>

<text 
x="108" 
y="970" 
class="s5_226"
>return</text>

<text 
x="163" 
y="970" 
class="s7_226"
>[</text>

<text 
x="171" 
y="970" 
class="s8_226"
>random</text>

<text 
x="219" 
y="970" 
class="s7_226"
>.</text>

<text 
x="227" 
y="970" 
class="s8_226"
>random</text>

<text 
x="274" 
y="970" 
class="s7_226"
>()</text>

<text 
x="298" 
y="970" 
class="s5_226"
>for</text>

<text 
x="329" 
y="970" 
class="s8_226"
>_</text>

<text 
x="345" 
y="970" 
class="s9_226"
>in</text>

<text 
x="369" 
y="970" 
class="s10_226"
>range</text>

<text 
x="408" 
y="970" 
class="s7_226"
>(</text>

<text 
x="416" 
y="970" 
class="s8_226"
>dim</text>

<text 
x="440" 
y="970" 
class="s7_226"
>)]</text>

<text 
x="55" 
y="1023" 
class="s2_226"
>as is writing a function to generate the distances:</text>

<text 
x="76" 
y="1068" 
class="s5_226"
>def</text>

<text 
x="108" 
y="1068" 
class="s6_226"
>random_distances</text>

<text 
x="235" 
y="1068" 
class="s7_226"
>(</text>

<text 
x="242" 
y="1068" 
class="s8_226"
>dim</text>

<text 
x="266" 
y="1068" 
class="s7_226"
>,</text>

<text 
x="282" 
y="1068" 
class="s8_226"
>num_pairs</text>

<text 
x="353" 
y="1068" 
class="s7_226"
>):</text>

<text 
x="108" 
y="1083" 
class="s5_226"
>return</text>

<text 
x="163" 
y="1083" 
class="s7_226"
>[</text>

<text 
x="171" 
y="1083" 
class="s8_226"
>distance</text>

<text 
x="235" 
y="1083" 
class="s7_226"
>(</text>

<text 
x="242" 
y="1083" 
class="s8_226"
>random_point</text>

<text 
x="337" 
y="1083" 
class="s7_226"
>(</text>

<text 
x="345" 
y="1083" 
class="s8_226"
>dim</text>

<text 
x="369" 
y="1083" 
class="s7_226"
>),</text>

<text 
x="393" 
y="1083" 
class="s8_226"
>random_point</text>

<text 
x="487" 
y="1083" 
class="s7_226"
>(</text>

<text 
x="495" 
y="1083" 
class="s8_226"
>dim</text>

<text 
x="519" 
y="1083" 
class="s7_226"
>))</text>

<text 
x="171" 
y="1099" 
class="s5_226"
>for</text>

<text 
x="203" 
y="1099" 
class="s8_226"
>_</text>

<text 
x="219" 
y="1099" 
class="s9_226"
>in</text>

<text 
x="242" 
y="1099" 
class="s10_226"
>range</text>

<text 
x="282" 
y="1099" 
class="s7_226"
>(</text>

<text 
x="290" 
y="1099" 
class="s8_226"
>num_pairs</text>

<text 
x="361" 
y="1099" 
class="s7_226"
>)]</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
