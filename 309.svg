<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 309 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_309{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_309{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_309{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_309{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_309{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s6_309{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_309{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s8_309{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s9_309{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s10_309{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_309"
>Example: Defeating a CAPTCHA</text>

<text 
x="55" 
y="122" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>To make sure that people registering for your site are actually people, the VP of Product</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>Management wants to implement a CAPTCHA as part of the registration process. In</text>

<text 
x="55" 
y="177" 
dx="0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>particular, he’d like to show users a picture of a digit and require them to input that digit to</text>

<text 
x="55" 
y="204" 
class="s2_309"
>prove they’re human.</text>

<text 
x="55" 
y="243" 
dx="0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>He doesn’t believe you that computers can easily solve this problem, so you decide to</text>

<text 
x="55" 
y="270" 
class="s2_309"
>convince him by creating a program that can easily solve the problem.</text>

<text 
x="55" 
y="309" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>We’ll represent each digit as a 5 × 5 image:</text>

<text 
x="76" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="132" 
y="354" 
class="s3_309"
>..@..</text>

<text 
x="187" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="242" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="298" 
y="354" 
class="s3_309"
>@...@</text>

<text 
x="353" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="408" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="464" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="519" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="574" 
y="354" 
class="s3_309"
>@@@@@</text>

<text 
x="76" 
y="369" 
class="s3_309"
>@...@</text>

<text 
x="132" 
y="369" 
class="s3_309"
>..@..</text>

<text 
x="187" 
y="369" 
class="s3_309"
>....</text>

<text 
x="219" 
y="369" 
class="s3_309"
>@</text>

<text 
x="242" 
y="369" 
class="s3_309"
>....</text>

<text 
x="274" 
y="369" 
class="s3_309"
>@</text>

<text 
x="298" 
y="369" 
class="s3_309"
>@...@</text>

<text 
x="353" 
y="369" 
class="s3_309"
>@</text>

<text 
x="361" 
y="369" 
class="s3_309"
>....</text>

<text 
x="408" 
y="369" 
class="s3_309"
>@</text>

<text 
x="416" 
y="369" 
class="s3_309"
>....</text>

<text 
x="464" 
y="369" 
class="s3_309"
>....</text>

<text 
x="495" 
y="369" 
class="s3_309"
>@</text>

<text 
x="519" 
y="369" 
class="s3_309"
>@...@</text>

<text 
x="574" 
y="369" 
class="s3_309"
>@...@</text>

<text 
x="76" 
y="385" 
class="s3_309"
>@...@</text>

<text 
x="132" 
y="385" 
class="s3_309"
>..@..</text>

<text 
x="187" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="242" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="298" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="353" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="408" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="464" 
y="385" 
class="s3_309"
>....</text>

<text 
x="495" 
y="385" 
class="s3_309"
>@</text>

<text 
x="519" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="574" 
y="385" 
class="s3_309"
>@@@@@</text>

<text 
x="76" 
y="400" 
class="s3_309"
>@...@</text>

<text 
x="132" 
y="400" 
class="s3_309"
>..@..</text>

<text 
x="187" 
y="400" 
class="s3_309"
>@</text>

<text 
x="195" 
y="400" 
class="s3_309"
>....</text>

<text 
x="242" 
y="400" 
class="s3_309"
>....</text>

<text 
x="274" 
y="400" 
class="s3_309"
>@</text>

<text 
x="298" 
y="400" 
class="s3_309"
>....</text>

<text 
x="329" 
y="400" 
class="s3_309"
>@</text>

<text 
x="353" 
y="400" 
class="s3_309"
>....</text>

<text 
x="385" 
y="400" 
class="s3_309"
>@</text>

<text 
x="408" 
y="400" 
class="s3_309"
>@...@</text>

<text 
x="464" 
y="400" 
class="s3_309"
>....</text>

<text 
x="495" 
y="400" 
class="s3_309"
>@</text>

<text 
x="519" 
y="400" 
class="s3_309"
>@...@</text>

<text 
x="574" 
y="400" 
class="s3_309"
>....</text>

<text 
x="606" 
y="400" 
class="s3_309"
>@</text>

<text 
x="76" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="132" 
y="415" 
class="s3_309"
>..@..</text>

<text 
x="187" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="242" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="298" 
y="415" 
class="s3_309"
>....</text>

<text 
x="329" 
y="415" 
class="s3_309"
>@</text>

<text 
x="353" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="408" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="464" 
y="415" 
class="s3_309"
>....</text>

<text 
x="495" 
y="415" 
class="s3_309"
>@</text>

<text 
x="519" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="574" 
y="415" 
class="s3_309"
>@@@@@</text>

<text 
x="55" 
y="468" 
class="s2_309"
>Our neural network wants an input to be a vector of numbers. So we’ll transform each</text>

<text 
x="55" 
y="496" 
class="s2_309"
>image to a vector of length 25, whose elements are either 1 (“this pixel is in the image”) or</text>

<text 
x="55" 
y="523" 
class="s2_309"
>0 (“this pixel is not in the image”).</text>

<text 
x="55" 
y="562" 
class="s2_309"
>For instance, the zero digit would be represented as:</text>

<text 
x="76" 
y="607" 
class="s4_309"
>zero_digit</text>

<text 
x="163" 
y="607" 
dx="0,0,4.6" 
class="s3_309"
>= [</text>

<text 
x="187" 
y="607" 
class="s5_309"
>1</text>

<text 
x="195" 
y="607" 
class="s3_309"
>,</text>

<text 
x="203" 
y="607" 
class="s5_309"
>1</text>

<text 
x="211" 
y="607" 
class="s3_309"
>,</text>

<text 
x="219" 
y="607" 
class="s5_309"
>1</text>

<text 
x="227" 
y="607" 
class="s3_309"
>,</text>

<text 
x="235" 
y="607" 
class="s5_309"
>1</text>

<text 
x="242" 
y="607" 
class="s3_309"
>,</text>

<text 
x="250" 
y="607" 
class="s5_309"
>1</text>

<text 
x="258" 
y="607" 
class="s3_309"
>,</text>

<text 
x="187" 
y="622" 
class="s5_309"
>1</text>

<text 
x="195" 
y="622" 
class="s3_309"
>,</text>

<text 
x="203" 
y="622" 
class="s5_309"
>0</text>

<text 
x="211" 
y="622" 
class="s3_309"
>,</text>

<text 
x="219" 
y="622" 
class="s5_309"
>0</text>

<text 
x="227" 
y="622" 
class="s3_309"
>,</text>

<text 
x="235" 
y="622" 
class="s5_309"
>0</text>

<text 
x="242" 
y="622" 
class="s3_309"
>,</text>

<text 
x="250" 
y="622" 
class="s5_309"
>1</text>

<text 
x="258" 
y="622" 
class="s3_309"
>,</text>

<text 
x="187" 
y="638" 
class="s5_309"
>1</text>

<text 
x="195" 
y="638" 
class="s3_309"
>,</text>

<text 
x="203" 
y="638" 
class="s5_309"
>0</text>

<text 
x="211" 
y="638" 
class="s3_309"
>,</text>

<text 
x="219" 
y="638" 
class="s5_309"
>0</text>

<text 
x="227" 
y="638" 
class="s3_309"
>,</text>

<text 
x="235" 
y="638" 
class="s5_309"
>0</text>

<text 
x="242" 
y="638" 
class="s3_309"
>,</text>

<text 
x="250" 
y="638" 
class="s5_309"
>1</text>

<text 
x="258" 
y="638" 
class="s3_309"
>,</text>

<text 
x="187" 
y="653" 
class="s5_309"
>1</text>

<text 
x="195" 
y="653" 
class="s3_309"
>,</text>

<text 
x="203" 
y="653" 
class="s5_309"
>0</text>

<text 
x="211" 
y="653" 
class="s3_309"
>,</text>

<text 
x="219" 
y="653" 
class="s5_309"
>0</text>

<text 
x="227" 
y="653" 
class="s3_309"
>,</text>

<text 
x="235" 
y="653" 
class="s5_309"
>0</text>

<text 
x="242" 
y="653" 
class="s3_309"
>,</text>

<text 
x="250" 
y="653" 
class="s5_309"
>1</text>

<text 
x="258" 
y="653" 
class="s3_309"
>,</text>

<text 
x="187" 
y="668" 
class="s5_309"
>1</text>

<text 
x="195" 
y="668" 
class="s3_309"
>,</text>

<text 
x="203" 
y="668" 
class="s5_309"
>1</text>

<text 
x="211" 
y="668" 
class="s3_309"
>,</text>

<text 
x="219" 
y="668" 
class="s5_309"
>1</text>

<text 
x="227" 
y="668" 
class="s3_309"
>,</text>

<text 
x="235" 
y="668" 
class="s5_309"
>1</text>

<text 
x="242" 
y="668" 
class="s3_309"
>,</text>

<text 
x="250" 
y="668" 
class="s5_309"
>1</text>

<text 
x="258" 
y="668" 
class="s3_309"
>]</text>

<text 
x="55" 
y="721" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>We’ll want our output to indicate which digit the neural network thinks it is, so we’ll need</text>

<text 
x="55" 
y="749" 
class="s2_309"
>10 outputs. The correct output for digit 4, for instance, will be:</text>

<text 
x="76" 
y="794" 
class="s3_309"
>[</text>

<text 
x="84" 
y="794" 
class="s5_309"
>0</text>

<text 
x="92" 
y="794" 
class="s3_309"
>,</text>

<text 
x="108" 
y="794" 
class="s5_309"
>0</text>

<text 
x="116" 
y="794" 
class="s3_309"
>,</text>

<text 
x="132" 
y="794" 
class="s5_309"
>0</text>

<text 
x="140" 
y="794" 
class="s3_309"
>,</text>

<text 
x="156" 
y="794" 
class="s5_309"
>0</text>

<text 
x="163" 
y="794" 
class="s3_309"
>,</text>

<text 
x="179" 
y="794" 
class="s5_309"
>1</text>

<text 
x="187" 
y="794" 
class="s3_309"
>,</text>

<text 
x="203" 
y="794" 
class="s5_309"
>0</text>

<text 
x="211" 
y="794" 
class="s3_309"
>,</text>

<text 
x="227" 
y="794" 
class="s5_309"
>0</text>

<text 
x="235" 
y="794" 
class="s3_309"
>,</text>

<text 
x="250" 
y="794" 
class="s5_309"
>0</text>

<text 
x="258" 
y="794" 
class="s3_309"
>,</text>

<text 
x="274" 
y="794" 
class="s5_309"
>0</text>

<text 
x="282" 
y="794" 
class="s3_309"
>,</text>

<text 
x="298" 
y="794" 
class="s5_309"
>0</text>

<text 
x="306" 
y="794" 
class="s3_309"
>]</text>

<text 
x="55" 
y="847" 
class="s2_309"
>Then, assuming our</text>

<text 
x="234" 
y="847" 
class="s6_309"
>inputs</text>

<text 
x="303" 
y="847" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_309"
>are correctly ordered from 0 to 9, our targets will be:</text>

<text 
x="76" 
y="894" 
class="s4_309"
>targets</text>

<text 
x="140" 
y="894" 
dx="0,0,4.6,0" 
class="s3_309"
>= [[</text>

<text 
x="171" 
y="894" 
class="s5_309"
>1</text>

<text 
x="187" 
y="894" 
class="s7_309"
>if</text>

<text 
x="211" 
y="894" 
class="s4_309"
>i</text>

<text 
x="227" 
y="894" 
class="s3_309"
>==</text>

<text 
x="250" 
y="894" 
class="s4_309"
>j</text>

<text 
x="266" 
y="894" 
class="s7_309"
>else</text>

<text 
x="306" 
y="894" 
class="s5_309"
>0</text>

<text 
x="322" 
y="894" 
class="s7_309"
>for</text>

<text 
x="353" 
y="894" 
class="s4_309"
>i</text>

<text 
x="369" 
y="894" 
class="s8_309"
>in</text>

<text 
x="393" 
y="894" 
class="s9_309"
>range</text>

<text 
x="432" 
y="894" 
class="s3_309"
>(</text>

<text 
x="440" 
y="894" 
class="s5_309"
>10</text>

<text 
x="456" 
y="894" 
class="s3_309"
>)]</text>

<text 
x="163" 
y="909" 
class="s7_309"
>for</text>

<text 
x="195" 
y="909" 
class="s4_309"
>j</text>

<text 
x="211" 
y="909" 
class="s8_309"
>in</text>

<text 
x="235" 
y="909" 
class="s9_309"
>range</text>

<text 
x="274" 
y="909" 
class="s3_309"
>(</text>

<text 
x="282" 
y="909" 
class="s5_309"
>10</text>

<text 
x="298" 
y="909" 
class="s3_309"
>)]</text>

<text 
x="55" 
y="962" 
class="s2_309"
>so that (for example)</text>

<text 
x="244" 
y="962" 
class="s6_309"
>targets[4]</text>

<text 
x="355" 
y="962" 
class="s2_309"
>is the correct output for digit 4.</text>

<text 
x="55" 
y="1003" 
class="s2_309"
>At which point we’re ready to build our neural network:</text>

<text 
x="76" 
y="1048" 
class="s4_309"
>random</text>

<text 
x="124" 
y="1048" 
class="s3_309"
>.</text>

<text 
x="132" 
y="1048" 
class="s4_309"
>seed</text>

<text 
x="163" 
y="1048" 
class="s3_309"
>(</text>

<text 
x="171" 
y="1048" 
class="s5_309"
>0</text>

<text 
x="179" 
y="1048" 
class="s3_309"
>)</text>

<text 
x="235" 
y="1048" 
dx="0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s10_309"
># to get repeatable results</text>

<text 
x="76" 
y="1063" 
class="s4_309"
>input_size</text>

<text 
x="163" 
y="1063" 
class="s3_309"
>=</text>

<text 
x="179" 
y="1063" 
class="s5_309"
>25</text>

<text 
x="235" 
y="1063" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0" 
class="s10_309"
># each input is a vector of length 25</text>

<text 
x="76" 
y="1079" 
class="s4_309"
>num_hidden</text>

<text 
x="163" 
y="1079" 
class="s3_309"
>=</text>

<text 
x="179" 
y="1079" 
class="s5_309"
>5</text>

<text 
x="235" 
y="1079" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s10_309"
># we'll have 5 neurons in the hidden layer</text>

<text 
x="76" 
y="1094" 
class="s4_309"
>output_size</text>

<text 
x="171" 
y="1094" 
class="s3_309"
>=</text>

<text 
x="187" 
y="1094" 
class="s5_309"
>10</text>

<text 
x="235" 
y="1094" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0" 
class="s10_309"
># we need 10 outputs for each input</text>

<text 
x="76" 
y="1125" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0" 
class="s10_309"
># each hidden neuron has one weight per input, plus a bias weight</text>

<text 
x="76" 
y="1140" 
class="s4_309"
>hidden_layer</text>

<text 
x="179" 
y="1140" 
dx="0,0,4.6,0" 
class="s3_309"
>= [[</text>

<text 
x="211" 
y="1140" 
class="s4_309"
>random</text>

<text 
x="258" 
y="1140" 
class="s3_309"
>.</text>

<text 
x="266" 
y="1140" 
class="s4_309"
>random</text>

<text 
x="314" 
y="1140" 
class="s3_309"
>()</text>

<text 
x="337" 
y="1140" 
class="s7_309"
>for</text>

<text 
x="369" 
y="1140" 
class="s4_309"
>__</text>

<text 
x="393" 
y="1140" 
class="s8_309"
>in</text>

<text 
x="416" 
y="1140" 
class="s9_309"
>range</text>

<text 
x="456" 
y="1140" 
class="s3_309"
>(</text>

<text 
x="464" 
y="1140" 
class="s4_309"
>input_size</text>

<text 
x="551" 
y="1140" 
class="s3_309"
>+</text>

<text 
x="567" 
y="1140" 
class="s5_309"
>1</text>

<text 
x="574" 
y="1140" 
class="s3_309"
>)]</text>

<text 
x="203" 
y="1156" 
class="s7_309"
>for</text>

<text 
x="235" 
y="1156" 
class="s4_309"
>__</text>

<text 
x="258" 
y="1156" 
class="s8_309"
>in</text>

<text 
x="282" 
y="1156" 
class="s9_309"
>range</text>

<text 
x="322" 
y="1156" 
class="s3_309"
>(</text>

<text 
x="329" 
y="1156" 
class="s4_309"
>num_hidden</text>

<text 
x="408" 
y="1156" 
class="s3_309"
>)]</text>

<text 
x="76" 
y="1187" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0" 
class="s10_309"
># each output neuron has one weight per hidden neuron, plus a bias weight</text>

<text 
x="76" 
y="1202" 
class="s4_309"
>output_layer</text>

<text 
x="179" 
y="1202" 
dx="0,0,4.6,0" 
class="s3_309"
>= [[</text>

<text 
x="211" 
y="1202" 
class="s4_309"
>random</text>

<text 
x="258" 
y="1202" 
class="s3_309"
>.</text>

<text 
x="266" 
y="1202" 
class="s4_309"
>random</text>

<text 
x="314" 
y="1202" 
class="s3_309"
>()</text>

<text 
x="337" 
y="1202" 
class="s7_309"
>for</text>

<text 
x="369" 
y="1202" 
class="s4_309"
>__</text>

<text 
x="393" 
y="1202" 
class="s8_309"
>in</text>

<text 
x="416" 
y="1202" 
class="s9_309"
>range</text>

<text 
x="456" 
y="1202" 
class="s3_309"
>(</text>

<text 
x="464" 
y="1202" 
class="s4_309"
>num_hidden</text>

<text 
x="551" 
y="1202" 
class="s3_309"
>+</text>

<text 
x="567" 
y="1202" 
class="s5_309"
>1</text>

<text 
x="574" 
y="1202" 
class="s3_309"
>)]</text>

<text 
x="203" 
y="1217" 
class="s7_309"
>for</text>

<text 
x="235" 
y="1217" 
class="s4_309"
>__</text>

<text 
x="258" 
y="1217" 
class="s8_309"
>in</text>

<text 
x="282" 
y="1217" 
class="s9_309"
>range</text>

<text 
x="322" 
y="1217" 
class="s3_309"
>(</text>

<text 
x="329" 
y="1217" 
class="s4_309"
>output_size</text>

<text 
x="416" 
y="1217" 
class="s3_309"
>)]</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
