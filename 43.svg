<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 43 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_43{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_43{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_43{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_43{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_43{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_43{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_43{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_43{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s9_43{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_43{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s11_43{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s12_43{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_43"
>Functions</text>

<text 
x="55" 
y="115" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_43"
>A function is a rule for taking zero or more inputs and returning a corresponding output. In</text>

<text 
x="55" 
y="143" 
class="s2_43"
>Python, we typically define functions using</text>

<text 
x="442" 
y="143" 
class="s3_43"
>def</text>

<text 
x="474" 
y="143" 
class="s2_43"
>:</text>

<text 
x="76" 
y="190" 
class="s4_43"
>def</text>

<text 
x="108" 
y="190" 
class="s5_43"
>double</text>

<text 
x="156" 
y="190" 
class="s6_43"
>(</text>

<text 
x="163" 
y="190" 
class="s7_43"
>x</text>

<text 
x="171" 
y="190" 
class="s6_43"
>):</text>

<text 
x="108" 
y="205" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s8_43"
>"""this is where you put an optional docstring</text>

<text 
x="108" 
y="221" 
dx="0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s8_43"
>that explains what the function does.</text>

<text 
x="108" 
y="236" 
dx="0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0" 
class="s8_43"
>for example, this function multiplies its input by 2"""</text>

<text 
x="108" 
y="251" 
class="s4_43"
>return</text>

<text 
x="163" 
y="251" 
class="s7_43"
>x</text>

<text 
x="179" 
y="251" 
class="s6_43"
>*</text>

<text 
x="195" 
y="251" 
class="s9_43"
>2</text>

<text 
x="55" 
y="304" 
class="s2_43"
>Python functions are</text>

<text 
x="242" 
y="304" 
class="s10_43"
>first-class</text>

<text 
x="329" 
y="304" 
class="s2_43"
>, which means that we can assign them to variables and</text>

<text 
x="55" 
y="332" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0" 
class="s2_43"
>pass them into functions just like any other arguments:</text>

<text 
x="76" 
y="377" 
class="s4_43"
>def</text>

<text 
x="108" 
y="377" 
class="s5_43"
>apply_to_one</text>

<text 
x="203" 
y="377" 
class="s6_43"
>(</text>

<text 
x="211" 
y="377" 
class="s7_43"
>f</text>

<text 
x="219" 
y="377" 
class="s6_43"
>):</text>

<text 
x="108" 
y="392" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s8_43"
>"""calls the function f with 1 as its argument"""</text>

<text 
x="108" 
y="408" 
class="s4_43"
>return</text>

<text 
x="163" 
y="408" 
class="s7_43"
>f</text>

<text 
x="171" 
y="408" 
class="s6_43"
>(</text>

<text 
x="179" 
y="408" 
class="s9_43"
>1</text>

<text 
x="187" 
y="408" 
class="s6_43"
>)</text>

<text 
x="76" 
y="439" 
class="s7_43"
>my_double</text>

<text 
x="156" 
y="439" 
class="s6_43"
>=</text>

<text 
x="171" 
y="439" 
class="s7_43"
>double</text>

<text 
x="322" 
y="439" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_43"
># refers to the previously defined function</text>

<text 
x="76" 
y="454" 
class="s7_43"
>x</text>

<text 
x="92" 
y="454" 
class="s6_43"
>=</text>

<text 
x="108" 
y="454" 
class="s7_43"
>apply_to_one</text>

<text 
x="203" 
y="454" 
class="s6_43"
>(</text>

<text 
x="211" 
y="454" 
class="s7_43"
>my_double</text>

<text 
x="282" 
y="454" 
class="s6_43"
>)</text>

<text 
x="322" 
y="454" 
dx="0,0,4.6,0,0,0,0,0,0,4.6" 
class="s11_43"
># equals 2</text>

<text 
x="55" 
y="507" 
class="s2_43"
>It is also easy to create short anonymous functions, or lambdas:</text>

<text 
x="76" 
y="552" 
class="s7_43"
>y</text>

<text 
x="92" 
y="552" 
class="s6_43"
>=</text>

<text 
x="108" 
y="552" 
class="s7_43"
>apply_to_one</text>

<text 
x="203" 
y="552" 
class="s6_43"
>(</text>

<text 
x="211" 
y="552" 
class="s4_43"
>lambda</text>

<text 
x="266" 
y="552" 
class="s7_43"
>x</text>

<text 
x="274" 
y="552" 
class="s6_43"
>:</text>

<text 
x="290" 
y="552" 
class="s7_43"
>x</text>

<text 
x="306" 
y="552" 
class="s6_43"
>+</text>

<text 
x="322" 
y="552" 
class="s9_43"
>4</text>

<text 
x="329" 
y="552" 
class="s6_43"
>)</text>

<text 
x="385" 
y="552" 
dx="0,0,4.6,0,0,0,0,0,0,4.6" 
class="s11_43"
># equals 5</text>

<text 
x="55" 
y="605" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_43"
>You can assign lambdas to variables, although most people will tell you that you should</text>

<text 
x="55" 
y="632" 
class="s2_43"
>just use</text>

<text 
x="127" 
y="632" 
class="s3_43"
>def</text>

<text 
x="164" 
y="632" 
class="s2_43"
>instead:</text>

<text 
x="76" 
y="679" 
class="s7_43"
>another_double</text>

<text 
x="195" 
y="679" 
class="s6_43"
>=</text>

<text 
x="211" 
y="679" 
class="s4_43"
>lambda</text>

<text 
x="266" 
y="679" 
class="s7_43"
>x</text>

<text 
x="274" 
y="679" 
class="s6_43"
>:</text>

<text 
x="290" 
y="679" 
class="s9_43"
>2</text>

<text 
x="306" 
y="679" 
class="s6_43"
>*</text>

<text 
x="322" 
y="679" 
class="s7_43"
>x</text>

<text 
x="385" 
y="679" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0" 
class="s11_43"
># don't do this</text>

<text 
x="76" 
y="695" 
class="s4_43"
>def</text>

<text 
x="108" 
y="695" 
class="s5_43"
>another_double</text>

<text 
x="219" 
y="695" 
class="s6_43"
>(</text>

<text 
x="227" 
y="695" 
class="s7_43"
>x</text>

<text 
x="235" 
y="695" 
class="s6_43"
>):</text>

<text 
x="258" 
y="695" 
class="s4_43"
>return</text>

<text 
x="314" 
y="695" 
class="s9_43"
>2</text>

<text 
x="329" 
y="695" 
class="s6_43"
>*</text>

<text 
x="345" 
y="695" 
class="s7_43"
>x</text>

<text 
x="385" 
y="695" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s11_43"
># do this instead</text>

<text 
x="55" 
y="748" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_43"
>Function parameters can also be given default arguments, which only need to be specified</text>

<text 
x="55" 
y="775" 
class="s2_43"
>when you want a value other than the default:</text>

<text 
x="76" 
y="820" 
class="s4_43"
>def</text>

<text 
x="108" 
y="820" 
class="s5_43"
>my_print</text>

<text 
x="171" 
y="820" 
class="s6_43"
>(</text>

<text 
x="179" 
y="820" 
class="s7_43"
>message</text>

<text 
x="235" 
y="820" 
class="s6_43"
>=</text>

<text 
x="242" 
y="820" 
dx="0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s12_43"
>"my default message"</text>

<text 
x="401" 
y="820" 
class="s6_43"
>):</text>

<text 
x="108" 
y="836" 
class="s4_43"
>print</text>

<text 
x="156" 
y="836" 
class="s7_43"
>message</text>

<text 
x="76" 
y="867" 
class="s7_43"
>my_print</text>

<text 
x="140" 
y="867" 
class="s6_43"
>(</text>

<text 
x="148" 
y="867" 
class="s12_43"
>"hello"</text>

<text 
x="203" 
y="867" 
class="s6_43"
>)</text>

<text 
x="235" 
y="867" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s11_43"
># prints 'hello'</text>

<text 
x="76" 
y="882" 
class="s7_43"
>my_print</text>

<text 
x="140" 
y="882" 
class="s6_43"
>()</text>

<text 
x="235" 
y="882" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_43"
># prints 'my default message'</text>

<text 
x="55" 
y="935" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_43"
>It is sometimes useful to specify arguments by name:</text>

<text 
x="76" 
y="980" 
class="s4_43"
>def</text>

<text 
x="108" 
y="980" 
class="s5_43"
>subtract</text>

<text 
x="171" 
y="980" 
class="s6_43"
>(</text>

<text 
x="179" 
y="980" 
class="s7_43"
>a</text>

<text 
x="187" 
y="980" 
class="s6_43"
>=</text>

<text 
x="195" 
y="980" 
class="s9_43"
>0</text>

<text 
x="203" 
y="980" 
class="s6_43"
>,</text>

<text 
x="219" 
y="980" 
class="s7_43"
>b</text>

<text 
x="227" 
y="980" 
class="s6_43"
>=</text>

<text 
x="235" 
y="980" 
class="s9_43"
>0</text>

<text 
x="242" 
y="980" 
class="s6_43"
>):</text>

<text 
x="108" 
y="995" 
class="s4_43"
>return</text>

<text 
x="163" 
y="995" 
class="s7_43"
>a</text>

<text 
x="179" 
y="995" 
class="s6_43"
>-</text>

<text 
x="195" 
y="995" 
class="s7_43"
>b</text>

<text 
x="76" 
y="1026" 
class="s7_43"
>subtract</text>

<text 
x="140" 
y="1026" 
class="s6_43"
>(</text>

<text 
x="148" 
y="1026" 
class="s9_43"
>10</text>

<text 
x="163" 
y="1026" 
class="s6_43"
>,</text>

<text 
x="179" 
y="1026" 
class="s9_43"
>5</text>

<text 
x="187" 
y="1026" 
class="s6_43"
>)</text>

<text 
x="203" 
y="1026" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6" 
class="s11_43"
># returns 5</text>

<text 
x="76" 
y="1041" 
class="s7_43"
>subtract</text>

<text 
x="140" 
y="1041" 
class="s6_43"
>(</text>

<text 
x="148" 
y="1041" 
class="s9_43"
>0</text>

<text 
x="156" 
y="1041" 
class="s6_43"
>,</text>

<text 
x="171" 
y="1041" 
class="s9_43"
>5</text>

<text 
x="179" 
y="1041" 
class="s6_43"
>)</text>

<text 
x="203" 
y="1041" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0" 
class="s11_43"
># returns -5</text>

<text 
x="76" 
y="1057" 
class="s7_43"
>subtract</text>

<text 
x="140" 
y="1057" 
class="s6_43"
>(</text>

<text 
x="148" 
y="1057" 
class="s7_43"
>b</text>

<text 
x="156" 
y="1057" 
class="s6_43"
>=</text>

<text 
x="163" 
y="1057" 
class="s9_43"
>5</text>

<text 
x="171" 
y="1057" 
class="s6_43"
>)</text>

<text 
x="203" 
y="1057" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_43"
># same as previous</text>

<text 
x="55" 
y="1110" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_43"
>We will be creating many, many functions.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
