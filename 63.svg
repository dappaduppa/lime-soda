<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 63 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_63{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_63{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_63{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_63{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_63{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_63{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_63{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_63{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_63{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_63{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s11_63{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s12_63{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s13_63{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s14_63{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,-2.3,0,0,0" 
class="s1_63"
>Functional Tools</text>

<text 
x="55" 
y="115" 
class="s2_63"
>When passing functions around, sometimes we’ll want to partially apply (or</text>

<text 
x="729" 
y="115" 
class="s3_63"
>curry</text>

<text 
x="776" 
y="115" 
class="s2_63"
>)</text>

<text 
x="55" 
y="143" 
class="s2_63"
>functions to create new functions. As a simple example, imagine that we have a function</text>

<text 
x="55" 
y="170" 
class="s2_63"
>of two variables:</text>

<text 
x="76" 
y="215" 
class="s4_63"
>def</text>

<text 
x="108" 
y="215" 
class="s5_63"
>exp</text>

<text 
x="132" 
y="215" 
class="s6_63"
>(</text>

<text 
x="140" 
y="215" 
class="s7_63"
>base</text>

<text 
x="171" 
y="215" 
class="s6_63"
>,</text>

<text 
x="187" 
y="215" 
class="s7_63"
>power</text>

<text 
x="227" 
y="215" 
class="s6_63"
>):</text>

<text 
x="108" 
y="231" 
class="s4_63"
>return</text>

<text 
x="163" 
y="231" 
class="s7_63"
>base</text>

<text 
x="203" 
y="231" 
class="s6_63"
>**</text>

<text 
x="227" 
y="231" 
class="s7_63"
>power</text>

<text 
x="55" 
y="283" 
class="s2_63"
>and we want to use it to create a function of one variable</text>

<text 
x="558" 
y="283" 
class="s8_63"
>two_to_the</text>

<text 
x="669" 
y="283" 
class="s2_63"
>whose input is a</text>

<text 
x="55" 
y="313" 
class="s8_63"
>power</text>

<text 
x="113" 
y="313" 
class="s2_63"
>and whose output is the result of</text>

<text 
x="404" 
y="313" 
dx="0,0,0,0,0,0,0,6.1,0,0,0,0,0" 
class="s8_63"
>exp(2, power)</text>

<text 
x="541" 
y="313" 
class="s2_63"
>.</text>

<text 
x="55" 
y="354" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>We can, of course, do this with</text>

<text 
x="332" 
y="354" 
class="s8_63"
>def</text>

<text 
x="363" 
y="354" 
class="s2_63"
>, but this can sometimes get unwieldy:</text>

<text 
x="76" 
y="401" 
class="s4_63"
>def</text>

<text 
x="108" 
y="401" 
class="s5_63"
>two_to_the</text>

<text 
x="187" 
y="401" 
class="s6_63"
>(</text>

<text 
x="195" 
y="401" 
class="s7_63"
>power</text>

<text 
x="235" 
y="401" 
class="s6_63"
>):</text>

<text 
x="108" 
y="416" 
class="s4_63"
>return</text>

<text 
x="163" 
y="416" 
class="s7_63"
>exp</text>

<text 
x="187" 
y="416" 
class="s6_63"
>(</text>

<text 
x="195" 
y="416" 
class="s9_63"
>2</text>

<text 
x="203" 
y="416" 
class="s6_63"
>,</text>

<text 
x="219" 
y="416" 
class="s7_63"
>power</text>

<text 
x="258" 
y="416" 
class="s6_63"
>)</text>

<text 
x="55" 
y="469" 
dx="0,0,-1.2,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>A different approach is to use</text>

<text 
x="319" 
y="469" 
class="s8_63"
>functools.partial</text>

<text 
x="498" 
y="469" 
class="s2_63"
>:</text>

<text 
x="76" 
y="517" 
class="s4_63"
>from</text>

<text 
x="116" 
y="517" 
class="s10_63"
>functools</text>

<text 
x="195" 
y="517" 
class="s4_63"
>import</text>

<text 
x="250" 
y="517" 
class="s7_63"
>partial</text>

<text 
x="76" 
y="532" 
class="s7_63"
>two_to_the</text>

<text 
x="163" 
y="532" 
class="s6_63"
>=</text>

<text 
x="179" 
y="532" 
class="s7_63"
>partial</text>

<text 
x="235" 
y="532" 
class="s6_63"
>(</text>

<text 
x="242" 
y="532" 
class="s7_63"
>exp</text>

<text 
x="266" 
y="532" 
class="s6_63"
>,</text>

<text 
x="282" 
y="532" 
class="s9_63"
>2</text>

<text 
x="290" 
y="532" 
class="s6_63"
>)</text>

<text 
x="337" 
y="532" 
dx="0,0,4.6,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_63"
># is now a function of one variable</text>

<text 
x="76" 
y="547" 
class="s4_63"
>print</text>

<text 
x="124" 
y="547" 
class="s7_63"
>two_to_the</text>

<text 
x="203" 
y="547" 
class="s6_63"
>(</text>

<text 
x="211" 
y="547" 
class="s9_63"
>3</text>

<text 
x="219" 
y="547" 
class="s6_63"
>)</text>

<text 
x="337" 
y="547" 
dx="0,0,4.6" 
class="s11_63"
># 8</text>

<text 
x="55" 
y="600" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>You can also use</text>

<text 
x="207" 
y="600" 
class="s8_63"
>partial</text>

<text 
x="287" 
y="600" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>to fill in later arguments if you specify their names:</text>

<text 
x="76" 
y="648" 
class="s7_63"
>square_of</text>

<text 
x="156" 
y="648" 
class="s6_63"
>=</text>

<text 
x="171" 
y="648" 
class="s7_63"
>partial</text>

<text 
x="227" 
y="648" 
class="s6_63"
>(</text>

<text 
x="235" 
y="648" 
class="s7_63"
>exp</text>

<text 
x="258" 
y="648" 
class="s6_63"
>,</text>

<text 
x="274" 
y="648" 
class="s7_63"
>power</text>

<text 
x="314" 
y="648" 
class="s6_63"
>=</text>

<text 
x="322" 
y="648" 
class="s9_63"
>2</text>

<text 
x="329" 
y="648" 
class="s6_63"
>)</text>

<text 
x="76" 
y="663" 
class="s4_63"
>print</text>

<text 
x="124" 
y="663" 
class="s7_63"
>square_of</text>

<text 
x="195" 
y="663" 
class="s6_63"
>(</text>

<text 
x="203" 
y="663" 
class="s9_63"
>3</text>

<text 
x="211" 
y="663" 
class="s6_63"
>)</text>

<text 
x="361" 
y="663" 
dx="0,0,4.6" 
class="s11_63"
># 9</text>

<text 
x="55" 
y="716" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>It starts to get messy if you curry arguments in the middle of the function, so we’ll try to</text>

<text 
x="55" 
y="743" 
class="s2_63"
>avoid doing that.</text>

<text 
x="55" 
y="782" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>We will also occasionally use</text>

<text 
x="320" 
y="782" 
class="s8_63"
>map</text>

<text 
x="351" 
y="782" 
class="s2_63"
>,</text>

<text 
x="362" 
y="782" 
class="s8_63"
>reduce</text>

<text 
x="425" 
y="782" 
class="s2_63"
>, and</text>

<text 
x="474" 
y="782" 
class="s8_63"
>filter</text>

<text 
x="537" 
y="782" 
class="s2_63"
>, which provide functional</text>

<text 
x="55" 
y="811" 
class="s2_63"
>alternatives to list comprehensions:</text>

<text 
x="76" 
y="857" 
class="s4_63"
>def</text>

<text 
x="108" 
y="857" 
class="s5_63"
>double</text>

<text 
x="156" 
y="857" 
class="s6_63"
>(</text>

<text 
x="163" 
y="857" 
class="s7_63"
>x</text>

<text 
x="171" 
y="857" 
class="s6_63"
>):</text>

<text 
x="108" 
y="872" 
class="s4_63"
>return</text>

<text 
x="163" 
y="872" 
class="s9_63"
>2</text>

<text 
x="179" 
y="872" 
class="s6_63"
>*</text>

<text 
x="195" 
y="872" 
class="s7_63"
>x</text>

<text 
x="76" 
y="903" 
class="s7_63"
>xs</text>

<text 
x="100" 
y="903" 
dx="0,0,4.6" 
class="s6_63"
>= [</text>

<text 
x="124" 
y="903" 
class="s9_63"
>1</text>

<text 
x="132" 
y="903" 
class="s6_63"
>,</text>

<text 
x="148" 
y="903" 
class="s9_63"
>2</text>

<text 
x="156" 
y="903" 
class="s6_63"
>,</text>

<text 
x="171" 
y="903" 
class="s9_63"
>3</text>

<text 
x="179" 
y="903" 
class="s6_63"
>,</text>

<text 
x="195" 
y="903" 
class="s9_63"
>4</text>

<text 
x="203" 
y="903" 
class="s6_63"
>]</text>

<text 
x="76" 
y="918" 
class="s7_63"
>twice_xs</text>

<text 
x="148" 
y="918" 
dx="0,0,4.6" 
class="s6_63"
>= [</text>

<text 
x="171" 
y="918" 
class="s7_63"
>double</text>

<text 
x="219" 
y="918" 
class="s6_63"
>(</text>

<text 
x="227" 
y="918" 
class="s7_63"
>x</text>

<text 
x="235" 
y="918" 
class="s6_63"
>)</text>

<text 
x="250" 
y="918" 
class="s4_63"
>for</text>

<text 
x="282" 
y="918" 
class="s7_63"
>x</text>

<text 
x="298" 
y="918" 
class="s12_63"
>in</text>

<text 
x="322" 
y="918" 
class="s7_63"
>xs</text>

<text 
x="337" 
y="918" 
class="s6_63"
>]</text>

<text 
x="408" 
y="918" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,4.6,0" 
class="s11_63"
># [2, 4, 6, 8]</text>

<text 
x="76" 
y="934" 
class="s7_63"
>twice_xs</text>

<text 
x="148" 
y="934" 
class="s6_63"
>=</text>

<text 
x="163" 
y="934" 
class="s13_63"
>map</text>

<text 
x="187" 
y="934" 
class="s6_63"
>(</text>

<text 
x="195" 
y="934" 
class="s7_63"
>double</text>

<text 
x="242" 
y="934" 
class="s6_63"
>,</text>

<text 
x="258" 
y="934" 
class="s7_63"
>xs</text>

<text 
x="274" 
y="934" 
class="s6_63"
>)</text>

<text 
x="408" 
y="934" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0" 
class="s11_63"
># same as above</text>

<text 
x="76" 
y="949" 
class="s7_63"
>list_doubler</text>

<text 
x="179" 
y="949" 
class="s6_63"
>=</text>

<text 
x="195" 
y="949" 
class="s7_63"
>partial</text>

<text 
x="250" 
y="949" 
class="s6_63"
>(</text>

<text 
x="258" 
y="949" 
class="s13_63"
>map</text>

<text 
x="282" 
y="949" 
class="s6_63"
>,</text>

<text 
x="298" 
y="949" 
class="s7_63"
>double</text>

<text 
x="345" 
y="949" 
class="s6_63"
>)</text>

<text 
x="408" 
y="949" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0" 
class="s11_63"
># *function* that doubles a list</text>

<text 
x="76" 
y="964" 
class="s7_63"
>twice_xs</text>

<text 
x="148" 
y="964" 
class="s6_63"
>=</text>

<text 
x="163" 
y="964" 
class="s7_63"
>list_doubler</text>

<text 
x="258" 
y="964" 
class="s6_63"
>(</text>

<text 
x="266" 
y="964" 
class="s7_63"
>xs</text>

<text 
x="282" 
y="964" 
class="s6_63"
>)</text>

<text 
x="408" 
y="964" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,4.6,0" 
class="s11_63"
># again [2, 4, 6, 8]</text>

<text 
x="55" 
y="1017" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>You can use</text>

<text 
x="166" 
y="1017" 
class="s8_63"
>map</text>

<text 
x="204" 
y="1017" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_63"
>with multiple-argument functions if you provide multiple lists:</text>

<text 
x="76" 
y="1065" 
class="s4_63"
>def</text>

<text 
x="108" 
y="1065" 
class="s5_63"
>multiply</text>

<text 
x="171" 
y="1065" 
class="s6_63"
>(</text>

<text 
x="179" 
y="1065" 
class="s7_63"
>x</text>

<text 
x="187" 
y="1065" 
class="s6_63"
>,</text>

<text 
x="203" 
y="1065" 
class="s7_63"
>y</text>

<text 
x="211" 
y="1065" 
class="s6_63"
>):</text>

<text 
x="235" 
y="1065" 
class="s4_63"
>return</text>

<text 
x="290" 
y="1065" 
class="s7_63"
>x</text>

<text 
x="306" 
y="1065" 
class="s6_63"
>*</text>

<text 
x="322" 
y="1065" 
class="s7_63"
>y</text>

<text 
x="76" 
y="1095" 
class="s7_63"
>products</text>

<text 
x="148" 
y="1095" 
class="s6_63"
>=</text>

<text 
x="163" 
y="1095" 
class="s13_63"
>map</text>

<text 
x="187" 
y="1095" 
class="s6_63"
>(</text>

<text 
x="195" 
y="1095" 
class="s7_63"
>multiply</text>

<text 
x="258" 
y="1095" 
dx="0,0,4.6" 
class="s6_63"
>, [</text>

<text 
x="282" 
y="1095" 
class="s9_63"
>1</text>

<text 
x="290" 
y="1095" 
class="s6_63"
>,</text>

<text 
x="306" 
y="1095" 
class="s9_63"
>2</text>

<text 
x="314" 
y="1095" 
dx="0,0,0,4.6" 
class="s6_63"
>], [</text>

<text 
x="345" 
y="1095" 
class="s9_63"
>4</text>

<text 
x="353" 
y="1095" 
class="s6_63"
>,</text>

<text 
x="369" 
y="1095" 
class="s9_63"
>5</text>

<text 
x="377" 
y="1095" 
class="s6_63"
>])</text>

<text 
x="401" 
y="1095" 
dx="0,0,4.6,0,0,4.6,0,4.6,0,0,4.6,0,4.6,0,4.6,0,0,4.6,0,4.6,0,0,0,4.6,0,0" 
class="s11_63"
># [1 * 4, 2 * 5] = [4, 10]</text>

<text 
x="55" 
y="1148" 
dx="0,0,0,0,0,0,0,0,0,-1.4" 
class="s2_63"
>Similarly,</text>

<text 
x="146" 
y="1148" 
class="s8_63"
>filter</text>

<text 
x="215" 
y="1148" 
class="s2_63"
>does the work of a list-comprehension</text>

<text 
x="557" 
y="1148" 
class="s8_63"
>if</text>

<text 
x="578" 
y="1148" 
class="s2_63"
>:</text>

<text 
x="76" 
y="1195" 
class="s4_63"
>def</text>

<text 
x="108" 
y="1195" 
class="s5_63"
>is_even</text>

<text 
x="163" 
y="1195" 
class="s6_63"
>(</text>

<text 
x="171" 
y="1195" 
class="s7_63"
>x</text>

<text 
x="179" 
y="1195" 
class="s6_63"
>):</text>

<text 
x="108" 
y="1211" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s14_63"
>"""True if x is even, False if x is odd"""</text>

<text 
x="108" 
y="1226" 
class="s4_63"
>return</text>

<text 
x="163" 
y="1226" 
class="s7_63"
>x</text>

<text 
x="179" 
y="1226" 
class="s6_63"
>%</text>

<text 
x="195" 
y="1226" 
class="s9_63"
>2</text>

<text 
x="211" 
y="1226" 
class="s6_63"
>==</text>

<text 
x="235" 
y="1226" 
class="s9_63"
>0</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
