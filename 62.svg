<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 62 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_62{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_62{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_62{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_62{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_62{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s6_62{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s7_62{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00AA88;
}
.s8_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s10_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s12_62{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s13_62{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s14_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s15_62{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0" 
class="s1_62"
>Object-Oriented Programming</text>

<text 
x="55" 
y="115" 
class="s2_62"
>Like many languages, Python allows you to define</text>

<text 
x="506" 
y="115" 
class="s3_62"
>classes</text>

<text 
x="574" 
y="115" 
class="s2_62"
>that encapsulate data and the</text>

<text 
x="55" 
y="143" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_62"
>functions that operate on them. We’ll use them sometimes to make our code cleaner and</text>

<text 
x="55" 
y="170" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_62"
>simpler. It’s probably simplest to explain them by constructing a heavily annotated</text>

<text 
x="55" 
y="198" 
class="s2_62"
>example.</text>

<text 
x="55" 
y="236" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_62"
>Imagine we didn’t have the built-in Python</text>

<text 
x="438" 
y="236" 
class="s4_62"
>set</text>

<text 
x="470" 
y="236" 
class="s2_62"
>. Then we might want to create our own</text>

<text 
x="55" 
y="266" 
class="s4_62"
>Set</text>

<text 
x="92" 
y="266" 
class="s2_62"
>class.</text>

<text 
x="55" 
y="306" 
class="s2_62"
>What behavior should our class have? Given an instance of</text>

<text 
x="581" 
y="306" 
class="s4_62"
>Set</text>

<text 
x="612" 
y="306" 
class="s2_62"
>, we’ll need to be able to</text>

<text 
x="55" 
y="336" 
class="s4_62"
>add</text>

<text 
x="92" 
y="336" 
class="s2_62"
>items to it,</text>

<text 
x="191" 
y="336" 
class="s4_62"
>remove</text>

<text 
x="259" 
y="336" 
class="s2_62"
>items from it, and check whether it</text>

<text 
x="572" 
y="336" 
class="s4_62"
>contains</text>

<text 
x="662" 
y="336" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0" 
class="s2_62"
>a certain value. We’ll</text>

<text 
x="55" 
y="366" 
class="s2_62"
>create all of these as</text>

<text 
x="238" 
y="366" 
class="s3_62"
>member</text>

<text 
x="315" 
y="366" 
class="s2_62"
>functions, which means we’ll access them with a dot after a</text>

<text 
x="55" 
y="393" 
class="s4_62"
>Set</text>

<text 
x="92" 
y="393" 
class="s2_62"
>object:</text>

<text 
x="76" 
y="441" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s5_62"
># by convention, we give classes PascalCase names</text>

<text 
x="76" 
y="456" 
class="s6_62"
>class</text>

<text 
x="124" 
y="456" 
class="s7_62"
>Set</text>

<text 
x="148" 
y="456" 
class="s8_62"
>:</text>

<text 
x="108" 
y="487" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s5_62"
># these are the member functions</text>

<text 
x="108" 
y="502" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s5_62"
># every one takes a first parameter "self" (another convention)</text>

<text 
x="108" 
y="518" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0" 
class="s5_62"
># that refers to the particular Set object being used</text>

<text 
x="108" 
y="549" 
class="s6_62"
>def</text>

<text 
x="140" 
y="549" 
class="s9_62"
>__init__</text>

<text 
x="203" 
y="549" 
class="s8_62"
>(</text>

<text 
x="211" 
y="549" 
class="s10_62"
>self</text>

<text 
x="242" 
y="549" 
class="s8_62"
>,</text>

<text 
x="258" 
y="549" 
class="s11_62"
>values</text>

<text 
x="306" 
y="549" 
class="s8_62"
>=</text>

<text 
x="314" 
y="549" 
class="s10_62"
>None</text>

<text 
x="345" 
y="549" 
class="s8_62"
>):</text>

<text 
x="140" 
y="564" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s12_62"
>"""This is the constructor.</text>

<text 
x="140" 
y="579" 
dx="0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,4.6,0,0,0" 
class="s12_62"
>It gets called when you create a new Set.</text>

<text 
x="140" 
y="595" 
dx="0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0" 
class="s12_62"
>You would use it like</text>

<text 
x="140" 
y="610" 
dx="0,0,0,4.6,0,4.6,0,0,0,0" 
class="s12_62"
>s1 = Set()</text>

<text 
x="298" 
y="610" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0" 
class="s12_62"
># empty set</text>

<text 
x="140" 
y="626" 
dx="0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s12_62"
>s2 = Set([1,2,2,3]) # initialize with values"""</text>

<text 
x="140" 
y="656" 
class="s10_62"
>self</text>

<text 
x="171" 
y="656" 
class="s8_62"
>.</text>

<text 
x="179" 
y="656" 
class="s11_62"
>dict</text>

<text 
x="219" 
y="656" 
dx="0,0,4.6,0" 
class="s8_62"
>= {}</text>

<text 
x="258" 
y="656" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s5_62"
># each instance of Set has its own dict property</text>

<text 
x="258" 
y="672" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s5_62"
># which is what we'll use to track memberships</text>

<text 
x="140" 
y="687" 
class="s6_62"
>if</text>

<text 
x="163" 
y="687" 
class="s11_62"
>values</text>

<text 
x="219" 
y="687" 
dx="0,0,0,4.6,0,0" 
class="s13_62"
>is not</text>

<text 
x="274" 
y="687" 
class="s10_62"
>None</text>

<text 
x="306" 
y="687" 
class="s8_62"
>:</text>

<text 
x="171" 
y="703" 
class="s6_62"
>for</text>

<text 
x="203" 
y="703" 
class="s11_62"
>value</text>

<text 
x="250" 
y="703" 
class="s13_62"
>in</text>

<text 
x="274" 
y="703" 
class="s11_62"
>values</text>

<text 
x="322" 
y="703" 
class="s8_62"
>:</text>

<text 
x="203" 
y="718" 
class="s10_62"
>self</text>

<text 
x="235" 
y="718" 
class="s8_62"
>.</text>

<text 
x="242" 
y="718" 
class="s11_62"
>add</text>

<text 
x="266" 
y="718" 
class="s8_62"
>(</text>

<text 
x="274" 
y="718" 
class="s11_62"
>value</text>

<text 
x="314" 
y="718" 
class="s8_62"
>)</text>

<text 
x="108" 
y="749" 
class="s6_62"
>def</text>

<text 
x="140" 
y="749" 
class="s9_62"
>__repr__</text>

<text 
x="203" 
y="749" 
class="s8_62"
>(</text>

<text 
x="211" 
y="749" 
class="s10_62"
>self</text>

<text 
x="242" 
y="749" 
class="s8_62"
>):</text>

<text 
x="140" 
y="764" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,4.6,0,0,0,0,0" 
class="s12_62"
>"""this is the string representation of a Set object</text>

<text 
x="140" 
y="780" 
dx="0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s12_62"
>if you type it at the Python prompt or pass it to str()"""</text>

<text 
x="140" 
y="795" 
class="s6_62"
>return</text>

<text 
x="195" 
y="795" 
dx="0,0,0,0,0,0,4.6" 
class="s14_62"
>"Set: "</text>

<text 
x="258" 
y="795" 
class="s8_62"
>+</text>

<text 
x="274" 
y="795" 
class="s10_62"
>str</text>

<text 
x="298" 
y="795" 
class="s8_62"
>(</text>

<text 
x="306" 
y="795" 
class="s10_62"
>self</text>

<text 
x="337" 
y="795" 
class="s8_62"
>.</text>

<text 
x="345" 
y="795" 
class="s11_62"
>dict</text>

<text 
x="377" 
y="795" 
class="s8_62"
>.</text>

<text 
x="385" 
y="795" 
class="s11_62"
>keys</text>

<text 
x="416" 
y="795" 
class="s8_62"
>())</text>

<text 
x="108" 
y="826" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0" 
class="s5_62"
># we'll represent membership by being a key in self.dict with value True</text>

<text 
x="108" 
y="841" 
class="s6_62"
>def</text>

<text 
x="140" 
y="841" 
class="s9_62"
>add</text>

<text 
x="163" 
y="841" 
class="s8_62"
>(</text>

<text 
x="171" 
y="841" 
class="s10_62"
>self</text>

<text 
x="203" 
y="841" 
class="s8_62"
>,</text>

<text 
x="219" 
y="841" 
class="s11_62"
>value</text>

<text 
x="258" 
y="841" 
class="s8_62"
>):</text>

<text 
x="140" 
y="857" 
class="s10_62"
>self</text>

<text 
x="171" 
y="857" 
class="s8_62"
>.</text>

<text 
x="179" 
y="857" 
class="s11_62"
>dict</text>

<text 
x="211" 
y="857" 
class="s8_62"
>[</text>

<text 
x="219" 
y="857" 
class="s11_62"
>value</text>

<text 
x="258" 
y="857" 
dx="0,0,4.6" 
class="s8_62"
>] =</text>

<text 
x="290" 
y="857" 
class="s10_62"
>True</text>

<text 
x="108" 
y="887" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s5_62"
># value is in the Set if it's a key in the dictionary</text>

<text 
x="108" 
y="903" 
class="s6_62"
>def</text>

<text 
x="140" 
y="903" 
class="s9_62"
>contains</text>

<text 
x="203" 
y="903" 
class="s8_62"
>(</text>

<text 
x="211" 
y="903" 
class="s10_62"
>self</text>

<text 
x="242" 
y="903" 
class="s8_62"
>,</text>

<text 
x="258" 
y="903" 
class="s11_62"
>value</text>

<text 
x="298" 
y="903" 
class="s8_62"
>):</text>

<text 
x="140" 
y="918" 
class="s6_62"
>return</text>

<text 
x="195" 
y="918" 
class="s11_62"
>value</text>

<text 
x="242" 
y="918" 
class="s13_62"
>in</text>

<text 
x="266" 
y="918" 
class="s10_62"
>self</text>

<text 
x="298" 
y="918" 
class="s8_62"
>.</text>

<text 
x="306" 
y="918" 
class="s11_62"
>dict</text>

<text 
x="108" 
y="949" 
class="s6_62"
>def</text>

<text 
x="140" 
y="949" 
class="s9_62"
>remove</text>

<text 
x="187" 
y="949" 
class="s8_62"
>(</text>

<text 
x="195" 
y="949" 
class="s10_62"
>self</text>

<text 
x="227" 
y="949" 
class="s8_62"
>,</text>

<text 
x="242" 
y="949" 
class="s11_62"
>value</text>

<text 
x="282" 
y="949" 
class="s8_62"
>):</text>

<text 
x="140" 
y="964" 
class="s6_62"
>del</text>

<text 
x="171" 
y="964" 
class="s10_62"
>self</text>

<text 
x="203" 
y="964" 
class="s8_62"
>.</text>

<text 
x="211" 
y="964" 
class="s11_62"
>dict</text>

<text 
x="242" 
y="964" 
class="s8_62"
>[</text>

<text 
x="250" 
y="964" 
class="s11_62"
>value</text>

<text 
x="290" 
y="964" 
class="s8_62"
>]</text>

<text 
x="55" 
y="1017" 
class="s2_62"
>Which we could then use like:</text>

<text 
x="76" 
y="1062" 
class="s11_62"
>s</text>

<text 
x="92" 
y="1062" 
class="s8_62"
>=</text>

<text 
x="108" 
y="1062" 
class="s11_62"
>Set</text>

<text 
x="132" 
y="1062" 
class="s8_62"
>([</text>

<text 
x="148" 
y="1062" 
class="s15_62"
>1</text>

<text 
x="156" 
y="1062" 
class="s8_62"
>,</text>

<text 
x="163" 
y="1062" 
class="s15_62"
>2</text>

<text 
x="171" 
y="1062" 
class="s8_62"
>,</text>

<text 
x="179" 
y="1062" 
class="s15_62"
>3</text>

<text 
x="187" 
y="1062" 
class="s8_62"
>])</text>

<text 
x="76" 
y="1078" 
class="s11_62"
>s</text>

<text 
x="84" 
y="1078" 
class="s8_62"
>.</text>

<text 
x="92" 
y="1078" 
class="s11_62"
>add</text>

<text 
x="116" 
y="1078" 
class="s8_62"
>(</text>

<text 
x="124" 
y="1078" 
class="s15_62"
>4</text>

<text 
x="132" 
y="1078" 
class="s8_62"
>)</text>

<text 
x="76" 
y="1093" 
class="s6_62"
>print</text>

<text 
x="124" 
y="1093" 
class="s11_62"
>s</text>

<text 
x="132" 
y="1093" 
class="s8_62"
>.</text>

<text 
x="140" 
y="1093" 
class="s11_62"
>contains</text>

<text 
x="203" 
y="1093" 
class="s8_62"
>(</text>

<text 
x="211" 
y="1093" 
class="s15_62"
>4</text>

<text 
x="219" 
y="1093" 
class="s8_62"
>)</text>

<text 
x="266" 
y="1093" 
dx="0,0,4.6,0,0,0" 
class="s5_62"
># True</text>

<text 
x="76" 
y="1109" 
class="s11_62"
>s</text>

<text 
x="84" 
y="1109" 
class="s8_62"
>.</text>

<text 
x="92" 
y="1109" 
class="s11_62"
>remove</text>

<text 
x="140" 
y="1109" 
class="s8_62"
>(</text>

<text 
x="148" 
y="1109" 
class="s15_62"
>3</text>

<text 
x="156" 
y="1109" 
class="s8_62"
>)</text>

<text 
x="76" 
y="1124" 
class="s6_62"
>print</text>

<text 
x="124" 
y="1124" 
class="s11_62"
>s</text>

<text 
x="132" 
y="1124" 
class="s8_62"
>.</text>

<text 
x="140" 
y="1124" 
class="s11_62"
>contains</text>

<text 
x="203" 
y="1124" 
class="s8_62"
>(</text>

<text 
x="211" 
y="1124" 
class="s15_62"
>3</text>

<text 
x="219" 
y="1124" 
class="s8_62"
>)</text>

<text 
x="266" 
y="1124" 
dx="0,0,4.6,0,0,0,0" 
class="s5_62"
># False</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
