<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 164 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_164{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_164{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_164{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #330099;
}
.s4_164{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_164{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #330099;
}
.s6_164{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s7_164{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_164{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s9_164{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s10_164{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s11_164{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s12_164{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
dx="0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0" 
class="s1_164"
>HTML and the Parsing Thereof</text>

<text 
x="55" 
y="115" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>Pages on the Web are written in HTML, in which text is (ideally) marked up into elements</text>

<text 
x="55" 
y="143" 
class="s2_164"
>and their attributes:</text>

<text 
x="76" 
y="188" 
class="s3_164"
>&lt;html&gt;</text>

<text 
x="92" 
y="203" 
class="s3_164"
>&lt;head&gt;</text>

<text 
x="108" 
y="218" 
class="s3_164"
>&lt;title&gt;</text>

<text 
x="163" 
y="218" 
dx="0,0,4.6,0,0,0,4.6,0,0,0" 
class="s4_164"
>A web page</text>

<text 
x="242" 
y="218" 
class="s3_164"
>&lt;/title&gt;</text>

<text 
x="92" 
y="234" 
class="s3_164"
>&lt;/head&gt;</text>

<text 
x="92" 
y="249" 
class="s3_164"
>&lt;body&gt;</text>

<text 
x="108" 
y="265" 
class="s3_164"
>&lt;p</text>

<text 
x="132" 
y="265" 
class="s5_164"
>id=</text>

<text 
x="156" 
y="265" 
class="s6_164"
>"author"</text>

<text 
x="219" 
y="265" 
class="s3_164"
>&gt;</text>

<text 
x="227" 
y="265" 
dx="0,0,0,0,0,4.6,0,0,0" 
class="s4_164"
>Joel Grus</text>

<text 
x="298" 
y="265" 
class="s3_164"
>&lt;/p&gt;</text>

<text 
x="108" 
y="280" 
class="s3_164"
>&lt;p</text>

<text 
x="132" 
y="280" 
class="s5_164"
>id=</text>

<text 
x="156" 
y="280" 
class="s6_164"
>"subject"</text>

<text 
x="227" 
y="280" 
class="s3_164"
>&gt;</text>

<text 
x="235" 
y="280" 
dx="0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s4_164"
>Data Science</text>

<text 
x="329" 
y="280" 
class="s3_164"
>&lt;/p&gt;</text>

<text 
x="92" 
y="295" 
class="s3_164"
>&lt;/body&gt;</text>

<text 
x="76" 
y="311" 
class="s3_164"
>&lt;/html&gt;</text>

<text 
x="55" 
y="364" 
class="s2_164"
>In a perfect world, where all web pages are marked up semantically for our benefit, we</text>

<text 
x="55" 
y="391" 
class="s2_164"
>would be able to extract data using rules like “find the</text>

<text 
x="536" 
y="391" 
class="s7_164"
>&lt;p&gt;</text>

<text 
x="573" 
y="391" 
class="s2_164"
>element whose</text>

<text 
x="710" 
y="391" 
class="s7_164"
>id</text>

<text 
x="737" 
y="391" 
class="s2_164"
>is</text>

<text 
x="757" 
y="391" 
class="s7_164"
>subject</text>

<text 
x="55" 
y="421" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>and return the text it contains.” In the actual world, HTML is not generally well-formed,</text>

<text 
x="55" 
y="448" 
class="s2_164"
>let alone annotated. This means we’ll need help making sense of it.</text>

<text 
x="55" 
y="487" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>To get data out of HTML, we will use the</text>

<text 
x="426" 
y="487" 
class="s8_164"
>BeautifulSoup library</text>

<text 
x="617" 
y="487" 
class="s2_164"
>, which builds a tree out of</text>

<text 
x="55" 
y="514" 
class="s2_164"
>the various elements on a web page and provides a simple interface for accessing them. As</text>

<text 
x="55" 
y="542" 
class="s2_164"
>I write this, the latest version is Beautiful Soup 4.3.2 (</text>

<text 
x="530" 
y="542" 
dx="0,0,0,0,6.1,0,0,0,0,0,0,0,6.1,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_164"
>pip install beautifulsoup4</text>

<text 
x="804" 
y="542" 
class="s2_164"
>),</text>

<text 
x="55" 
y="572" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>which is what we’ll be using. We’ll also be using the</text>

<text 
x="524" 
y="572" 
class="s8_164"
>requests library</text>

<text 
x="666" 
y="572" 
class="s2_164"
>(</text>

<text 
x="673" 
y="572" 
dx="0,0,0,0,6.1,0,0,0,0,0,0" 
class="s7_164"
>pip install</text>

<text 
x="55" 
y="601" 
class="s7_164"
>requests</text>

<text 
x="139" 
y="601" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0" 
class="s2_164"
>), which is a much nicer way of making HTTP requests than anything that’s built</text>

<text 
x="55" 
y="631" 
class="s2_164"
>into Python.</text>

<text 
x="55" 
y="670" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>Python’s built-in HTML parser is not that lenient, which means that it doesn’t always cope</text>

<text 
x="55" 
y="697" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,-0.9" 
class="s2_164"
>well with HTML that’s not perfectly formed. For that reason, we’ll use a different parser,</text>

<text 
x="55" 
y="725" 
class="s2_164"
>which we need to install:</text>

<text 
x="76" 
y="770" 
dx="0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s4_164"
>pip install html5lib</text>

<text 
x="55" 
y="822" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0" 
class="s2_164"
>To use Beautiful Soup, we’ll need to pass some HTML into the</text>

<text 
x="616" 
y="822" 
class="s7_164"
>BeautifulSoup()</text>

<text 
x="55" 
y="852" 
class="s2_164"
>function. In our examples, this will be the result of a call to</text>

<text 
x="580" 
y="852" 
class="s7_164"
>requests.get</text>

<text 
x="707" 
y="852" 
class="s2_164"
>:</text>

<text 
x="76" 
y="900" 
class="s9_164"
>from</text>

<text 
x="116" 
y="900" 
class="s10_164"
>bs4</text>

<text 
x="148" 
y="900" 
class="s9_164"
>import</text>

<text 
x="203" 
y="900" 
class="s11_164"
>BeautifulSoup</text>

<text 
x="76" 
y="915" 
class="s9_164"
>import</text>

<text 
x="132" 
y="915" 
class="s10_164"
>requests</text>

<text 
x="76" 
y="930" 
class="s11_164"
>html</text>

<text 
x="116" 
y="930" 
class="s4_164"
>=</text>

<text 
x="132" 
y="930" 
class="s11_164"
>requests</text>

<text 
x="195" 
y="930" 
class="s4_164"
>.</text>

<text 
x="203" 
y="930" 
class="s11_164"
>get</text>

<text 
x="227" 
y="930" 
class="s4_164"
>(</text>

<text 
x="235" 
y="930" 
class="s6_164"
>"http://www.example.com"</text>

<text 
x="424" 
y="930" 
class="s4_164"
>).</text>

<text 
x="440" 
y="930" 
class="s11_164"
>text</text>

<text 
x="76" 
y="946" 
class="s11_164"
>soup</text>

<text 
x="116" 
y="946" 
class="s4_164"
>=</text>

<text 
x="132" 
y="946" 
class="s11_164"
>BeautifulSoup</text>

<text 
x="235" 
y="946" 
class="s4_164"
>(</text>

<text 
x="242" 
y="946" 
class="s11_164"
>html</text>

<text 
x="274" 
y="946" 
class="s4_164"
>,</text>

<text 
x="290" 
y="946" 
class="s6_164"
>'html5lib'</text>

<text 
x="369" 
y="946" 
class="s4_164"
>)</text>

<text 
x="55" 
y="999" 
class="s2_164"
>after which we can get pretty far using a few simple methods.</text>

<text 
x="55" 
y="1037" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>We’ll typically work with</text>

<text 
x="286" 
y="1037" 
class="s7_164"
>Tag</text>

<text 
x="323" 
y="1037" 
class="s2_164"
>objects, which correspond to the tags representing the</text>

<text 
x="55" 
y="1067" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0" 
class="s2_164"
>structure of an HTML page.</text>

<text 
x="55" 
y="1105" 
class="s2_164"
>For example, to find the first</text>

<text 
x="313" 
y="1105" 
class="s7_164"
>&lt;p&gt;</text>

<text 
x="350" 
y="1105" 
class="s2_164"
>tag (and its contents) you can use:</text>

<text 
x="76" 
y="1153" 
class="s11_164"
>first_paragraph</text>

<text 
x="203" 
y="1153" 
class="s4_164"
>=</text>

<text 
x="219" 
y="1153" 
class="s11_164"
>soup</text>

<text 
x="250" 
y="1153" 
class="s4_164"
>.</text>

<text 
x="258" 
y="1153" 
class="s11_164"
>find</text>

<text 
x="290" 
y="1153" 
class="s4_164"
>(</text>

<text 
x="298" 
y="1153" 
class="s6_164"
>'p'</text>

<text 
x="322" 
y="1153" 
class="s4_164"
>)</text>

<text 
x="393" 
y="1153" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0" 
class="s12_164"
># or just soup.p</text>

<text 
x="55" 
y="1205" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_164"
>You can get the text contents of a</text>

<text 
x="353" 
y="1205" 
class="s7_164"
>Tag</text>

<text 
x="390" 
y="1205" 
class="s2_164"
>using its</text>

<text 
x="469" 
y="1205" 
class="s7_164"
>text</text>

<text 
x="517" 
y="1205" 
class="s2_164"
>property:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
