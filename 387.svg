<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 387 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_387{
fill: #BEBEBE;
}

.s1_387{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_387{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_387{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_387{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_387{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_387{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s7_387{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_387{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s9_387{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_387{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_387{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s12_387{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,557.8l722.5,0c3,0,5.5,2.5,5.5,5.5l0,121.1c0,3,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.5,-5.5,-5.5L88,563.3c0,-3,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,2,4.4,4.4l0,121.1c0,2.4,-2,4.4,-4.4,4.4l-722.5,0c-2.4,0,-4.4,-2,-4.4,-4.4l0,-121.1c0,-2.4,2,-4.4,4.4,-4.4Z" class="g1_387" />
<text 
x="55" 
y="81" 
class="s1_387"
>JOIN</text>

<text 
x="55" 
y="122" 
class="s2_387"
>Relational database tables are often</text>

<text 
x="371" 
y="122" 
class="s3_387"
>normalized</text>

<text 
x="470" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>, which means that they’re organized to</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>minimize redundancy. For example, when we work with our users’ interests in Python we</text>

<text 
x="55" 
y="177" 
class="s2_387"
>can just give each user a</text>

<text 
x="274" 
y="177" 
class="s4_387"
>list</text>

<text 
x="322" 
y="177" 
class="s2_387"
>containing his interests.</text>

<text 
x="55" 
y="217" 
dx="0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>SQL tables can’t typically contain lists, so the typical solution is to create a second table</text>

<text 
x="55" 
y="245" 
class="s4_387"
>user_interests</text>

<text 
x="208" 
y="245" 
class="s2_387"
>containing the one-to-many relationship between</text>

<text 
x="644" 
y="245" 
class="s4_387"
>user_id</text>

<text 
x="718" 
y="245" 
class="s2_387"
>s and interests.</text>

<text 
x="55" 
y="275" 
dx="0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>In SQL you might do:</text>

<text 
x="76" 
y="320" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s5_387"
>CREATE TABLE</text>

<text 
x="179" 
y="320" 
class="s6_387"
>user_interests</text>

<text 
x="298" 
y="320" 
class="s7_387"
>(</text>

<text 
x="108" 
y="335" 
class="s6_387"
>user_id</text>

<text 
x="171" 
y="335" 
class="s8_387"
>INT</text>

<text 
x="203" 
y="335" 
dx="0,0,0,0,4.6,0,0,0" 
class="s5_387"
>NOT NULL</text>

<text 
x="266" 
y="335" 
class="s7_387"
>,</text>

<text 
x="108" 
y="350" 
class="s6_387"
>interest</text>

<text 
x="179" 
y="350" 
class="s8_387"
>VARCHAR</text>

<text 
x="235" 
y="350" 
class="s7_387"
>(</text>

<text 
x="242" 
y="350" 
class="s9_387"
>100</text>

<text 
x="266" 
y="350" 
class="s7_387"
>)</text>

<text 
x="282" 
y="350" 
dx="0,0,0,0,4.6,0,0,0" 
class="s5_387"
>NOT NULL</text>

<text 
x="76" 
y="366" 
class="s7_387"
>);</text>

<text 
x="55" 
y="419" 
class="s2_387"
>whereas in NotQuiteABase you’d create the table:</text>

<text 
x="76" 
y="464" 
class="s6_387"
>user_interests</text>

<text 
x="195" 
y="464" 
class="s7_387"
>=</text>

<text 
x="211" 
y="464" 
class="s6_387"
>Table</text>

<text 
x="250" 
y="464" 
class="s7_387"
>([</text>

<text 
x="266" 
y="464" 
class="s10_387"
>"user_id"</text>

<text 
x="337" 
y="464" 
class="s7_387"
>,</text>

<text 
x="353" 
y="464" 
class="s10_387"
>"interest"</text>

<text 
x="432" 
y="464" 
class="s7_387"
>])</text>

<text 
x="76" 
y="479" 
class="s6_387"
>user_interests</text>

<text 
x="187" 
y="479" 
class="s7_387"
>.</text>

<text 
x="195" 
y="479" 
class="s6_387"
>insert</text>

<text 
x="242" 
y="479" 
class="s7_387"
>([</text>

<text 
x="258" 
y="479" 
class="s9_387"
>0</text>

<text 
x="266" 
y="479" 
class="s7_387"
>,</text>

<text 
x="282" 
y="479" 
class="s10_387"
>"SQL"</text>

<text 
x="322" 
y="479" 
class="s7_387"
>])</text>

<text 
x="76" 
y="495" 
class="s6_387"
>user_interests</text>

<text 
x="187" 
y="495" 
class="s7_387"
>.</text>

<text 
x="195" 
y="495" 
class="s6_387"
>insert</text>

<text 
x="242" 
y="495" 
class="s7_387"
>([</text>

<text 
x="258" 
y="495" 
class="s9_387"
>0</text>

<text 
x="266" 
y="495" 
class="s7_387"
>,</text>

<text 
x="282" 
y="495" 
class="s10_387"
>"NoSQL"</text>

<text 
x="337" 
y="495" 
class="s7_387"
>])</text>

<text 
x="76" 
y="510" 
class="s6_387"
>user_interests</text>

<text 
x="187" 
y="510" 
class="s7_387"
>.</text>

<text 
x="195" 
y="510" 
class="s6_387"
>insert</text>

<text 
x="242" 
y="510" 
class="s7_387"
>([</text>

<text 
x="258" 
y="510" 
class="s9_387"
>2</text>

<text 
x="266" 
y="510" 
class="s7_387"
>,</text>

<text 
x="282" 
y="510" 
class="s10_387"
>"SQL"</text>

<text 
x="322" 
y="510" 
class="s7_387"
>])</text>

<text 
x="76" 
y="525" 
class="s6_387"
>user_interests</text>

<text 
x="187" 
y="525" 
class="s7_387"
>.</text>

<text 
x="195" 
y="525" 
class="s6_387"
>insert</text>

<text 
x="242" 
y="525" 
class="s7_387"
>([</text>

<text 
x="258" 
y="525" 
class="s9_387"
>2</text>

<text 
x="266" 
y="525" 
class="s7_387"
>,</text>

<text 
x="282" 
y="525" 
class="s10_387"
>"MySQL"</text>

<text 
x="337" 
y="525" 
class="s7_387"
>])</text>

<text 
x="421" 
y="583" 
dx="0,1.1,1.1,1.1" 
class="s11_387"
>NOTE</text>

<text 
x="97" 
y="612" 
dx="0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s12_387"
>There’s still plenty of redundancy — the interest “SQL” is stored in two different places. In a real database</text>

<text 
x="97" 
y="632" 
class="s12_387"
>you might store</text>

<text 
x="205" 
y="632" 
class="s7_387"
>user_id</text>

<text 
x="264" 
y="632" 
class="s12_387"
>and</text>

<text 
x="292" 
y="632" 
class="s7_387"
>interest_id</text>

<text 
x="383" 
y="632" 
class="s12_387"
>in the</text>

<text 
x="425" 
y="632" 
class="s7_387"
>user_interests</text>

<text 
x="539" 
y="632" 
class="s12_387"
>table and then create a third table</text>

<text 
x="97" 
y="654" 
class="s7_387"
>interests</text>

<text 
x="173" 
y="654" 
class="s12_387"
>mapping</text>

<text 
x="234" 
y="654" 
class="s7_387"
>interest_id</text>

<text 
x="326" 
y="654" 
class="s12_387"
>to</text>

<text 
x="342" 
y="654" 
class="s7_387"
>interest</text>

<text 
x="410" 
y="654" 
class="s12_387"
>so you could store the interest names only once each. Here</text>

<text 
x="97" 
y="676" 
class="s12_387"
>that would just make our examples more complicated than they need to be.</text>

<text 
x="55" 
y="721" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>When our data lives across different tables, how do we analyze it? By</text>

<text 
x="673" 
y="721" 
class="s4_387"
>JOIN</text>

<text 
x="715" 
y="721" 
class="s2_387"
>ing the tables</text>

<text 
x="55" 
y="751" 
dx="0,0,0,0,0,0,0,0,-1.2,0,0" 
class="s2_387"
>together. A</text>

<text 
x="156" 
y="751" 
class="s4_387"
>JOIN</text>

<text 
x="204" 
y="751" 
class="s2_387"
>combines rows in the left table with corresponding rows in the right</text>

<text 
x="55" 
y="781" 
class="s2_387"
>table, where the meaning of “corresponding” is based on how we specify the join.</text>

<text 
x="55" 
y="819" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_387"
>For example, to find the users interested in SQL you’d query:</text>

<text 
x="76" 
y="864" 
class="s5_387"
>SELECT</text>

<text 
x="132" 
y="864" 
class="s6_387"
>users</text>

<text 
x="171" 
y="864" 
class="s7_387"
>.</text>

<text 
x="179" 
y="864" 
class="s6_387"
>name</text>

<text 
x="76" 
y="880" 
class="s5_387"
>FROM</text>

<text 
x="116" 
y="880" 
class="s6_387"
>users</text>

<text 
x="76" 
y="895" 
class="s5_387"
>JOIN</text>

<text 
x="116" 
y="895" 
class="s6_387"
>user_interests</text>

<text 
x="76" 
y="911" 
class="s5_387"
>ON</text>

<text 
x="100" 
y="911" 
class="s6_387"
>users</text>

<text 
x="140" 
y="911" 
class="s7_387"
>.</text>

<text 
x="148" 
y="911" 
class="s6_387"
>user_id</text>

<text 
x="211" 
y="911" 
class="s7_387"
>=</text>

<text 
x="227" 
y="911" 
class="s6_387"
>user_interests</text>

<text 
x="337" 
y="911" 
class="s7_387"
>.</text>

<text 
x="345" 
y="911" 
class="s6_387"
>user_id</text>

<text 
x="76" 
y="926" 
class="s5_387"
>WHERE</text>

<text 
x="124" 
y="926" 
class="s6_387"
>user_interests</text>

<text 
x="235" 
y="926" 
class="s7_387"
>.</text>

<text 
x="242" 
y="926" 
class="s6_387"
>interest</text>

<text 
x="314" 
y="926" 
class="s7_387"
>=</text>

<text 
x="329" 
y="926" 
class="s10_387"
>'SQL'</text>

<text 
x="55" 
y="979" 
class="s2_387"
>The</text>

<text 
x="94" 
y="979" 
class="s4_387"
>JOIN</text>

<text 
x="142" 
y="979" 
class="s2_387"
>says that, for each row in</text>

<text 
x="368" 
y="979" 
class="s4_387"
>users</text>

<text 
x="421" 
y="979" 
class="s2_387"
>, we should look at the</text>

<text 
x="626" 
y="979" 
class="s4_387"
>user_id</text>

<text 
x="705" 
y="979" 
class="s2_387"
>and associate</text>

<text 
x="55" 
y="1008" 
class="s2_387"
>that row with every row in</text>

<text 
x="294" 
y="1008" 
class="s4_387"
>user_interests</text>

<text 
x="447" 
y="1008" 
class="s2_387"
>containing the same</text>

<text 
x="628" 
y="1008" 
class="s4_387"
>user_id</text>

<text 
x="702" 
y="1008" 
class="s2_387"
>.</text>

<text 
x="55" 
y="1049" 
class="s2_387"
>Notice we had to specify which tables to</text>

<text 
x="417" 
y="1049" 
class="s4_387"
>JOIN</text>

<text 
x="465" 
y="1049" 
class="s2_387"
>and also which columns to join</text>

<text 
x="745" 
y="1049" 
class="s4_387"
>ON</text>

<text 
x="766" 
y="1049" 
class="s2_387"
>. This is</text>

<text 
x="55" 
y="1079" 
class="s2_387"
>an</text>

<text 
x="81" 
y="1079" 
dx="0,0,0,0,0,0,6.1,0,0,0" 
class="s4_387"
>INNER JOIN</text>

<text 
x="186" 
y="1079" 
class="s2_387"
>, which returns the combinations of rows (and only the combinations of</text>

<text 
x="55" 
y="1109" 
class="s2_387"
>rows) that match according to the specified join criteria.</text>

<text 
x="55" 
y="1147" 
class="s2_387"
>There is also a</text>

<text 
x="188" 
y="1147" 
dx="0,0,0,0,0,6.1,0,0,0" 
class="s4_387"
>LEFT JOIN</text>

<text 
x="283" 
y="1147" 
class="s2_387"
>, which — in addition to the combinations of matching rows —</text>

<text 
x="55" 
y="1177" 
class="s2_387"
>returns a row for each left-table row with no matching rows (in which case, the fields that</text>

<text 
x="55" 
y="1204" 
class="s2_387"
>would have come from the right table are all</text>

<text 
x="451" 
y="1204" 
class="s4_387"
>NULL</text>

<text 
x="493" 
y="1204" 
class="s2_387"
>).</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
