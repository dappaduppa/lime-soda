<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 302 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_302{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_302{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_302{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_302{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_302{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_302{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_302{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_302{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s9_302{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s10_302{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s11_302{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
dx="0,0,0,-0.6,0,0,0,0,-0.6,0,0" 
class="s1_302"
>Perceptrons</text>

<text 
x="55" 
y="122" 
class="s2_302"
>Pretty much the simplest neural network is the</text>

<text 
x="468" 
y="122" 
dx="0,0,0,-0.8,0,0,0,0,-0.8,0" 
class="s3_302"
>perceptron</text>

<text 
x="563" 
y="122" 
class="s2_302"
>, which approximates a single</text>

<text 
x="55" 
y="149" 
class="s2_302"
>neuron with</text>

<text 
x="166" 
y="149" 
class="s3_302"
>n</text>

<text 
x="182" 
y="149" 
class="s2_302"
>binary inputs. It computes a weighted sum of its inputs and “fires” if that</text>

<text 
x="55" 
y="177" 
class="s2_302"
>weighted sum is zero or greater:</text>

<text 
x="76" 
y="222" 
class="s4_302"
>def</text>

<text 
x="108" 
y="222" 
class="s5_302"
>step_function</text>

<text 
x="211" 
y="222" 
class="s6_302"
>(</text>

<text 
x="219" 
y="222" 
class="s7_302"
>x</text>

<text 
x="227" 
y="222" 
class="s6_302"
>):</text>

<text 
x="108" 
y="237" 
class="s4_302"
>return</text>

<text 
x="163" 
y="237" 
class="s8_302"
>1</text>

<text 
x="179" 
y="237" 
class="s4_302"
>if</text>

<text 
x="203" 
y="237" 
class="s7_302"
>x</text>

<text 
x="219" 
y="237" 
class="s6_302"
>&gt;=</text>

<text 
x="242" 
y="237" 
class="s8_302"
>0</text>

<text 
x="258" 
y="237" 
class="s4_302"
>else</text>

<text 
x="298" 
y="237" 
class="s8_302"
>0</text>

<text 
x="76" 
y="268" 
class="s4_302"
>def</text>

<text 
x="108" 
y="268" 
class="s5_302"
>perceptron_output</text>

<text 
x="242" 
y="268" 
class="s6_302"
>(</text>

<text 
x="250" 
y="268" 
class="s7_302"
>weights</text>

<text 
x="306" 
y="268" 
class="s6_302"
>,</text>

<text 
x="322" 
y="268" 
class="s7_302"
>bias</text>

<text 
x="353" 
y="268" 
class="s6_302"
>,</text>

<text 
x="369" 
y="268" 
class="s7_302"
>x</text>

<text 
x="377" 
y="268" 
class="s6_302"
>):</text>

<text 
x="108" 
y="283" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s9_302"
>"""returns 1 if the perceptron 'fires', 0 if not"""</text>

<text 
x="108" 
y="299" 
class="s7_302"
>calculation</text>

<text 
x="203" 
y="299" 
class="s6_302"
>=</text>

<text 
x="219" 
y="299" 
class="s7_302"
>dot</text>

<text 
x="242" 
y="299" 
class="s6_302"
>(</text>

<text 
x="250" 
y="299" 
class="s7_302"
>weights</text>

<text 
x="306" 
y="299" 
class="s6_302"
>,</text>

<text 
x="322" 
y="299" 
class="s7_302"
>x</text>

<text 
x="329" 
y="299" 
dx="0,0,4.6" 
class="s6_302"
>) +</text>

<text 
x="361" 
y="299" 
class="s7_302"
>bias</text>

<text 
x="108" 
y="314" 
class="s4_302"
>return</text>

<text 
x="163" 
y="314" 
class="s7_302"
>step_function</text>

<text 
x="266" 
y="314" 
class="s6_302"
>(</text>

<text 
x="274" 
y="314" 
class="s7_302"
>calculation</text>

<text 
x="361" 
y="314" 
class="s6_302"
>)</text>

<text 
x="55" 
y="367" 
class="s2_302"
>The perceptron is simply distinguishing between the half spaces separated by the</text>

<text 
x="55" 
y="394" 
class="s2_302"
>hyperplane of points</text>

<text 
x="241" 
y="394" 
class="s10_302"
>x</text>

<text 
x="257" 
y="394" 
class="s2_302"
>for which:</text>

<text 
x="76" 
y="442" 
class="s7_302"
>dot</text>

<text 
x="100" 
y="442" 
class="s6_302"
>(</text>

<text 
x="108" 
y="442" 
class="s7_302"
>weights</text>

<text 
x="163" 
y="442" 
class="s6_302"
>,</text>

<text 
x="171" 
y="442" 
class="s7_302"
>x</text>

<text 
x="179" 
y="442" 
dx="0,0,4.6" 
class="s6_302"
>) +</text>

<text 
x="211" 
y="442" 
class="s7_302"
>bias</text>

<text 
x="250" 
y="442" 
class="s6_302"
>==</text>

<text 
x="274" 
y="442" 
class="s8_302"
>0</text>

<text 
x="55" 
y="495" 
dx="0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_302"
>With properly chosen weights, perceptrons can solve a number of simple problems</text>

<text 
x="55" 
y="522" 
class="s2_302"
>(</text>

<text 
x="62" 
y="522" 
class="s11_302"
>Figure 18-1</text>

<text 
x="165" 
y="522" 
class="s2_302"
>). For example, we can create an</text>

<text 
x="456" 
y="522" 
class="s3_302"
>AND gate</text>

<text 
x="549" 
y="522" 
class="s2_302"
>(which returns 1 if both its inputs</text>

<text 
x="55" 
y="550" 
class="s2_302"
>are 1 but returns 0 if one of its inputs is 0) with:</text>

<text 
x="76" 
y="595" 
class="s7_302"
>weights</text>

<text 
x="140" 
y="595" 
dx="0,0,4.6" 
class="s6_302"
>= [</text>

<text 
x="163" 
y="595" 
class="s8_302"
>2</text>

<text 
x="171" 
y="595" 
class="s6_302"
>,</text>

<text 
x="187" 
y="595" 
class="s8_302"
>2</text>

<text 
x="195" 
y="595" 
class="s6_302"
>]</text>

<text 
x="76" 
y="610" 
class="s7_302"
>bias</text>

<text 
x="116" 
y="610" 
dx="0,0,4.6" 
class="s6_302"
>= -</text>

<text 
x="140" 
y="610" 
class="s8_302"
>3</text>

<text 
x="55" 
y="663" 
class="s2_302"
>If both inputs are 1, the</text>

<text 
x="265" 
y="663" 
class="s10_302"
>calculation</text>

<text 
x="387" 
y="663" 
class="s2_302"
>equals 2 + 2 - 3 = 1, and the output is 1. If only one</text>

<text 
x="55" 
y="693" 
class="s2_302"
>of the inputs is 1, the</text>

<text 
x="244" 
y="693" 
class="s10_302"
>calculation</text>

<text 
x="366" 
y="693" 
class="s2_302"
>equals 2 + 0 - 3 = -1, and the output is 0. And if both of</text>

<text 
x="55" 
y="722" 
class="s2_302"
>the inputs are 0, the</text>

<text 
x="233" 
y="722" 
class="s10_302"
>calculation</text>

<text 
x="354" 
y="722" 
class="s2_302"
>equals -3, and the output is 0.</text>

<text 
x="55" 
y="763" 
dx="0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_302"
>Similarly, we could build an</text>

<text 
x="308" 
y="763" 
class="s3_302"
>OR gate</text>

<text 
x="386" 
y="763" 
class="s2_302"
>with:</text>

<text 
x="76" 
y="808" 
class="s7_302"
>weights</text>

<text 
x="140" 
y="808" 
dx="0,0,4.6" 
class="s6_302"
>= [</text>

<text 
x="163" 
y="808" 
class="s8_302"
>2</text>

<text 
x="171" 
y="808" 
class="s6_302"
>,</text>

<text 
x="187" 
y="808" 
class="s8_302"
>2</text>

<text 
x="195" 
y="808" 
class="s6_302"
>]</text>

<text 
x="76" 
y="824" 
class="s7_302"
>bias</text>

<text 
x="116" 
y="824" 
dx="0,0,4.6" 
class="s6_302"
>= -</text>

<text 
x="140" 
y="824" 
class="s8_302"
>1</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
