<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 326 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_326{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_326{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_326{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s7_326{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s8_326{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s9_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s10_326{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s11_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s12_326{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #CC0000;
}
.s13_326{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s14_326{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_326"
>Bottom-up Hierarchical Clustering</text>

<text 
x="55" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0" 
class="s2_326"
>An alternative approach to clustering is to “grow” clusters from the bottom up. We can do</text>

<text 
x="55" 
y="149" 
class="s2_326"
>this in the following way:</text>

<text 
x="75" 
y="187" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>1. Make each input its own cluster of one.</text>

<text 
x="75" 
y="234" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>2. As long as there are multiple clusters remaining, find the two closest clusters and</text>

<text 
x="104" 
y="259" 
dx="0,0,0,-0.4,0,0,0,0,0,0,0" 
class="s2_326"
>merge them.</text>

<text 
x="55" 
y="308" 
class="s2_326"
>At the end, we’ll have one giant cluster containing all the inputs. If we keep track of the</text>

<text 
x="55" 
y="335" 
dx="0,0,0,-0.4,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>merge order, we can recreate any number of clusters by unmerging. For example, if we</text>

<text 
x="55" 
y="363" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0" 
class="s2_326"
>want three clusters, we can just undo the last two merges.</text>

<text 
x="55" 
y="401" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>We’ll use a really simple representation of clusters. Our values will live in</text>

<text 
x="712" 
y="401" 
class="s3_326"
>leaf</text>

<text 
x="750" 
y="401" 
class="s2_326"
>clusters,</text>

<text 
x="55" 
y="429" 
class="s2_326"
>which we will represent as 1-tuples:</text>

<text 
x="76" 
y="474" 
class="s4_326"
>leaf1</text>

<text 
x="124" 
y="474" 
dx="0,0,4.6,0" 
class="s5_326"
>= ([</text>

<text 
x="156" 
y="474" 
class="s6_326"
>10</text>

<text 
x="171" 
y="474" 
class="s5_326"
>,</text>

<text 
x="187" 
y="474" 
class="s6_326"
>20</text>

<text 
x="203" 
y="474" 
class="s5_326"
>],)</text>

<text 
x="250" 
y="474" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s7_326"
># to make a 1-tuple you need the trailing comma</text>

<text 
x="76" 
y="489" 
class="s4_326"
>leaf2</text>

<text 
x="124" 
y="489" 
dx="0,0,4.6,0" 
class="s5_326"
>= ([</text>

<text 
x="156" 
y="489" 
class="s6_326"
>30</text>

<text 
x="171" 
y="489" 
dx="0,0,4.6" 
class="s5_326"
>, -</text>

<text 
x="195" 
y="489" 
class="s6_326"
>15</text>

<text 
x="211" 
y="489" 
class="s5_326"
>],)</text>

<text 
x="250" 
y="489" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s7_326"
># otherwise Python treats the parentheses as parentheses</text>

<text 
x="55" 
y="542" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>We’ll use these to grow</text>

<text 
x="267" 
y="542" 
dx="0,0,0,-0.8,0,0" 
class="s3_326"
>merged</text>

<text 
x="338" 
y="542" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,-0.9" 
class="s2_326"
>clusters, which we will represent as 2-tuples (merge order,</text>

<text 
x="55" 
y="569" 
class="s2_326"
>children):</text>

<text 
x="76" 
y="615" 
class="s4_326"
>merged</text>

<text 
x="132" 
y="615" 
dx="0,0,4.6" 
class="s5_326"
>= (</text>

<text 
x="156" 
y="615" 
class="s6_326"
>1</text>

<text 
x="163" 
y="615" 
dx="0,0,4.6" 
class="s5_326"
>, [</text>

<text 
x="187" 
y="615" 
class="s4_326"
>leaf1</text>

<text 
x="227" 
y="615" 
class="s5_326"
>,</text>

<text 
x="242" 
y="615" 
class="s4_326"
>leaf2</text>

<text 
x="282" 
y="615" 
class="s5_326"
>])</text>

<text 
x="55" 
y="667" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>We’ll talk about merge order in a bit, but first let’s create a few helper functions:</text>

<text 
x="76" 
y="712" 
class="s8_326"
>def</text>

<text 
x="108" 
y="712" 
class="s9_326"
>is_leaf</text>

<text 
x="163" 
y="712" 
class="s5_326"
>(</text>

<text 
x="171" 
y="712" 
class="s4_326"
>cluster</text>

<text 
x="227" 
y="712" 
class="s5_326"
>):</text>

<text 
x="108" 
y="728" 
dx="0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0" 
class="s10_326"
>"""a cluster is a leaf if it has length 1"""</text>

<text 
x="108" 
y="743" 
class="s8_326"
>return</text>

<text 
x="163" 
y="743" 
class="s11_326"
>len</text>

<text 
x="187" 
y="743" 
class="s5_326"
>(</text>

<text 
x="195" 
y="743" 
class="s4_326"
>cluster</text>

<text 
x="250" 
y="743" 
dx="0,0,4.6,0" 
class="s5_326"
>) ==</text>

<text 
x="290" 
y="743" 
class="s6_326"
>1</text>

<text 
x="76" 
y="774" 
class="s8_326"
>def</text>

<text 
x="108" 
y="774" 
class="s9_326"
>get_children</text>

<text 
x="203" 
y="774" 
class="s5_326"
>(</text>

<text 
x="211" 
y="774" 
class="s4_326"
>cluster</text>

<text 
x="266" 
y="774" 
class="s5_326"
>):</text>

<text 
x="108" 
y="789" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s10_326"
>"""returns the two children of this cluster if it's a merged cluster;</text>

<text 
x="108" 
y="805" 
dx="0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s10_326"
>raises an exception if this is a leaf cluster"""</text>

<text 
x="108" 
y="820" 
class="s8_326"
>if</text>

<text 
x="132" 
y="820" 
class="s4_326"
>is_leaf</text>

<text 
x="187" 
y="820" 
class="s5_326"
>(</text>

<text 
x="195" 
y="820" 
class="s4_326"
>cluster</text>

<text 
x="250" 
y="820" 
class="s5_326"
>):</text>

<text 
x="140" 
y="836" 
class="s8_326"
>raise</text>

<text 
x="187" 
y="836" 
class="s12_326"
>TypeError</text>

<text 
x="258" 
y="836" 
class="s5_326"
>(</text>

<text 
x="266" 
y="836" 
dx="0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s13_326"
>"a leaf cluster has no children"</text>

<text 
x="519" 
y="836" 
class="s5_326"
>)</text>

<text 
x="108" 
y="851" 
class="s8_326"
>else</text>

<text 
x="140" 
y="851" 
class="s5_326"
>:</text>

<text 
x="140" 
y="867" 
class="s8_326"
>return</text>

<text 
x="195" 
y="867" 
class="s4_326"
>cluster</text>

<text 
x="250" 
y="867" 
class="s5_326"
>[</text>

<text 
x="258" 
y="867" 
class="s6_326"
>1</text>

<text 
x="266" 
y="867" 
class="s5_326"
>]</text>

<text 
x="76" 
y="897" 
class="s8_326"
>def</text>

<text 
x="108" 
y="897" 
class="s9_326"
>get_values</text>

<text 
x="187" 
y="897" 
class="s5_326"
>(</text>

<text 
x="195" 
y="897" 
class="s4_326"
>cluster</text>

<text 
x="250" 
y="897" 
class="s5_326"
>):</text>

<text 
x="108" 
y="913" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s10_326"
>"""returns the value in this cluster (if it's a leaf cluster)</text>

<text 
x="108" 
y="928" 
dx="0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s10_326"
>or all the values in the leaf clusters below it (if it's not)"""</text>

<text 
x="108" 
y="944" 
class="s8_326"
>if</text>

<text 
x="132" 
y="944" 
class="s4_326"
>is_leaf</text>

<text 
x="187" 
y="944" 
class="s5_326"
>(</text>

<text 
x="195" 
y="944" 
class="s4_326"
>cluster</text>

<text 
x="250" 
y="944" 
class="s5_326"
>):</text>

<text 
x="140" 
y="959" 
class="s8_326"
>return</text>

<text 
x="195" 
y="959" 
class="s4_326"
>cluster</text>

<text 
x="298" 
y="959" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s7_326"
># is already a 1-tuple containing value</text>

<text 
x="108" 
y="974" 
class="s8_326"
>else</text>

<text 
x="140" 
y="974" 
class="s5_326"
>:</text>

<text 
x="140" 
y="990" 
class="s8_326"
>return</text>

<text 
x="195" 
y="990" 
class="s5_326"
>[</text>

<text 
x="203" 
y="990" 
class="s4_326"
>value</text>

<text 
x="203" 
y="1005" 
class="s8_326"
>for</text>

<text 
x="235" 
y="1005" 
class="s4_326"
>child</text>

<text 
x="282" 
y="1005" 
class="s14_326"
>in</text>

<text 
x="306" 
y="1005" 
class="s4_326"
>get_children</text>

<text 
x="401" 
y="1005" 
class="s5_326"
>(</text>

<text 
x="408" 
y="1005" 
class="s4_326"
>cluster</text>

<text 
x="464" 
y="1005" 
class="s5_326"
>)</text>

<text 
x="203" 
y="1021" 
class="s8_326"
>for</text>

<text 
x="235" 
y="1021" 
class="s4_326"
>value</text>

<text 
x="282" 
y="1021" 
class="s14_326"
>in</text>

<text 
x="306" 
y="1021" 
class="s4_326"
>get_values</text>

<text 
x="385" 
y="1021" 
class="s5_326"
>(</text>

<text 
x="393" 
y="1021" 
class="s4_326"
>child</text>

<text 
x="432" 
y="1021" 
class="s5_326"
>)]</text>

<text 
x="55" 
y="1073" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>In order to merge the closest clusters, we need some notion of the distance between</text>

<text 
x="55" 
y="1101" 
dx="0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>clusters. We’ll use the</text>

<text 
x="254" 
y="1101" 
class="s3_326"
>minimum</text>

<text 
x="341" 
y="1101" 
class="s2_326"
>distance between elements of the two clusters, which</text>

<text 
x="55" 
y="1128" 
dx="0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0" 
class="s2_326"
>merges the two clusters that are closest to touching (but will sometimes produce large</text>

<text 
x="55" 
y="1156" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>chain-like clusters that aren’t very tight). If we wanted tight spherical clusters, we might</text>

<text 
x="55" 
y="1183" 
class="s2_326"
>use the</text>

<text 
x="122" 
y="1183" 
class="s3_326"
>maximum</text>

<text 
x="213" 
y="1183" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_326"
>distance instead, as it merges the two clusters that fit in the smallest ball.</text>

<text 
x="55" 
y="1211" 
class="s2_326"
>Both are common choices, as is the</text>

<text 
x="371" 
y="1211" 
class="s3_326"
>average</text>

<text 
x="447" 
y="1211" 
class="s2_326"
>distance:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
