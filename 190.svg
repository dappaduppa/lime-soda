<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 190 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_190{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s2_190{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s3_190{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_190{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s5_190{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_190{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s7_190{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s8_190{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_190{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s10_190{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s11_190{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s12_190{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="76" 
y="64" 
class="s1_190"
>with</text>

<text 
x="116" 
y="64" 
class="s2_190"
>open</text>

<text 
x="148" 
y="64" 
class="s3_190"
>(</text>

<text 
x="156" 
y="64" 
class="s4_190"
>"comma_delimited_stock_prices.csv"</text>

<text 
x="424" 
y="64" 
class="s3_190"
>,</text>

<text 
x="440" 
y="64" 
class="s4_190"
>"rb"</text>

<text 
x="472" 
y="64" 
class="s3_190"
>)</text>

<text 
x="487" 
y="64" 
class="s1_190"
>as</text>

<text 
x="511" 
y="64" 
class="s5_190"
>f</text>

<text 
x="519" 
y="64" 
class="s3_190"
>:</text>

<text 
x="108" 
y="80" 
class="s5_190"
>reader</text>

<text 
x="163" 
y="80" 
class="s3_190"
>=</text>

<text 
x="179" 
y="80" 
class="s5_190"
>csv</text>

<text 
x="203" 
y="80" 
class="s3_190"
>.</text>

<text 
x="211" 
y="80" 
class="s5_190"
>reader</text>

<text 
x="258" 
y="80" 
class="s3_190"
>(</text>

<text 
x="266" 
y="80" 
class="s5_190"
>f</text>

<text 
x="274" 
y="80" 
class="s3_190"
>)</text>

<text 
x="108" 
y="95" 
class="s1_190"
>for</text>

<text 
x="140" 
y="95" 
class="s5_190"
>line</text>

<text 
x="179" 
y="95" 
class="s6_190"
>in</text>

<text 
x="203" 
y="95" 
class="s5_190"
>parse_rows_with</text>

<text 
x="322" 
y="95" 
class="s3_190"
>(</text>

<text 
x="329" 
y="95" 
class="s5_190"
>reader</text>

<text 
x="377" 
y="95" 
dx="0,0,4.6" 
class="s3_190"
>, [</text>

<text 
x="401" 
y="95" 
class="s5_190"
>dateutil</text>

<text 
x="464" 
y="95" 
class="s3_190"
>.</text>

<text 
x="472" 
y="95" 
class="s5_190"
>parser</text>

<text 
x="519" 
y="95" 
class="s3_190"
>.</text>

<text 
x="527" 
y="95" 
class="s5_190"
>parse</text>

<text 
x="567" 
y="95" 
class="s3_190"
>,</text>

<text 
x="582" 
y="95" 
class="s2_190"
>None</text>

<text 
x="614" 
y="95" 
class="s3_190"
>,</text>

<text 
x="630" 
y="95" 
class="s2_190"
>float</text>

<text 
x="669" 
y="95" 
class="s3_190"
>]):</text>

<text 
x="140" 
y="111" 
class="s5_190"
>data</text>

<text 
x="171" 
y="111" 
class="s3_190"
>.</text>

<text 
x="179" 
y="111" 
class="s5_190"
>append</text>

<text 
x="227" 
y="111" 
class="s3_190"
>(</text>

<text 
x="235" 
y="111" 
class="s5_190"
>line</text>

<text 
x="266" 
y="111" 
class="s3_190"
>)</text>

<text 
x="55" 
y="163" 
class="s7_190"
>after which we just need to check for</text>

<text 
x="385" 
y="163" 
class="s8_190"
>None</text>

<text 
x="433" 
y="163" 
class="s7_190"
>rows:</text>

<text 
x="76" 
y="211" 
class="s1_190"
>for</text>

<text 
x="108" 
y="211" 
class="s5_190"
>row</text>

<text 
x="140" 
y="211" 
class="s6_190"
>in</text>

<text 
x="163" 
y="211" 
class="s5_190"
>data</text>

<text 
x="195" 
y="211" 
class="s3_190"
>:</text>

<text 
x="108" 
y="226" 
class="s1_190"
>if</text>

<text 
x="132" 
y="226" 
class="s2_190"
>any</text>

<text 
x="156" 
y="226" 
class="s3_190"
>(</text>

<text 
x="163" 
y="226" 
class="s5_190"
>x</text>

<text 
x="179" 
y="226" 
class="s6_190"
>is</text>

<text 
x="203" 
y="226" 
class="s2_190"
>None</text>

<text 
x="242" 
y="226" 
class="s1_190"
>for</text>

<text 
x="274" 
y="226" 
class="s5_190"
>x</text>

<text 
x="290" 
y="226" 
class="s6_190"
>in</text>

<text 
x="314" 
y="226" 
class="s5_190"
>row</text>

<text 
x="337" 
y="226" 
class="s3_190"
>):</text>

<text 
x="140" 
y="242" 
class="s1_190"
>print</text>

<text 
x="187" 
y="242" 
class="s5_190"
>row</text>

<text 
x="55" 
y="294" 
class="s7_190"
>and decide what we want to do about them. (Generally speaking, the three options are to</text>

<text 
x="55" 
y="322" 
class="s7_190"
>get rid of them, to go back to the source and try to fix the bad/missing data, or to do</text>

<text 
x="55" 
y="349" 
class="s7_190"
>nothing and cross our fingers.)</text>

<text 
x="55" 
y="388" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_190"
>We could create similar helpers for</text>

<text 
x="368" 
y="388" 
class="s8_190"
>csv.DictReader</text>

<text 
x="515" 
y="388" 
class="s7_190"
>. In that case, you’d probably want to</text>

<text 
x="55" 
y="418" 
class="s7_190"
>supply a</text>

<text 
x="134" 
y="418" 
class="s8_190"
>dict</text>

<text 
x="182" 
y="418" 
class="s7_190"
>of parsers by field name. For example:</text>

<text 
x="76" 
y="465" 
class="s1_190"
>def</text>

<text 
x="108" 
y="465" 
class="s9_190"
>try_parse_field</text>

<text 
x="227" 
y="465" 
class="s3_190"
>(</text>

<text 
x="235" 
y="465" 
class="s5_190"
>field_name</text>

<text 
x="314" 
y="465" 
class="s3_190"
>,</text>

<text 
x="329" 
y="465" 
class="s5_190"
>value</text>

<text 
x="369" 
y="465" 
class="s3_190"
>,</text>

<text 
x="385" 
y="465" 
class="s5_190"
>parser_dict</text>

<text 
x="472" 
y="465" 
class="s3_190"
>):</text>

<text 
x="108" 
y="480" 
dx="0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_190"
>"""try to parse value using the appropriate function from parser_dict"""</text>

<text 
x="108" 
y="496" 
class="s5_190"
>parser</text>

<text 
x="163" 
y="496" 
class="s3_190"
>=</text>

<text 
x="179" 
y="496" 
class="s5_190"
>parser_dict</text>

<text 
x="266" 
y="496" 
class="s3_190"
>.</text>

<text 
x="274" 
y="496" 
class="s5_190"
>get</text>

<text 
x="298" 
y="496" 
class="s3_190"
>(</text>

<text 
x="306" 
y="496" 
class="s5_190"
>field_name</text>

<text 
x="385" 
y="496" 
class="s3_190"
>)</text>

<text 
x="416" 
y="496" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0" 
class="s11_190"
># None if no such entry</text>

<text 
x="108" 
y="511" 
class="s1_190"
>if</text>

<text 
x="132" 
y="511" 
class="s5_190"
>parser</text>

<text 
x="187" 
y="511" 
dx="0,0,0,4.6,0,0" 
class="s6_190"
>is not</text>

<text 
x="242" 
y="511" 
class="s2_190"
>None</text>

<text 
x="274" 
y="511" 
class="s3_190"
>:</text>

<text 
x="140" 
y="527" 
class="s1_190"
>return</text>

<text 
x="195" 
y="527" 
class="s5_190"
>try_or_none</text>

<text 
x="282" 
y="527" 
class="s3_190"
>(</text>

<text 
x="290" 
y="527" 
class="s5_190"
>parser</text>

<text 
x="337" 
y="527" 
class="s3_190"
>)(</text>

<text 
x="353" 
y="527" 
class="s5_190"
>value</text>

<text 
x="393" 
y="527" 
class="s3_190"
>)</text>

<text 
x="108" 
y="542" 
class="s1_190"
>else</text>

<text 
x="140" 
y="542" 
class="s3_190"
>:</text>

<text 
x="140" 
y="557" 
class="s1_190"
>return</text>

<text 
x="195" 
y="557" 
class="s5_190"
>value</text>

<text 
x="76" 
y="588" 
class="s1_190"
>def</text>

<text 
x="108" 
y="588" 
class="s9_190"
>parse_dict</text>

<text 
x="187" 
y="588" 
class="s3_190"
>(</text>

<text 
x="195" 
y="588" 
class="s5_190"
>input_dict</text>

<text 
x="274" 
y="588" 
class="s3_190"
>,</text>

<text 
x="290" 
y="588" 
class="s5_190"
>parser_dict</text>

<text 
x="377" 
y="588" 
class="s3_190"
>):</text>

<text 
x="108" 
y="604" 
class="s1_190"
>return</text>

<text 
x="163" 
y="604" 
class="s3_190"
>{</text>

<text 
x="179" 
y="604" 
class="s5_190"
>field_name</text>

<text 
x="266" 
y="604" 
class="s3_190"
>:</text>

<text 
x="282" 
y="604" 
class="s5_190"
>try_parse_field</text>

<text 
x="401" 
y="604" 
class="s3_190"
>(</text>

<text 
x="408" 
y="604" 
class="s5_190"
>field_name</text>

<text 
x="487" 
y="604" 
class="s3_190"
>,</text>

<text 
x="503" 
y="604" 
class="s5_190"
>value</text>

<text 
x="543" 
y="604" 
class="s3_190"
>,</text>

<text 
x="559" 
y="604" 
class="s5_190"
>parser_dict</text>

<text 
x="646" 
y="604" 
class="s3_190"
>)</text>

<text 
x="179" 
y="619" 
class="s1_190"
>for</text>

<text 
x="211" 
y="619" 
class="s5_190"
>field_name</text>

<text 
x="290" 
y="619" 
class="s3_190"
>,</text>

<text 
x="306" 
y="619" 
class="s5_190"
>value</text>

<text 
x="353" 
y="619" 
class="s6_190"
>in</text>

<text 
x="377" 
y="619" 
class="s5_190"
>input_dict</text>

<text 
x="456" 
y="619" 
class="s3_190"
>.</text>

<text 
x="464" 
y="619" 
class="s5_190"
>iteritems</text>

<text 
x="535" 
y="619" 
dx="0,0,0,4.6" 
class="s3_190"
>() }</text>

<text 
x="55" 
y="672" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_190"
>A good next step is to check for outliers, using techniques from</text>

<text 
x="617" 
y="672" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,-2.2,0,0,0,0,0,0,0,0" 
class="s12_190"
>“Exploring Your Data”</text>

<text 
x="825" 
y="672" 
class="s7_190"
>or</text>

<text 
x="55" 
y="699" 
class="s7_190"
>by ad hoc investigating. For example, did you notice that one of the dates in the stocks file</text>

<text 
x="55" 
y="727" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_190"
>had the year 3014? That won’t (necessarily) give you an error, but it’s quite plainly wrong,</text>

<text 
x="55" 
y="754" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_190"
>and you’ll get screwy results if you don’t catch it. Real-world data sets have missing</text>

<text 
x="55" 
y="782" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s7_190"
>decimal points, extra zeroes, typographical errors, and countless other problems that it’s</text>

<text 
x="55" 
y="809" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_190"
>your job to catch. (Maybe it’s not officially your job, but who else is going to do it?)</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
