<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 294 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_294{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_294{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s3_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s4_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_294{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s7_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s8_294{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s9_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_294{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s11_294{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s12_294{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s13_294{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
class="s1_294"
>the partitioning:</text>

<text 
x="76" 
y="119" 
class="s2_294"
>def</text>

<text 
x="108" 
y="119" 
class="s3_294"
>partition_by</text>

<text 
x="203" 
y="119" 
class="s4_294"
>(</text>

<text 
x="211" 
y="119" 
class="s5_294"
>inputs</text>

<text 
x="258" 
y="119" 
class="s4_294"
>,</text>

<text 
x="274" 
y="119" 
class="s5_294"
>attribute</text>

<text 
x="345" 
y="119" 
class="s4_294"
>):</text>

<text 
x="108" 
y="135" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s6_294"
>"""each input is a pair (attribute_dict, label).</text>

<text 
x="108" 
y="150" 
dx="0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_294"
>returns a dict : attribute_value -&gt; inputs"""</text>

<text 
x="108" 
y="166" 
class="s5_294"
>groups</text>

<text 
x="163" 
y="166" 
class="s4_294"
>=</text>

<text 
x="179" 
y="166" 
class="s5_294"
>defaultdict</text>

<text 
x="266" 
y="166" 
class="s4_294"
>(</text>

<text 
x="274" 
y="166" 
class="s7_294"
>list</text>

<text 
x="306" 
y="166" 
class="s4_294"
>)</text>

<text 
x="108" 
y="181" 
class="s2_294"
>for</text>

<text 
x="140" 
y="181" 
class="s7_294"
>input</text>

<text 
x="187" 
y="181" 
class="s8_294"
>in</text>

<text 
x="211" 
y="181" 
class="s5_294"
>inputs</text>

<text 
x="258" 
y="181" 
class="s4_294"
>:</text>

<text 
x="140" 
y="196" 
class="s5_294"
>key</text>

<text 
x="171" 
y="196" 
class="s4_294"
>=</text>

<text 
x="187" 
y="196" 
class="s7_294"
>input</text>

<text 
x="227" 
y="196" 
class="s4_294"
>[</text>

<text 
x="235" 
y="196" 
class="s9_294"
>0</text>

<text 
x="242" 
y="196" 
class="s4_294"
>][</text>

<text 
x="258" 
y="196" 
class="s5_294"
>attribute</text>

<text 
x="329" 
y="196" 
class="s4_294"
>]</text>

<text 
x="361" 
y="196" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s10_294"
># get the value of the specified attribute</text>

<text 
x="140" 
y="212" 
class="s5_294"
>groups</text>

<text 
x="187" 
y="212" 
class="s4_294"
>[</text>

<text 
x="195" 
y="212" 
class="s5_294"
>key</text>

<text 
x="219" 
y="212" 
class="s4_294"
>].</text>

<text 
x="235" 
y="212" 
class="s5_294"
>append</text>

<text 
x="282" 
y="212" 
class="s4_294"
>(</text>

<text 
x="290" 
y="212" 
class="s7_294"
>input</text>

<text 
x="329" 
y="212" 
class="s4_294"
>)</text>

<text 
x="361" 
y="212" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s10_294"
># then add this input to the correct list</text>

<text 
x="108" 
y="227" 
class="s2_294"
>return</text>

<text 
x="163" 
y="227" 
class="s5_294"
>groups</text>

<text 
x="55" 
y="280" 
class="s1_294"
>and one that uses it to compute entropy:</text>

<text 
x="76" 
y="325" 
class="s2_294"
>def</text>

<text 
x="108" 
y="325" 
class="s3_294"
>partition_entropy_by</text>

<text 
x="266" 
y="325" 
class="s4_294"
>(</text>

<text 
x="274" 
y="325" 
class="s5_294"
>inputs</text>

<text 
x="322" 
y="325" 
class="s4_294"
>,</text>

<text 
x="337" 
y="325" 
class="s5_294"
>attribute</text>

<text 
x="408" 
y="325" 
class="s4_294"
>):</text>

<text 
x="108" 
y="341" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s6_294"
>"""computes the entropy corresponding to the given partition"""</text>

<text 
x="108" 
y="356" 
class="s5_294"
>partitions</text>

<text 
x="195" 
y="356" 
class="s4_294"
>=</text>

<text 
x="211" 
y="356" 
class="s5_294"
>partition_by</text>

<text 
x="306" 
y="356" 
class="s4_294"
>(</text>

<text 
x="314" 
y="356" 
class="s5_294"
>inputs</text>

<text 
x="361" 
y="356" 
class="s4_294"
>,</text>

<text 
x="377" 
y="356" 
class="s5_294"
>attribute</text>

<text 
x="448" 
y="356" 
class="s4_294"
>)</text>

<text 
x="108" 
y="371" 
class="s2_294"
>return</text>

<text 
x="163" 
y="371" 
class="s5_294"
>partition_entropy</text>

<text 
x="298" 
y="371" 
class="s4_294"
>(</text>

<text 
x="306" 
y="371" 
class="s5_294"
>partitions</text>

<text 
x="385" 
y="371" 
class="s4_294"
>.</text>

<text 
x="393" 
y="371" 
class="s5_294"
>values</text>

<text 
x="440" 
y="371" 
class="s4_294"
>())</text>

<text 
x="55" 
y="424" 
class="s1_294"
>Then we just need to find the minimum-entropy partition for the whole data set:</text>

<text 
x="76" 
y="469" 
class="s2_294"
>for</text>

<text 
x="108" 
y="469" 
class="s5_294"
>key</text>

<text 
x="140" 
y="469" 
class="s8_294"
>in</text>

<text 
x="163" 
y="469" 
class="s4_294"
>[</text>

<text 
x="171" 
y="469" 
class="s11_294"
>'level'</text>

<text 
x="227" 
y="469" 
class="s4_294"
>,</text>

<text 
x="235" 
y="469" 
class="s11_294"
>'lang'</text>

<text 
x="282" 
y="469" 
class="s4_294"
>,</text>

<text 
x="290" 
y="469" 
class="s11_294"
>'tweets'</text>

<text 
x="353" 
y="469" 
class="s4_294"
>,</text>

<text 
x="361" 
y="469" 
class="s11_294"
>'phd'</text>

<text 
x="401" 
y="469" 
class="s4_294"
>]:</text>

<text 
x="108" 
y="485" 
class="s2_294"
>print</text>

<text 
x="156" 
y="485" 
class="s5_294"
>key</text>

<text 
x="179" 
y="485" 
class="s4_294"
>,</text>

<text 
x="195" 
y="485" 
class="s5_294"
>partition_entropy_by</text>

<text 
x="353" 
y="485" 
class="s4_294"
>(</text>

<text 
x="361" 
y="485" 
class="s5_294"
>inputs</text>

<text 
x="408" 
y="485" 
class="s4_294"
>,</text>

<text 
x="424" 
y="485" 
class="s5_294"
>key</text>

<text 
x="448" 
y="485" 
class="s4_294"
>)</text>

<text 
x="76" 
y="516" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_294"
># level 0.693536138896</text>

<text 
x="76" 
y="531" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_294"
># lang 0.860131712855</text>

<text 
x="76" 
y="546" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_294"
># tweets 0.788450457308</text>

<text 
x="76" 
y="562" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_294"
># phd 0.892158928262</text>

<text 
x="55" 
y="615" 
class="s1_294"
>The lowest entropy comes from splitting on</text>

<text 
x="445" 
y="615" 
class="s12_294"
>level</text>

<text 
x="497" 
y="615" 
class="s1_294"
>, so we’ll need to make a subtree for</text>

<text 
x="55" 
y="644" 
class="s1_294"
>each possible</text>

<text 
x="178" 
y="644" 
class="s12_294"
>level</text>

<text 
x="236" 
y="644" 
class="s1_294"
>value. Every</text>

<text 
x="353" 
y="644" 
class="s12_294"
>Mid</text>

<text 
x="390" 
y="644" 
class="s1_294"
>candidate is labeled</text>

<text 
x="569" 
y="644" 
class="s12_294"
>True</text>

<text 
x="611" 
y="644" 
class="s1_294"
>, which means that the</text>

<text 
x="814" 
y="644" 
class="s12_294"
>Mid</text>

<text 
x="55" 
y="674" 
class="s1_294"
>subtree is simply a leaf node predicting</text>

<text 
x="406" 
y="674" 
class="s12_294"
>True</text>

<text 
x="448" 
y="674" 
class="s1_294"
>. For</text>

<text 
x="495" 
y="674" 
class="s12_294"
>Senior</text>

<text 
x="564" 
y="674" 
class="s1_294"
>candidates, we have a mix of</text>

<text 
x="55" 
y="704" 
class="s12_294"
>True</text>

<text 
x="97" 
y="704" 
class="s1_294"
>s and</text>

<text 
x="148" 
y="704" 
class="s12_294"
>False</text>

<text 
x="201" 
y="704" 
class="s1_294"
>s, so we need to split again:</text>

<text 
x="76" 
y="751" 
class="s5_294"
>senior_inputs</text>

<text 
x="187" 
y="751" 
dx="0,0,4.6,0" 
class="s4_294"
>= [(</text>

<text 
x="219" 
y="751" 
class="s7_294"
>input</text>

<text 
x="258" 
y="751" 
class="s4_294"
>,</text>

<text 
x="274" 
y="751" 
class="s5_294"
>label</text>

<text 
x="314" 
y="751" 
class="s4_294"
>)</text>

<text 
x="211" 
y="766" 
class="s2_294"
>for</text>

<text 
x="242" 
y="766" 
class="s7_294"
>input</text>

<text 
x="282" 
y="766" 
class="s4_294"
>,</text>

<text 
x="298" 
y="766" 
class="s5_294"
>label</text>

<text 
x="345" 
y="766" 
class="s8_294"
>in</text>

<text 
x="369" 
y="766" 
class="s5_294"
>inputs</text>

<text 
x="424" 
y="766" 
class="s2_294"
>if</text>

<text 
x="448" 
y="766" 
class="s7_294"
>input</text>

<text 
x="487" 
y="766" 
class="s4_294"
>[</text>

<text 
x="495" 
y="766" 
class="s11_294"
>"level"</text>

<text 
x="551" 
y="766" 
dx="0,0,4.6,0" 
class="s4_294"
>] ==</text>

<text 
x="590" 
y="766" 
class="s11_294"
>"Senior"</text>

<text 
x="653" 
y="766" 
class="s4_294"
>]</text>

<text 
x="76" 
y="797" 
class="s2_294"
>for</text>

<text 
x="108" 
y="797" 
class="s5_294"
>key</text>

<text 
x="140" 
y="797" 
class="s8_294"
>in</text>

<text 
x="163" 
y="797" 
class="s4_294"
>[</text>

<text 
x="171" 
y="797" 
class="s11_294"
>'lang'</text>

<text 
x="219" 
y="797" 
class="s4_294"
>,</text>

<text 
x="235" 
y="797" 
class="s11_294"
>'tweets'</text>

<text 
x="298" 
y="797" 
class="s4_294"
>,</text>

<text 
x="314" 
y="797" 
class="s11_294"
>'phd'</text>

<text 
x="353" 
y="797" 
class="s4_294"
>]:</text>

<text 
x="108" 
y="813" 
class="s2_294"
>print</text>

<text 
x="156" 
y="813" 
class="s5_294"
>key</text>

<text 
x="179" 
y="813" 
class="s4_294"
>,</text>

<text 
x="195" 
y="813" 
class="s5_294"
>partition_entropy_by</text>

<text 
x="353" 
y="813" 
class="s4_294"
>(</text>

<text 
x="361" 
y="813" 
class="s5_294"
>senior_inputs</text>

<text 
x="464" 
y="813" 
class="s4_294"
>,</text>

<text 
x="480" 
y="813" 
class="s5_294"
>key</text>

<text 
x="503" 
y="813" 
class="s4_294"
>)</text>

<text 
x="76" 
y="843" 
dx="0,0,4.6,0,0,0,0,4.6,0,0" 
class="s10_294"
># lang 0.4</text>

<text 
x="76" 
y="859" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0" 
class="s10_294"
># tweets 0.0</text>

<text 
x="76" 
y="874" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_294"
># phd 0.950977500433</text>

<text 
x="55" 
y="927" 
class="s1_294"
>This shows us that our next split should be on</text>

<text 
x="462" 
y="927" 
class="s12_294"
>tweets</text>

<text 
x="526" 
y="927" 
class="s1_294"
>, which results in a zero-entropy</text>

<text 
x="55" 
y="957" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_294"
>partition. For these Senior-level candidates, “yes” tweets always result in</text>

<text 
x="702" 
y="957" 
class="s12_294"
>True</text>

<text 
x="750" 
y="957" 
class="s1_294"
>while “no”</text>

<text 
x="55" 
y="986" 
class="s1_294"
>tweets always result in</text>

<text 
x="260" 
y="986" 
class="s12_294"
>False</text>

<text 
x="312" 
y="986" 
class="s1_294"
>.</text>

<text 
x="55" 
y="1027" 
dx="0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_294"
>Finally, if we do the same thing for the</text>

<text 
x="401" 
y="1027" 
class="s12_294"
>Junior</text>

<text 
x="470" 
y="1027" 
class="s1_294"
>candidates, we end up splitting on</text>

<text 
x="775" 
y="1027" 
class="s12_294"
>phd</text>

<text 
x="806" 
y="1027" 
class="s1_294"
>,</text>

<text 
x="55" 
y="1057" 
class="s1_294"
>after which we find that no PhD always results in</text>

<text 
x="494" 
y="1057" 
class="s12_294"
>True</text>

<text 
x="542" 
y="1057" 
class="s1_294"
>and PhD always results in</text>

<text 
x="776" 
y="1057" 
class="s12_294"
>False</text>

<text 
x="828" 
y="1057" 
class="s1_294"
>.</text>

<text 
x="55" 
y="1098" 
class="s13_294"
>Figure 17-3</text>

<text 
x="163" 
y="1098" 
class="s1_294"
>shows the complete decision tree.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
