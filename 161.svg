<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 161 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_161{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_161{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_161{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_161{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_161{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s6_161{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_161{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s8_161{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s9_161{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s10_161{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_161{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s12_161{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #CC3300;
}
.s13_161{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s14_161{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_161"
>Delimited Files</text>

<text 
x="55" 
y="115" 
class="s2_161"
>The hypothetical email addresses file we just processed had one address per line. More</text>

<text 
x="55" 
y="143" 
class="s2_161"
>frequently you’ll work with files with lots of data on each line. These files are very often</text>

<text 
x="55" 
y="170" 
class="s2_161"
>either</text>

<text 
x="110" 
y="170" 
class="s3_161"
>comma-separated</text>

<text 
x="273" 
y="170" 
class="s2_161"
>or</text>

<text 
x="297" 
y="170" 
class="s3_161"
>tab-separated</text>

<text 
x="419" 
y="170" 
class="s2_161"
>. Each line has several fields, with a comma (or a</text>

<text 
x="55" 
y="198" 
class="s2_161"
>tab) indicating where one field ends and the next field starts.</text>

<text 
x="55" 
y="236" 
class="s2_161"
>This starts to get complicated when you have fields with commas and tabs and newlines in</text>

<text 
x="55" 
y="264" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_161"
>them (which you inevitably do). For this reason, it’s pretty much always a mistake to try to</text>

<text 
x="55" 
y="291" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_161"
>parse them yourself. Instead, you should use Python’s</text>

<text 
x="533" 
y="291" 
class="s4_161"
>csv</text>

<text 
x="570" 
y="291" 
class="s2_161"
>module (or the</text>

<text 
x="705" 
y="291" 
class="s4_161"
>pandas</text>

<text 
x="774" 
y="291" 
class="s2_161"
>library).</text>

<text 
x="55" 
y="321" 
class="s2_161"
>For technical reasons that you should feel free to blame on Microsoft, you should always</text>

<text 
x="55" 
y="348" 
class="s2_161"
>work with</text>

<text 
x="150" 
y="348" 
class="s4_161"
>csv</text>

<text 
x="187" 
y="348" 
class="s2_161"
>files in</text>

<text 
x="253" 
y="348" 
class="s3_161"
>binary</text>

<text 
x="316" 
y="348" 
class="s2_161"
>mode by including a</text>

<text 
x="501" 
y="348" 
class="s3_161"
>b</text>

<text 
x="518" 
y="348" 
class="s2_161"
>after the</text>

<text 
x="596" 
y="348" 
class="s3_161"
>r</text>

<text 
x="610" 
y="348" 
class="s2_161"
>or</text>

<text 
x="634" 
y="348" 
class="s3_161"
>w</text>

<text 
x="654" 
y="348" 
class="s2_161"
>(see</text>

<text 
x="695" 
y="348" 
class="s5_161"
>Stack Overflow</text>

<text 
x="833" 
y="348" 
class="s2_161"
>).</text>

<text 
x="55" 
y="389" 
class="s2_161"
>If your file has no headers (which means you probably want each row as a</text>

<text 
x="713" 
y="389" 
class="s4_161"
>list</text>

<text 
x="755" 
y="389" 
class="s2_161"
>, and</text>

<text 
x="55" 
y="419" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_161"
>which places the burden on you to know what’s in each column), you can use</text>

<text 
x="741" 
y="419" 
class="s4_161"
>csv.reader</text>

<text 
x="55" 
y="448" 
class="s2_161"
>to iterate over the rows, each of which will be an appropriately split list.</text>

<text 
x="55" 
y="487" 
class="s2_161"
>For example, if we had a tab-delimited file of stock prices:</text>

<text 
x="76" 
y="532" 
class="s6_161"
>6/20/2014</text>

<text 
x="171" 
y="532" 
class="s6_161"
>AAPL</text>

<text 
x="235" 
y="532" 
class="s6_161"
>90.91</text>

<text 
x="76" 
y="547" 
class="s6_161"
>6/20/2014</text>

<text 
x="171" 
y="547" 
class="s6_161"
>MSFT</text>

<text 
x="235" 
y="547" 
class="s6_161"
>41.68</text>

<text 
x="76" 
y="563" 
class="s6_161"
>6/20/2014</text>

<text 
x="171" 
y="563" 
class="s6_161"
>FB</text>

<text 
x="203" 
y="563" 
class="s6_161"
>64.5</text>

<text 
x="76" 
y="578" 
class="s6_161"
>6/19/2014</text>

<text 
x="171" 
y="578" 
class="s6_161"
>AAPL</text>

<text 
x="235" 
y="578" 
class="s6_161"
>91.86</text>

<text 
x="76" 
y="594" 
class="s6_161"
>6/19/2014</text>

<text 
x="171" 
y="594" 
class="s6_161"
>MSFT</text>

<text 
x="235" 
y="594" 
class="s6_161"
>41.51</text>

<text 
x="76" 
y="609" 
class="s6_161"
>6/19/2014</text>

<text 
x="171" 
y="609" 
class="s6_161"
>FB</text>

<text 
x="203" 
y="609" 
class="s6_161"
>64.34</text>

<text 
x="55" 
y="662" 
class="s2_161"
>we could process them with:</text>

<text 
x="76" 
y="707" 
class="s7_161"
>import</text>

<text 
x="132" 
y="707" 
class="s8_161"
>csv</text>

<text 
x="76" 
y="738" 
class="s7_161"
>with</text>

<text 
x="116" 
y="738" 
class="s9_161"
>open</text>

<text 
x="148" 
y="738" 
class="s6_161"
>(</text>

<text 
x="156" 
y="738" 
class="s10_161"
>'tab_delimited_stock_prices.txt'</text>

<text 
x="408" 
y="738" 
class="s6_161"
>,</text>

<text 
x="424" 
y="738" 
class="s10_161"
>'rb'</text>

<text 
x="456" 
y="738" 
class="s6_161"
>)</text>

<text 
x="472" 
y="738" 
class="s7_161"
>as</text>

<text 
x="495" 
y="738" 
class="s11_161"
>f</text>

<text 
x="503" 
y="738" 
class="s6_161"
>:</text>

<text 
x="108" 
y="753" 
class="s11_161"
>reader</text>

<text 
x="163" 
y="753" 
class="s6_161"
>=</text>

<text 
x="179" 
y="753" 
class="s11_161"
>csv</text>

<text 
x="203" 
y="753" 
class="s6_161"
>.</text>

<text 
x="211" 
y="753" 
class="s11_161"
>reader</text>

<text 
x="258" 
y="753" 
class="s6_161"
>(</text>

<text 
x="266" 
y="753" 
class="s11_161"
>f</text>

<text 
x="274" 
y="753" 
class="s6_161"
>,</text>

<text 
x="290" 
y="753" 
class="s11_161"
>delimiter</text>

<text 
x="361" 
y="753" 
class="s6_161"
>=</text>

<text 
x="369" 
y="753" 
class="s10_161"
>'</text>

<text 
x="377" 
y="753" 
class="s12_161"
>\t</text>

<text 
x="393" 
y="753" 
class="s10_161"
>'</text>

<text 
x="401" 
y="753" 
class="s6_161"
>)</text>

<text 
x="108" 
y="769" 
class="s7_161"
>for</text>

<text 
x="140" 
y="769" 
class="s11_161"
>row</text>

<text 
x="171" 
y="769" 
class="s13_161"
>in</text>

<text 
x="195" 
y="769" 
class="s11_161"
>reader</text>

<text 
x="242" 
y="769" 
class="s6_161"
>:</text>

<text 
x="140" 
y="784" 
class="s11_161"
>date</text>

<text 
x="179" 
y="784" 
class="s6_161"
>=</text>

<text 
x="195" 
y="784" 
class="s11_161"
>row</text>

<text 
x="219" 
y="784" 
class="s6_161"
>[</text>

<text 
x="227" 
y="784" 
class="s14_161"
>0</text>

<text 
x="235" 
y="784" 
class="s6_161"
>]</text>

<text 
x="140" 
y="799" 
class="s11_161"
>symbol</text>

<text 
x="195" 
y="799" 
class="s6_161"
>=</text>

<text 
x="211" 
y="799" 
class="s11_161"
>row</text>

<text 
x="235" 
y="799" 
class="s6_161"
>[</text>

<text 
x="242" 
y="799" 
class="s14_161"
>1</text>

<text 
x="250" 
y="799" 
class="s6_161"
>]</text>

<text 
x="140" 
y="815" 
class="s11_161"
>closing_price</text>

<text 
x="250" 
y="815" 
class="s6_161"
>=</text>

<text 
x="266" 
y="815" 
class="s9_161"
>float</text>

<text 
x="306" 
y="815" 
class="s6_161"
>(</text>

<text 
x="314" 
y="815" 
class="s11_161"
>row</text>

<text 
x="337" 
y="815" 
class="s6_161"
>[</text>

<text 
x="345" 
y="815" 
class="s14_161"
>2</text>

<text 
x="353" 
y="815" 
class="s6_161"
>])</text>

<text 
x="140" 
y="830" 
class="s11_161"
>process</text>

<text 
x="195" 
y="830" 
class="s6_161"
>(</text>

<text 
x="203" 
y="830" 
class="s11_161"
>date</text>

<text 
x="235" 
y="830" 
class="s6_161"
>,</text>

<text 
x="250" 
y="830" 
class="s11_161"
>symbol</text>

<text 
x="298" 
y="830" 
class="s6_161"
>,</text>

<text 
x="314" 
y="830" 
class="s11_161"
>closing_price</text>

<text 
x="416" 
y="830" 
class="s6_161"
>)</text>

<text 
x="55" 
y="883" 
class="s2_161"
>If your file has headers:</text>

<text 
x="76" 
y="928" 
class="s6_161"
>date:symbol:closing_price</text>

<text 
x="76" 
y="944" 
class="s6_161"
>6/20/2014:AAPL:90.91</text>

<text 
x="76" 
y="959" 
class="s6_161"
>6/20/2014:MSFT:41.68</text>

<text 
x="76" 
y="974" 
class="s6_161"
>6/20/2014:FB:64.5</text>

<text 
x="55" 
y="1027" 
class="s2_161"
>you can either skip the header row (with an initial call to</text>

<text 
x="558" 
y="1027" 
class="s4_161"
>reader.next()</text>

<text 
x="695" 
y="1027" 
class="s2_161"
>) or get each row</text>

<text 
x="55" 
y="1057" 
class="s2_161"
>as a</text>

<text 
x="94" 
y="1057" 
class="s4_161"
>dict</text>

<text 
x="141" 
y="1057" 
class="s2_161"
>(with the headers as keys) by using</text>

<text 
x="456" 
y="1057" 
class="s4_161"
>csv.DictReader</text>

<text 
x="603" 
y="1057" 
class="s2_161"
>:</text>

<text 
x="76" 
y="1104" 
class="s7_161"
>with</text>

<text 
x="116" 
y="1104" 
class="s9_161"
>open</text>

<text 
x="148" 
y="1104" 
class="s6_161"
>(</text>

<text 
x="156" 
y="1104" 
class="s10_161"
>'colon_delimited_stock_prices.txt'</text>

<text 
x="424" 
y="1104" 
class="s6_161"
>,</text>

<text 
x="440" 
y="1104" 
class="s10_161"
>'rb'</text>

<text 
x="472" 
y="1104" 
class="s6_161"
>)</text>

<text 
x="487" 
y="1104" 
class="s7_161"
>as</text>

<text 
x="511" 
y="1104" 
class="s11_161"
>f</text>

<text 
x="519" 
y="1104" 
class="s6_161"
>:</text>

<text 
x="108" 
y="1120" 
class="s11_161"
>reader</text>

<text 
x="163" 
y="1120" 
class="s6_161"
>=</text>

<text 
x="179" 
y="1120" 
class="s11_161"
>csv</text>

<text 
x="203" 
y="1120" 
class="s6_161"
>.</text>

<text 
x="211" 
y="1120" 
class="s11_161"
>DictReader</text>

<text 
x="290" 
y="1120" 
class="s6_161"
>(</text>

<text 
x="298" 
y="1120" 
class="s11_161"
>f</text>

<text 
x="306" 
y="1120" 
class="s6_161"
>,</text>

<text 
x="322" 
y="1120" 
class="s11_161"
>delimiter</text>

<text 
x="393" 
y="1120" 
class="s6_161"
>=</text>

<text 
x="401" 
y="1120" 
class="s10_161"
>':'</text>

<text 
x="424" 
y="1120" 
class="s6_161"
>)</text>

<text 
x="108" 
y="1135" 
class="s7_161"
>for</text>

<text 
x="140" 
y="1135" 
class="s11_161"
>row</text>

<text 
x="171" 
y="1135" 
class="s13_161"
>in</text>

<text 
x="195" 
y="1135" 
class="s11_161"
>reader</text>

<text 
x="242" 
y="1135" 
class="s6_161"
>:</text>

<text 
x="140" 
y="1150" 
class="s11_161"
>date</text>

<text 
x="179" 
y="1150" 
class="s6_161"
>=</text>

<text 
x="195" 
y="1150" 
class="s11_161"
>row</text>

<text 
x="219" 
y="1150" 
class="s6_161"
>[</text>

<text 
x="227" 
y="1150" 
class="s10_161"
>"date"</text>

<text 
x="274" 
y="1150" 
class="s6_161"
>]</text>

<text 
x="140" 
y="1166" 
class="s11_161"
>symbol</text>

<text 
x="195" 
y="1166" 
class="s6_161"
>=</text>

<text 
x="211" 
y="1166" 
class="s11_161"
>row</text>

<text 
x="235" 
y="1166" 
class="s6_161"
>[</text>

<text 
x="242" 
y="1166" 
class="s10_161"
>"symbol"</text>

<text 
x="306" 
y="1166" 
class="s6_161"
>]</text>

<text 
x="140" 
y="1181" 
class="s11_161"
>closing_price</text>

<text 
x="250" 
y="1181" 
class="s6_161"
>=</text>

<text 
x="266" 
y="1181" 
class="s9_161"
>float</text>

<text 
x="306" 
y="1181" 
class="s6_161"
>(</text>

<text 
x="314" 
y="1181" 
class="s11_161"
>row</text>

<text 
x="337" 
y="1181" 
class="s6_161"
>[</text>

<text 
x="345" 
y="1181" 
class="s10_161"
>"closing_price"</text>

<text 
x="464" 
y="1181" 
class="s6_161"
>])</text>

<text 
x="140" 
y="1197" 
class="s11_161"
>process</text>

<text 
x="195" 
y="1197" 
class="s6_161"
>(</text>

<text 
x="203" 
y="1197" 
class="s11_161"
>date</text>

<text 
x="235" 
y="1197" 
class="s6_161"
>,</text>

<text 
x="250" 
y="1197" 
class="s11_161"
>symbol</text>

<text 
x="298" 
y="1197" 
class="s6_161"
>,</text>

<text 
x="314" 
y="1197" 
class="s11_161"
>closing_price</text>

<text 
x="416" 
y="1197" 
class="s6_161"
>)</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
