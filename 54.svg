<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 54 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_54{
stroke: #000000;
stroke-width: 1.0996486;
stroke-linecap: square;
stroke-linejoin: miter;
}

.s1_54{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_54{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_54{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s4_54{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_54{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s6_54{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s7_54{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s8_54{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_54{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s10_54{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s11_54{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
dx="0,-1.9,0,0,0,0,0,0,0,0" 
class="s1_54"
>Truthiness</text>

<text 
x="55" 
y="115" 
class="s2_54"
>Booleans in Python work as in most other languages, except that they’re capitalized:</text>

<text 
x="76" 
y="160" 
class="s3_54"
>one_is_less_than_two</text>

<text 
x="242" 
y="160" 
class="s4_54"
>=</text>

<text 
x="258" 
y="160" 
class="s5_54"
>1</text>

<text 
x="274" 
y="160" 
class="s4_54"
>&lt;</text>

<text 
x="290" 
y="160" 
class="s5_54"
>2</text>

<text 
x="377" 
y="160" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0" 
class="s6_54"
># equals True</text>

<text 
x="76" 
y="176" 
class="s3_54"
>true_equals_false</text>

<text 
x="219" 
y="176" 
class="s4_54"
>=</text>

<text 
x="235" 
y="176" 
class="s7_54"
>True</text>

<text 
x="274" 
y="176" 
class="s4_54"
>==</text>

<text 
x="298" 
y="176" 
class="s7_54"
>False</text>

<text 
x="377" 
y="176" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s6_54"
># equals False</text>

<text 
x="55" 
y="228" 
class="s2_54"
>Python uses the value</text>

<text 
x="251" 
y="228" 
class="s8_54"
>None</text>

<text 
x="299" 
y="228" 
class="s2_54"
>to indicate a nonexistent value. It is similar to other languages’</text>

<text 
x="55" 
y="258" 
class="s8_54"
>null</text>

<text 
x="97" 
y="258" 
class="s2_54"
>:</text>

<text 
x="76" 
y="305" 
class="s3_54"
>x</text>

<text 
x="92" 
y="305" 
class="s4_54"
>=</text>

<text 
x="108" 
y="305" 
class="s7_54"
>None</text>

<text 
x="76" 
y="321" 
class="s9_54"
>print</text>

<text 
x="124" 
y="321" 
class="s3_54"
>x</text>

<text 
x="140" 
y="321" 
class="s4_54"
>==</text>

<text 
x="163" 
y="321" 
class="s7_54"
>None</text>

<text 
x="227" 
y="321" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s6_54"
># prints True, but is not Pythonic</text>

<text 
x="76" 
y="336" 
class="s9_54"
>print</text>

<text 
x="124" 
y="336" 
class="s3_54"
>x</text>

<text 
x="140" 
y="336" 
class="s10_54"
>is</text>

<text 
x="163" 
y="336" 
class="s7_54"
>None</text>

<text 
x="227" 
y="336" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s6_54"
># prints True, and is Pythonic</text>

<text 
x="55" 
y="389" 
class="s2_54"
>Python lets you use any value where it expects a Boolean. The following are all “Falsy”:</text>

<path d="M61.6,417l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="426" 
class="s8_54"
>False</text>

<path d="M61.6,464.3l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="474" 
class="s8_54"
>None</text>

<path d="M61.6,511.6l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="521" 
class="s8_54"
>[]</text>

<text 
x="109" 
y="521" 
class="s2_54"
>(an empty</text>

<text 
x="203" 
y="521" 
class="s8_54"
>list</text>

<text 
x="245" 
y="521" 
class="s2_54"
>)</text>

<path d="M61.6,558.9l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="568" 
class="s8_54"
>{}</text>

<text 
x="109" 
y="568" 
class="s2_54"
>(an empty</text>

<text 
x="203" 
y="568" 
class="s8_54"
>dict</text>

<text 
x="245" 
y="568" 
class="s2_54"
>)</text>

<path d="M61.6,606.2l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="616" 
class="s8_54"
>""</text>

<path d="M61.6,653.6l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="663" 
class="s8_54"
>set()</text>

<path d="M61.6,700.9l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="710" 
class="s8_54"
>0</text>

<path d="M61.6,748.2l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_54" />
<text 
x="82" 
y="758" 
class="s8_54"
>0.0</text>

<text 
x="55" 
y="806" 
class="s2_54"
>Pretty much anything else gets treated as</text>

<text 
x="419" 
y="806" 
class="s8_54"
>True</text>

<text 
x="461" 
y="806" 
class="s2_54"
>. This allows you to easily use</text>

<text 
x="732" 
y="806" 
class="s8_54"
>if</text>

<text 
x="759" 
y="806" 
class="s2_54"
>statements</text>

<text 
x="55" 
y="836" 
class="s2_54"
>to test for empty lists or empty strings or empty dictionaries or so on. It also sometimes</text>

<text 
x="55" 
y="863" 
class="s2_54"
>causes tricky bugs if you’re not expecting this behavior:</text>

<text 
x="76" 
y="908" 
class="s3_54"
>s</text>

<text 
x="92" 
y="908" 
class="s4_54"
>=</text>

<text 
x="108" 
y="908" 
class="s3_54"
>some_function_that_returns_a_string</text>

<text 
x="385" 
y="908" 
class="s4_54"
>()</text>

<text 
x="76" 
y="924" 
class="s9_54"
>if</text>

<text 
x="100" 
y="924" 
class="s3_54"
>s</text>

<text 
x="108" 
y="924" 
class="s4_54"
>:</text>

<text 
x="108" 
y="939" 
class="s3_54"
>first_char</text>

<text 
x="195" 
y="939" 
class="s4_54"
>=</text>

<text 
x="211" 
y="939" 
class="s3_54"
>s</text>

<text 
x="219" 
y="939" 
class="s4_54"
>[</text>

<text 
x="227" 
y="939" 
class="s5_54"
>0</text>

<text 
x="235" 
y="939" 
class="s4_54"
>]</text>

<text 
x="76" 
y="955" 
class="s9_54"
>else</text>

<text 
x="108" 
y="955" 
class="s4_54"
>:</text>

<text 
x="108" 
y="970" 
class="s3_54"
>first_char</text>

<text 
x="195" 
y="970" 
class="s4_54"
>=</text>

<text 
x="211" 
y="970" 
class="s11_54"
>""</text>

<text 
x="55" 
y="1023" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_54"
>A simpler way of doing the same is:</text>

<text 
x="76" 
y="1068" 
class="s3_54"
>first_char</text>

<text 
x="163" 
y="1068" 
class="s4_54"
>=</text>

<text 
x="179" 
y="1068" 
class="s3_54"
>s</text>

<text 
x="195" 
y="1068" 
class="s10_54"
>and</text>

<text 
x="227" 
y="1068" 
class="s3_54"
>s</text>

<text 
x="235" 
y="1068" 
class="s4_54"
>[</text>

<text 
x="242" 
y="1068" 
class="s5_54"
>0</text>

<text 
x="250" 
y="1068" 
class="s4_54"
>]</text>

<text 
x="55" 
y="1121" 
class="s2_54"
>since</text>

<text 
x="105" 
y="1121" 
class="s8_54"
>and</text>

<text 
x="142" 
y="1121" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0" 
class="s2_54"
>returns its second value when the first is “truthy,” the first value when it’s not.</text>

<text 
x="55" 
y="1150" 
dx="0,0,0,0,0,0,0,0,0,-1.4,0,0,0" 
class="s2_54"
>Similarly, if</text>

<text 
x="165" 
y="1150" 
class="s8_54"
>x</text>

<text 
x="181" 
y="1150" 
class="s2_54"
>is either a number or possibly</text>

<text 
x="447" 
y="1150" 
class="s8_54"
>None</text>

<text 
x="489" 
y="1150" 
class="s2_54"
>:</text>

<text 
x="76" 
y="1198" 
class="s3_54"
>safe_x</text>

<text 
x="132" 
y="1198" 
class="s4_54"
>=</text>

<text 
x="148" 
y="1198" 
class="s3_54"
>x</text>

<text 
x="163" 
y="1198" 
class="s10_54"
>or</text>

<text 
x="187" 
y="1198" 
class="s5_54"
>0</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
