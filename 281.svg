<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 281 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_281{
font-size: 16.50px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s2_281{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_281{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_281{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s5_281{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<image preserveAspectRatio="none" x="81" y="54" width="747" height="586" xlink:href="281/img/1.png" />
<text 
x="329" 
y="666" 
dx="0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,-0.3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_281"
>Figure 16-6. A separating hyperplane</text>

<text 
x="55" 
y="708" 
dx="0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_281"
>It’s clear that there’s no hyperplane that separates the positive examples from the negative</text>

<text 
x="55" 
y="736" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_281"
>ones. However, look at what happens when we map this data set to two dimensions by</text>

<text 
x="55" 
y="763" 
class="s2_281"
>sending the point</text>

<text 
x="211" 
y="763" 
class="s3_281"
>x</text>

<text 
x="227" 
y="763" 
class="s2_281"
>to</text>

<text 
x="250" 
y="763" 
dx="0,0,0,0,6.1,0,0,0,0" 
class="s3_281"
>(x, x**2)</text>

<text 
x="345" 
y="763" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_281"
>. Suddenly it’s possible to find a hyperplane that splits the</text>

<text 
x="55" 
y="793" 
class="s2_281"
>data (</text>

<text 
x="104" 
y="793" 
class="s4_281"
>Figure 16-8</text>

<text 
x="207" 
y="793" 
class="s2_281"
>).</text>

<text 
x="55" 
y="831" 
class="s2_281"
>This is usually called the</text>

<text 
x="279" 
y="831" 
class="s5_281"
>kernel trick</text>

<text 
x="385" 
y="831" 
class="s2_281"
>because rather than actually mapping the points into</text>

<text 
x="55" 
y="859" 
dx="0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_281"
>the higher-dimensional space (which could be expensive if there are a lot of points and the</text>

<text 
x="55" 
y="886" 
class="s2_281"
>mapping is complicated), we can use a “kernel” function to compute dot products in the</text>

<text 
x="55" 
y="914" 
dx="0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_281"
>higher-dimensional space and use those to find a hyperplane.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
