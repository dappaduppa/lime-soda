<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 400 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_400{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_400{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_400{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_400{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_400{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_400{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_400{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_400{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s9_400{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s10_400{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0" 
class="s1_400"
>MapReduce More Generally</text>

<text 
x="55" 
y="122" 
class="s2_400"
>If you think about it for a minute, all of the word-count-specific code in the previous</text>

<text 
x="55" 
y="149" 
class="s2_400"
>example is contained in the</text>

<text 
x="301" 
y="149" 
class="s3_400"
>wc_mapper</text>

<text 
x="401" 
y="149" 
class="s2_400"
>and</text>

<text 
x="438" 
y="149" 
class="s3_400"
>wc_reducer</text>

<text 
x="549" 
y="149" 
class="s2_400"
>functions. This means that with a</text>

<text 
x="55" 
y="179" 
class="s2_400"
>couple of changes we have a much more general framework (that still runs on a single</text>

<text 
x="55" 
y="206" 
class="s2_400"
>machine):</text>

<text 
x="76" 
y="251" 
class="s4_400"
>def</text>

<text 
x="108" 
y="251" 
class="s5_400"
>map_reduce</text>

<text 
x="187" 
y="251" 
class="s6_400"
>(</text>

<text 
x="195" 
y="251" 
class="s7_400"
>inputs</text>

<text 
x="242" 
y="251" 
class="s6_400"
>,</text>

<text 
x="258" 
y="251" 
class="s7_400"
>mapper</text>

<text 
x="306" 
y="251" 
class="s6_400"
>,</text>

<text 
x="322" 
y="251" 
class="s7_400"
>reducer</text>

<text 
x="377" 
y="251" 
class="s6_400"
>):</text>

<text 
x="108" 
y="267" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s8_400"
>"""runs MapReduce on the inputs using mapper and reducer"""</text>

<text 
x="108" 
y="282" 
class="s7_400"
>collector</text>

<text 
x="187" 
y="282" 
class="s6_400"
>=</text>

<text 
x="203" 
y="282" 
class="s7_400"
>defaultdict</text>

<text 
x="290" 
y="282" 
class="s6_400"
>(</text>

<text 
x="298" 
y="282" 
class="s9_400"
>list</text>

<text 
x="329" 
y="282" 
class="s6_400"
>)</text>

<text 
x="108" 
y="313" 
class="s4_400"
>for</text>

<text 
x="140" 
y="313" 
class="s9_400"
>input</text>

<text 
x="187" 
y="313" 
class="s10_400"
>in</text>

<text 
x="211" 
y="313" 
class="s7_400"
>inputs</text>

<text 
x="258" 
y="313" 
class="s6_400"
>:</text>

<text 
x="140" 
y="328" 
class="s4_400"
>for</text>

<text 
x="171" 
y="328" 
class="s7_400"
>key</text>

<text 
x="195" 
y="328" 
class="s6_400"
>,</text>

<text 
x="211" 
y="328" 
class="s7_400"
>value</text>

<text 
x="258" 
y="328" 
class="s10_400"
>in</text>

<text 
x="282" 
y="328" 
class="s7_400"
>mapper</text>

<text 
x="329" 
y="328" 
class="s6_400"
>(</text>

<text 
x="337" 
y="328" 
class="s9_400"
>input</text>

<text 
x="377" 
y="328" 
class="s6_400"
>):</text>

<text 
x="171" 
y="344" 
class="s7_400"
>collector</text>

<text 
x="242" 
y="344" 
class="s6_400"
>[</text>

<text 
x="250" 
y="344" 
class="s7_400"
>key</text>

<text 
x="274" 
y="344" 
class="s6_400"
>].</text>

<text 
x="290" 
y="344" 
class="s7_400"
>append</text>

<text 
x="337" 
y="344" 
class="s6_400"
>(</text>

<text 
x="345" 
y="344" 
class="s7_400"
>value</text>

<text 
x="385" 
y="344" 
class="s6_400"
>)</text>

<text 
x="108" 
y="375" 
class="s4_400"
>return</text>

<text 
x="163" 
y="375" 
class="s6_400"
>[</text>

<text 
x="171" 
y="375" 
class="s7_400"
>output</text>

<text 
x="171" 
y="390" 
class="s4_400"
>for</text>

<text 
x="203" 
y="390" 
class="s7_400"
>key</text>

<text 
x="227" 
y="390" 
class="s6_400"
>,</text>

<text 
x="242" 
y="390" 
class="s7_400"
>values</text>

<text 
x="298" 
y="390" 
class="s10_400"
>in</text>

<text 
x="322" 
y="390" 
class="s7_400"
>collector</text>

<text 
x="393" 
y="390" 
class="s6_400"
>.</text>

<text 
x="401" 
y="390" 
class="s7_400"
>iteritems</text>

<text 
x="472" 
y="390" 
class="s6_400"
>()</text>

<text 
x="171" 
y="405" 
class="s4_400"
>for</text>

<text 
x="203" 
y="405" 
class="s7_400"
>output</text>

<text 
x="258" 
y="405" 
class="s10_400"
>in</text>

<text 
x="282" 
y="405" 
class="s7_400"
>reducer</text>

<text 
x="337" 
y="405" 
class="s6_400"
>(</text>

<text 
x="345" 
y="405" 
class="s7_400"
>key</text>

<text 
x="369" 
y="405" 
class="s6_400"
>,</text>

<text 
x="377" 
y="405" 
class="s7_400"
>values</text>

<text 
x="424" 
y="405" 
class="s6_400"
>)]</text>

<text 
x="55" 
y="458" 
class="s2_400"
>And then we can count words simply by using:</text>

<text 
x="76" 
y="503" 
class="s7_400"
>word_counts</text>

<text 
x="171" 
y="503" 
class="s6_400"
>=</text>

<text 
x="187" 
y="503" 
class="s7_400"
>map_reduce</text>

<text 
x="266" 
y="503" 
class="s6_400"
>(</text>

<text 
x="274" 
y="503" 
class="s7_400"
>documents</text>

<text 
x="345" 
y="503" 
class="s6_400"
>,</text>

<text 
x="361" 
y="503" 
class="s7_400"
>wc_mapper</text>

<text 
x="432" 
y="503" 
class="s6_400"
>,</text>

<text 
x="448" 
y="503" 
class="s7_400"
>wc_reducer</text>

<text 
x="527" 
y="503" 
class="s6_400"
>)</text>

<text 
x="55" 
y="556" 
class="s2_400"
>This gives us the flexibility to solve a wide variety of problems.</text>

<text 
x="55" 
y="595" 
class="s2_400"
>Before we proceed, observe that</text>

<text 
x="344" 
y="595" 
class="s3_400"
>wc_reducer</text>

<text 
x="455" 
y="595" 
class="s2_400"
>is just summing the values corresponding to</text>

<text 
x="55" 
y="624" 
dx="0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_400"
>each key. This kind of aggregation is common enough that itâ€™s worth abstracting it out:</text>

<text 
x="76" 
y="670" 
class="s4_400"
>def</text>

<text 
x="108" 
y="670" 
class="s5_400"
>reduce_values_using</text>

<text 
x="258" 
y="670" 
class="s6_400"
>(</text>

<text 
x="266" 
y="670" 
class="s7_400"
>aggregation_fn</text>

<text 
x="377" 
y="670" 
class="s6_400"
>,</text>

<text 
x="393" 
y="670" 
class="s7_400"
>key</text>

<text 
x="416" 
y="670" 
class="s6_400"
>,</text>

<text 
x="432" 
y="670" 
class="s7_400"
>values</text>

<text 
x="480" 
y="670" 
class="s6_400"
>):</text>

<text 
x="108" 
y="685" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s8_400"
>"""reduces a key-values pair by applying aggregation_fn to the values"""</text>

<text 
x="108" 
y="700" 
class="s4_400"
>yield</text>

<text 
x="156" 
y="700" 
class="s6_400"
>(</text>

<text 
x="163" 
y="700" 
class="s7_400"
>key</text>

<text 
x="187" 
y="700" 
class="s6_400"
>,</text>

<text 
x="203" 
y="700" 
class="s7_400"
>aggregation_fn</text>

<text 
x="314" 
y="700" 
class="s6_400"
>(</text>

<text 
x="322" 
y="700" 
class="s7_400"
>values</text>

<text 
x="369" 
y="700" 
class="s6_400"
>))</text>

<text 
x="76" 
y="731" 
class="s4_400"
>def</text>

<text 
x="108" 
y="731" 
class="s5_400"
>values_reducer</text>

<text 
x="219" 
y="731" 
class="s6_400"
>(</text>

<text 
x="227" 
y="731" 
class="s7_400"
>aggregation_fn</text>

<text 
x="337" 
y="731" 
class="s6_400"
>):</text>

<text 
x="108" 
y="747" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s8_400"
>"""turns a function (values -&gt; output) into a reducer</text>

<text 
x="108" 
y="762" 
dx="0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s8_400"
>that maps (key, values) -&gt; (key, output)"""</text>

<text 
x="108" 
y="777" 
class="s4_400"
>return</text>

<text 
x="163" 
y="777" 
class="s7_400"
>partial</text>

<text 
x="219" 
y="777" 
class="s6_400"
>(</text>

<text 
x="227" 
y="777" 
class="s7_400"
>reduce_values_using</text>

<text 
x="377" 
y="777" 
class="s6_400"
>,</text>

<text 
x="393" 
y="777" 
class="s7_400"
>aggregation_fn</text>

<text 
x="503" 
y="777" 
class="s6_400"
>)</text>

<text 
x="55" 
y="830" 
class="s2_400"
>after which we can easily create:</text>

<text 
x="76" 
y="875" 
class="s7_400"
>sum_reducer</text>

<text 
x="171" 
y="875" 
class="s6_400"
>=</text>

<text 
x="187" 
y="875" 
class="s7_400"
>values_reducer</text>

<text 
x="298" 
y="875" 
class="s6_400"
>(</text>

<text 
x="306" 
y="875" 
class="s9_400"
>sum</text>

<text 
x="329" 
y="875" 
class="s6_400"
>)</text>

<text 
x="76" 
y="891" 
class="s7_400"
>max_reducer</text>

<text 
x="171" 
y="891" 
class="s6_400"
>=</text>

<text 
x="187" 
y="891" 
class="s7_400"
>values_reducer</text>

<text 
x="298" 
y="891" 
class="s6_400"
>(</text>

<text 
x="306" 
y="891" 
class="s9_400"
>max</text>

<text 
x="329" 
y="891" 
class="s6_400"
>)</text>

<text 
x="76" 
y="906" 
class="s7_400"
>min_reducer</text>

<text 
x="171" 
y="906" 
class="s6_400"
>=</text>

<text 
x="187" 
y="906" 
class="s7_400"
>values_reducer</text>

<text 
x="298" 
y="906" 
class="s6_400"
>(</text>

<text 
x="306" 
y="906" 
class="s9_400"
>min</text>

<text 
x="329" 
y="906" 
class="s6_400"
>)</text>

<text 
x="76" 
y="922" 
class="s7_400"
>count_distinct_reducer</text>

<text 
x="258" 
y="922" 
class="s6_400"
>=</text>

<text 
x="274" 
y="922" 
class="s7_400"
>values_reducer</text>

<text 
x="385" 
y="922" 
class="s6_400"
>(</text>

<text 
x="393" 
y="922" 
class="s4_400"
>lambda</text>

<text 
x="448" 
y="922" 
class="s7_400"
>values</text>

<text 
x="495" 
y="922" 
class="s6_400"
>:</text>

<text 
x="511" 
y="922" 
class="s9_400"
>len</text>

<text 
x="535" 
y="922" 
class="s6_400"
>(</text>

<text 
x="543" 
y="922" 
class="s9_400"
>set</text>

<text 
x="567" 
y="922" 
class="s6_400"
>(</text>

<text 
x="574" 
y="922" 
class="s7_400"
>values</text>

<text 
x="622" 
y="922" 
class="s6_400"
>)))</text>

<text 
x="55" 
y="974" 
class="s2_400"
>and so on.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
