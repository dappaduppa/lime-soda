<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 26 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_26{
stroke: #000000;
stroke-width: 1.0996486;
stroke-linecap: square;
stroke-linejoin: miter;
}

.s1_26{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_26{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s3_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s4_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s6_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s7_26{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s8_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s9_26{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_26{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s11_26{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s12_26{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
class="s1_26"
>interests. (This is a good example of the “substantive expertise” aspect of data science.)</text>

<text 
x="55" 
y="102" 
class="s1_26"
>After asking around, you manage to get your hands on this data, as a list of pairs</text>

<text 
x="55" 
y="129" 
dx="0,0,0,0,0,0,0,0,0,0,6.1,0,0,0,0,0,0,0,0" 
class="s2_26"
>(user_id, interest)</text>

<text 
x="255" 
y="129" 
class="s1_26"
>:</text>

<text 
x="76" 
y="177" 
class="s3_26"
>interests</text>

<text 
x="156" 
y="177" 
dx="0,0,4.6" 
class="s4_26"
>= [</text>

<text 
x="108" 
y="192" 
class="s4_26"
>(</text>

<text 
x="116" 
y="192" 
class="s5_26"
>0</text>

<text 
x="124" 
y="192" 
class="s4_26"
>,</text>

<text 
x="140" 
y="192" 
class="s6_26"
>"Hadoop"</text>

<text 
x="203" 
y="192" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="235" 
y="192" 
class="s5_26"
>0</text>

<text 
x="242" 
y="192" 
class="s4_26"
>,</text>

<text 
x="258" 
y="192" 
dx="0,0,0,0,0,4.6,0,0,0,0" 
class="s6_26"
>"Big Data"</text>

<text 
x="337" 
y="192" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="369" 
y="192" 
class="s5_26"
>0</text>

<text 
x="377" 
y="192" 
class="s4_26"
>,</text>

<text 
x="393" 
y="192" 
class="s6_26"
>"HBase"</text>

<text 
x="448" 
y="192" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="480" 
y="192" 
class="s5_26"
>0</text>

<text 
x="487" 
y="192" 
class="s4_26"
>,</text>

<text 
x="503" 
y="192" 
class="s6_26"
>"Java"</text>

<text 
x="551" 
y="192" 
class="s4_26"
>),</text>

<text 
x="108" 
y="207" 
class="s4_26"
>(</text>

<text 
x="116" 
y="207" 
class="s5_26"
>0</text>

<text 
x="124" 
y="207" 
class="s4_26"
>,</text>

<text 
x="140" 
y="207" 
class="s6_26"
>"Spark"</text>

<text 
x="195" 
y="207" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="227" 
y="207" 
class="s5_26"
>0</text>

<text 
x="235" 
y="207" 
class="s4_26"
>,</text>

<text 
x="250" 
y="207" 
class="s6_26"
>"Storm"</text>

<text 
x="306" 
y="207" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="337" 
y="207" 
class="s5_26"
>0</text>

<text 
x="345" 
y="207" 
class="s4_26"
>,</text>

<text 
x="361" 
y="207" 
class="s6_26"
>"Cassandra"</text>

<text 
x="448" 
y="207" 
class="s4_26"
>),</text>

<text 
x="108" 
y="223" 
class="s4_26"
>(</text>

<text 
x="116" 
y="223" 
class="s5_26"
>1</text>

<text 
x="124" 
y="223" 
class="s4_26"
>,</text>

<text 
x="140" 
y="223" 
class="s6_26"
>"NoSQL"</text>

<text 
x="195" 
y="223" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="227" 
y="223" 
class="s5_26"
>1</text>

<text 
x="235" 
y="223" 
class="s4_26"
>,</text>

<text 
x="250" 
y="223" 
class="s6_26"
>"MongoDB"</text>

<text 
x="322" 
y="223" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="353" 
y="223" 
class="s5_26"
>1</text>

<text 
x="361" 
y="223" 
class="s4_26"
>,</text>

<text 
x="377" 
y="223" 
class="s6_26"
>"Cassandra"</text>

<text 
x="464" 
y="223" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="495" 
y="223" 
class="s5_26"
>1</text>

<text 
x="503" 
y="223" 
class="s4_26"
>,</text>

<text 
x="519" 
y="223" 
class="s6_26"
>"HBase"</text>

<text 
x="574" 
y="223" 
class="s4_26"
>),</text>

<text 
x="108" 
y="238" 
class="s4_26"
>(</text>

<text 
x="116" 
y="238" 
class="s5_26"
>1</text>

<text 
x="124" 
y="238" 
class="s4_26"
>,</text>

<text 
x="140" 
y="238" 
class="s6_26"
>"Postgres"</text>

<text 
x="219" 
y="238" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="250" 
y="238" 
class="s5_26"
>2</text>

<text 
x="258" 
y="238" 
class="s4_26"
>,</text>

<text 
x="274" 
y="238" 
class="s6_26"
>"Python"</text>

<text 
x="337" 
y="238" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="369" 
y="238" 
class="s5_26"
>2</text>

<text 
x="377" 
y="238" 
class="s4_26"
>,</text>

<text 
x="393" 
y="238" 
class="s6_26"
>"scikit-learn"</text>

<text 
x="503" 
y="238" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="535" 
y="238" 
class="s5_26"
>2</text>

<text 
x="543" 
y="238" 
class="s4_26"
>,</text>

<text 
x="559" 
y="238" 
class="s6_26"
>"scipy"</text>

<text 
x="614" 
y="238" 
class="s4_26"
>),</text>

<text 
x="108" 
y="254" 
class="s4_26"
>(</text>

<text 
x="116" 
y="254" 
class="s5_26"
>2</text>

<text 
x="124" 
y="254" 
class="s4_26"
>,</text>

<text 
x="140" 
y="254" 
class="s6_26"
>"numpy"</text>

<text 
x="195" 
y="254" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="227" 
y="254" 
class="s5_26"
>2</text>

<text 
x="235" 
y="254" 
class="s4_26"
>,</text>

<text 
x="250" 
y="254" 
class="s6_26"
>"statsmodels"</text>

<text 
x="353" 
y="254" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="385" 
y="254" 
class="s5_26"
>2</text>

<text 
x="393" 
y="254" 
class="s4_26"
>,</text>

<text 
x="408" 
y="254" 
class="s6_26"
>"pandas"</text>

<text 
x="472" 
y="254" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="503" 
y="254" 
class="s5_26"
>3</text>

<text 
x="511" 
y="254" 
class="s4_26"
>,</text>

<text 
x="527" 
y="254" 
class="s6_26"
>"R"</text>

<text 
x="551" 
y="254" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="582" 
y="254" 
class="s5_26"
>3</text>

<text 
x="590" 
y="254" 
class="s4_26"
>,</text>

<text 
x="606" 
y="254" 
class="s6_26"
>"Python"</text>

<text 
x="669" 
y="254" 
class="s4_26"
>),</text>

<text 
x="108" 
y="269" 
class="s4_26"
>(</text>

<text 
x="116" 
y="269" 
class="s5_26"
>3</text>

<text 
x="124" 
y="269" 
class="s4_26"
>,</text>

<text 
x="140" 
y="269" 
class="s6_26"
>"statistics"</text>

<text 
x="235" 
y="269" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="266" 
y="269" 
class="s5_26"
>3</text>

<text 
x="274" 
y="269" 
class="s4_26"
>,</text>

<text 
x="290" 
y="269" 
class="s6_26"
>"regression"</text>

<text 
x="385" 
y="269" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="416" 
y="269" 
class="s5_26"
>3</text>

<text 
x="424" 
y="269" 
class="s4_26"
>,</text>

<text 
x="440" 
y="269" 
class="s6_26"
>"probability"</text>

<text 
x="543" 
y="269" 
class="s4_26"
>),</text>

<text 
x="108" 
y="284" 
class="s4_26"
>(</text>

<text 
x="116" 
y="284" 
class="s5_26"
>4</text>

<text 
x="124" 
y="284" 
class="s4_26"
>,</text>

<text 
x="140" 
y="284" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_26"
>"machine learning"</text>

<text 
x="282" 
y="284" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="314" 
y="284" 
class="s5_26"
>4</text>

<text 
x="322" 
y="284" 
class="s4_26"
>,</text>

<text 
x="337" 
y="284" 
class="s6_26"
>"regression"</text>

<text 
x="432" 
y="284" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="464" 
y="284" 
class="s5_26"
>4</text>

<text 
x="472" 
y="284" 
class="s4_26"
>,</text>

<text 
x="487" 
y="284" 
dx="0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s6_26"
>"decision trees"</text>

<text 
x="614" 
y="284" 
class="s4_26"
>),</text>

<text 
x="108" 
y="300" 
class="s4_26"
>(</text>

<text 
x="116" 
y="300" 
class="s5_26"
>4</text>

<text 
x="124" 
y="300" 
class="s4_26"
>,</text>

<text 
x="140" 
y="300" 
class="s6_26"
>"libsvm"</text>

<text 
x="203" 
y="300" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="235" 
y="300" 
class="s5_26"
>5</text>

<text 
x="242" 
y="300" 
class="s4_26"
>,</text>

<text 
x="258" 
y="300" 
class="s6_26"
>"Python"</text>

<text 
x="322" 
y="300" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="353" 
y="300" 
class="s5_26"
>5</text>

<text 
x="361" 
y="300" 
class="s4_26"
>,</text>

<text 
x="377" 
y="300" 
class="s6_26"
>"R"</text>

<text 
x="401" 
y="300" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="432" 
y="300" 
class="s5_26"
>5</text>

<text 
x="440" 
y="300" 
class="s4_26"
>,</text>

<text 
x="456" 
y="300" 
class="s6_26"
>"Java"</text>

<text 
x="503" 
y="300" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="535" 
y="300" 
class="s5_26"
>5</text>

<text 
x="543" 
y="300" 
class="s4_26"
>,</text>

<text 
x="559" 
y="300" 
class="s6_26"
>"C++"</text>

<text 
x="598" 
y="300" 
class="s4_26"
>),</text>

<text 
x="108" 
y="315" 
class="s4_26"
>(</text>

<text 
x="116" 
y="315" 
class="s5_26"
>5</text>

<text 
x="124" 
y="315" 
class="s4_26"
>,</text>

<text 
x="140" 
y="315" 
class="s6_26"
>"Haskell"</text>

<text 
x="211" 
y="315" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="242" 
y="315" 
class="s5_26"
>5</text>

<text 
x="250" 
y="315" 
class="s4_26"
>,</text>

<text 
x="266" 
y="315" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s6_26"
>"programming languages"</text>

<text 
x="448" 
y="315" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="480" 
y="315" 
class="s5_26"
>6</text>

<text 
x="487" 
y="315" 
class="s4_26"
>,</text>

<text 
x="503" 
y="315" 
class="s6_26"
>"statistics"</text>

<text 
x="598" 
y="315" 
class="s4_26"
>),</text>

<text 
x="108" 
y="331" 
class="s4_26"
>(</text>

<text 
x="116" 
y="331" 
class="s5_26"
>6</text>

<text 
x="124" 
y="331" 
class="s4_26"
>,</text>

<text 
x="140" 
y="331" 
class="s6_26"
>"probability"</text>

<text 
x="242" 
y="331" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="274" 
y="331" 
class="s5_26"
>6</text>

<text 
x="282" 
y="331" 
class="s4_26"
>,</text>

<text 
x="298" 
y="331" 
class="s6_26"
>"mathematics"</text>

<text 
x="401" 
y="331" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="432" 
y="331" 
class="s5_26"
>6</text>

<text 
x="440" 
y="331" 
class="s4_26"
>,</text>

<text 
x="456" 
y="331" 
class="s6_26"
>"theory"</text>

<text 
x="519" 
y="331" 
class="s4_26"
>),</text>

<text 
x="108" 
y="346" 
class="s4_26"
>(</text>

<text 
x="116" 
y="346" 
class="s5_26"
>7</text>

<text 
x="124" 
y="346" 
class="s4_26"
>,</text>

<text 
x="140" 
y="346" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_26"
>"machine learning"</text>

<text 
x="282" 
y="346" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="314" 
y="346" 
class="s5_26"
>7</text>

<text 
x="322" 
y="346" 
class="s4_26"
>,</text>

<text 
x="337" 
y="346" 
class="s6_26"
>"scikit-learn"</text>

<text 
x="448" 
y="346" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="480" 
y="346" 
class="s5_26"
>7</text>

<text 
x="487" 
y="346" 
class="s4_26"
>,</text>

<text 
x="503" 
y="346" 
class="s6_26"
>"Mahout"</text>

<text 
x="567" 
y="346" 
class="s4_26"
>),</text>

<text 
x="108" 
y="361" 
class="s4_26"
>(</text>

<text 
x="116" 
y="361" 
class="s5_26"
>7</text>

<text 
x="124" 
y="361" 
class="s4_26"
>,</text>

<text 
x="140" 
y="361" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_26"
>"neural networks"</text>

<text 
x="274" 
y="361" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="306" 
y="361" 
class="s5_26"
>8</text>

<text 
x="314" 
y="361" 
class="s4_26"
>,</text>

<text 
x="329" 
y="361" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_26"
>"neural networks"</text>

<text 
x="464" 
y="361" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="495" 
y="361" 
class="s5_26"
>8</text>

<text 
x="503" 
y="361" 
class="s4_26"
>,</text>

<text 
x="519" 
y="361" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_26"
>"deep learning"</text>

<text 
x="638" 
y="361" 
class="s4_26"
>),</text>

<text 
x="108" 
y="377" 
class="s4_26"
>(</text>

<text 
x="116" 
y="377" 
class="s5_26"
>8</text>

<text 
x="124" 
y="377" 
class="s4_26"
>,</text>

<text 
x="140" 
y="377" 
dx="0,0,0,0,0,4.6,0,0,0,0" 
class="s6_26"
>"Big Data"</text>

<text 
x="219" 
y="377" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="250" 
y="377" 
class="s5_26"
>8</text>

<text 
x="258" 
y="377" 
class="s4_26"
>,</text>

<text 
x="274" 
y="377" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s6_26"
>"artificial intelligence"</text>

<text 
x="472" 
y="377" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="503" 
y="377" 
class="s5_26"
>9</text>

<text 
x="511" 
y="377" 
class="s4_26"
>,</text>

<text 
x="527" 
y="377" 
class="s6_26"
>"Hadoop"</text>

<text 
x="590" 
y="377" 
class="s4_26"
>),</text>

<text 
x="108" 
y="392" 
class="s4_26"
>(</text>

<text 
x="116" 
y="392" 
class="s5_26"
>9</text>

<text 
x="124" 
y="392" 
class="s4_26"
>,</text>

<text 
x="140" 
y="392" 
class="s6_26"
>"Java"</text>

<text 
x="187" 
y="392" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="219" 
y="392" 
class="s5_26"
>9</text>

<text 
x="227" 
y="392" 
class="s4_26"
>,</text>

<text 
x="242" 
y="392" 
class="s6_26"
>"MapReduce"</text>

<text 
x="329" 
y="392" 
dx="0,0,0,4.6" 
class="s4_26"
>), (</text>

<text 
x="361" 
y="392" 
class="s5_26"
>9</text>

<text 
x="369" 
y="392" 
class="s4_26"
>,</text>

<text 
x="385" 
y="392" 
dx="0,0,0,0,0,4.6,0,0,0,0" 
class="s6_26"
>"Big Data"</text>

<text 
x="464" 
y="392" 
class="s4_26"
>)</text>

<text 
x="76" 
y="408" 
class="s4_26"
>]</text>

<text 
x="55" 
y="461" 
class="s1_26"
>For example, Thor (</text>

<text 
x="232" 
y="461" 
class="s2_26"
>id</text>

<text 
x="258" 
y="461" 
class="s1_26"
>4) has no friends in common with Devin (</text>

<text 
x="627" 
y="461" 
class="s2_26"
>id</text>

<text 
x="654" 
y="461" 
class="s1_26"
>7), but they share an</text>

<text 
x="55" 
y="490" 
class="s1_26"
>interest in machine learning.</text>

<text 
x="55" 
y="529" 
dx="0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_26"
>It’s easy to build a function that finds users with a certain interest:</text>

<text 
x="76" 
y="574" 
class="s7_26"
>def</text>

<text 
x="108" 
y="574" 
class="s8_26"
>data_scientists_who_like</text>

<text 
x="298" 
y="574" 
class="s4_26"
>(</text>

<text 
x="306" 
y="574" 
class="s3_26"
>target_interest</text>

<text 
x="424" 
y="574" 
class="s4_26"
>):</text>

<text 
x="108" 
y="589" 
class="s7_26"
>return</text>

<text 
x="163" 
y="589" 
class="s4_26"
>[</text>

<text 
x="171" 
y="589" 
class="s3_26"
>user_id</text>

<text 
x="171" 
y="605" 
class="s7_26"
>for</text>

<text 
x="203" 
y="605" 
class="s3_26"
>user_id</text>

<text 
x="258" 
y="605" 
class="s4_26"
>,</text>

<text 
x="274" 
y="605" 
class="s3_26"
>user_interest</text>

<text 
x="385" 
y="605" 
class="s9_26"
>in</text>

<text 
x="408" 
y="605" 
class="s3_26"
>interests</text>

<text 
x="171" 
y="620" 
class="s7_26"
>if</text>

<text 
x="195" 
y="620" 
class="s3_26"
>user_interest</text>

<text 
x="306" 
y="620" 
class="s4_26"
>==</text>

<text 
x="329" 
y="620" 
class="s3_26"
>target_interest</text>

<text 
x="448" 
y="620" 
class="s4_26"
>]</text>

<text 
x="55" 
y="673" 
class="s1_26"
>This works, but it has to examine the whole list of interests for every search. If we have a</text>

<text 
x="55" 
y="700" 
class="s1_26"
>lot of users and interests (or if we just want to do a lot of searches), we’re probably better</text>

<text 
x="55" 
y="728" 
dx="0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_26"
>off building an index from interests to users:</text>

<text 
x="76" 
y="773" 
class="s7_26"
>from</text>

<text 
x="116" 
y="773" 
class="s10_26"
>collections</text>

<text 
x="211" 
y="773" 
class="s7_26"
>import</text>

<text 
x="266" 
y="773" 
class="s3_26"
>defaultdict</text>

<text 
x="76" 
y="804" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_26"
># keys are interests, values are lists of user_ids with that interest</text>

<text 
x="76" 
y="819" 
class="s3_26"
>user_ids_by_interest</text>

<text 
x="242" 
y="819" 
class="s4_26"
>=</text>

<text 
x="258" 
y="819" 
class="s3_26"
>defaultdict</text>

<text 
x="345" 
y="819" 
class="s4_26"
>(</text>

<text 
x="353" 
y="819" 
class="s12_26"
>list</text>

<text 
x="385" 
y="819" 
class="s4_26"
>)</text>

<text 
x="76" 
y="850" 
class="s7_26"
>for</text>

<text 
x="108" 
y="850" 
class="s3_26"
>user_id</text>

<text 
x="163" 
y="850" 
class="s4_26"
>,</text>

<text 
x="179" 
y="850" 
class="s3_26"
>interest</text>

<text 
x="250" 
y="850" 
class="s9_26"
>in</text>

<text 
x="274" 
y="850" 
class="s3_26"
>interests</text>

<text 
x="345" 
y="850" 
class="s4_26"
>:</text>

<text 
x="108" 
y="865" 
class="s3_26"
>user_ids_by_interest</text>

<text 
x="266" 
y="865" 
class="s4_26"
>[</text>

<text 
x="274" 
y="865" 
class="s3_26"
>interest</text>

<text 
x="337" 
y="865" 
class="s4_26"
>].</text>

<text 
x="353" 
y="865" 
class="s3_26"
>append</text>

<text 
x="401" 
y="865" 
class="s4_26"
>(</text>

<text 
x="408" 
y="865" 
class="s3_26"
>user_id</text>

<text 
x="464" 
y="865" 
class="s4_26"
>)</text>

<text 
x="55" 
y="918" 
class="s1_26"
>And another from users to interests:</text>

<text 
x="76" 
y="963" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s11_26"
># keys are user_ids, values are lists of interests for that user_id</text>

<text 
x="76" 
y="979" 
class="s3_26"
>interests_by_user_id</text>

<text 
x="242" 
y="979" 
class="s4_26"
>=</text>

<text 
x="258" 
y="979" 
class="s3_26"
>defaultdict</text>

<text 
x="345" 
y="979" 
class="s4_26"
>(</text>

<text 
x="353" 
y="979" 
class="s12_26"
>list</text>

<text 
x="385" 
y="979" 
class="s4_26"
>)</text>

<text 
x="76" 
y="1010" 
class="s7_26"
>for</text>

<text 
x="108" 
y="1010" 
class="s3_26"
>user_id</text>

<text 
x="163" 
y="1010" 
class="s4_26"
>,</text>

<text 
x="179" 
y="1010" 
class="s3_26"
>interest</text>

<text 
x="250" 
y="1010" 
class="s9_26"
>in</text>

<text 
x="274" 
y="1010" 
class="s3_26"
>interests</text>

<text 
x="345" 
y="1010" 
class="s4_26"
>:</text>

<text 
x="108" 
y="1025" 
class="s3_26"
>interests_by_user_id</text>

<text 
x="266" 
y="1025" 
class="s4_26"
>[</text>

<text 
x="274" 
y="1025" 
class="s3_26"
>user_id</text>

<text 
x="329" 
y="1025" 
class="s4_26"
>].</text>

<text 
x="345" 
y="1025" 
class="s3_26"
>append</text>

<text 
x="393" 
y="1025" 
class="s4_26"
>(</text>

<text 
x="401" 
y="1025" 
class="s3_26"
>interest</text>

<text 
x="464" 
y="1025" 
class="s4_26"
>)</text>

<text 
x="55" 
y="1078" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_26"
>Now it’s easy to find who has the most interests in common with a given user:</text>

<path d="M61.6,1105.8l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_26" />
<text 
x="82" 
y="1115" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,-1.2,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_26"
>Iterate over the user’s interests.</text>

<path d="M61.6,1153.1l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_26" />
<text 
x="82" 
y="1162" 
class="s1_26"
>For each interest, iterate over the other users with that interest.</text>

<path d="M61.6,1200.4l6.6,0l0,6.6l-6.6,0l0,-6.6Z" class="g1_26" />
<text 
x="82" 
y="1210" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s1_26"
>Keep count of how many times we see each other user.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
