<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 165 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_165{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s2_165{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s3_165{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s4_165{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_165{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s6_165{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s7_165{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s8_165{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="76" 
y="64" 
class="s1_165"
>first_paragraph_text</text>

<text 
x="242" 
y="64" 
class="s2_165"
>=</text>

<text 
x="258" 
y="64" 
class="s1_165"
>soup</text>

<text 
x="290" 
y="64" 
class="s2_165"
>.</text>

<text 
x="298" 
y="64" 
class="s1_165"
>p</text>

<text 
x="306" 
y="64" 
class="s2_165"
>.</text>

<text 
x="314" 
y="64" 
class="s1_165"
>text</text>

<text 
x="76" 
y="80" 
class="s1_165"
>first_paragraph_words</text>

<text 
x="250" 
y="80" 
class="s2_165"
>=</text>

<text 
x="266" 
y="80" 
class="s1_165"
>soup</text>

<text 
x="298" 
y="80" 
class="s2_165"
>.</text>

<text 
x="306" 
y="80" 
class="s1_165"
>p</text>

<text 
x="314" 
y="80" 
class="s2_165"
>.</text>

<text 
x="322" 
y="80" 
class="s1_165"
>text</text>

<text 
x="353" 
y="80" 
class="s2_165"
>.</text>

<text 
x="361" 
y="80" 
class="s1_165"
>split</text>

<text 
x="401" 
y="80" 
class="s2_165"
>()</text>

<text 
x="55" 
y="133" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_165"
>And you can extract a tag’s attributes by treating it like a</text>

<text 
x="559" 
y="133" 
class="s4_165"
>dict</text>

<text 
x="601" 
y="133" 
class="s3_165"
>:</text>

<text 
x="76" 
y="180" 
class="s1_165"
>first_paragraph_id</text>

<text 
x="227" 
y="180" 
class="s2_165"
>=</text>

<text 
x="242" 
y="180" 
class="s1_165"
>soup</text>

<text 
x="274" 
y="180" 
class="s2_165"
>.</text>

<text 
x="282" 
y="180" 
class="s1_165"
>p</text>

<text 
x="290" 
y="180" 
class="s2_165"
>[</text>

<text 
x="298" 
y="180" 
class="s5_165"
>'id'</text>

<text 
x="329" 
y="180" 
class="s2_165"
>]</text>

<text 
x="393" 
y="180" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0" 
class="s6_165"
># raises KeyError if no 'id'</text>

<text 
x="76" 
y="195" 
class="s1_165"
>first_paragraph_id2</text>

<text 
x="235" 
y="195" 
class="s2_165"
>=</text>

<text 
x="250" 
y="195" 
class="s1_165"
>soup</text>

<text 
x="282" 
y="195" 
class="s2_165"
>.</text>

<text 
x="290" 
y="195" 
class="s1_165"
>p</text>

<text 
x="298" 
y="195" 
class="s2_165"
>.</text>

<text 
x="306" 
y="195" 
class="s1_165"
>get</text>

<text 
x="329" 
y="195" 
class="s2_165"
>(</text>

<text 
x="337" 
y="195" 
class="s5_165"
>'id'</text>

<text 
x="369" 
y="195" 
class="s2_165"
>)</text>

<text 
x="393" 
y="195" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0" 
class="s6_165"
># returns None if no 'id'</text>

<text 
x="55" 
y="248" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_165"
>You can get multiple tags at once:</text>

<text 
x="76" 
y="293" 
class="s1_165"
>all_paragraphs</text>

<text 
x="195" 
y="293" 
class="s2_165"
>=</text>

<text 
x="211" 
y="293" 
class="s1_165"
>soup</text>

<text 
x="242" 
y="293" 
class="s2_165"
>.</text>

<text 
x="250" 
y="293" 
class="s1_165"
>find_all</text>

<text 
x="314" 
y="293" 
class="s2_165"
>(</text>

<text 
x="322" 
y="293" 
class="s5_165"
>'p'</text>

<text 
x="345" 
y="293" 
class="s2_165"
>)</text>

<text 
x="369" 
y="293" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_165"
># or just soup('p')</text>

<text 
x="76" 
y="309" 
class="s1_165"
>paragraphs_with_ids</text>

<text 
x="235" 
y="309" 
dx="0,0,4.6" 
class="s2_165"
>= [</text>

<text 
x="258" 
y="309" 
class="s1_165"
>p</text>

<text 
x="274" 
y="309" 
class="s7_165"
>for</text>

<text 
x="306" 
y="309" 
class="s1_165"
>p</text>

<text 
x="322" 
y="309" 
class="s8_165"
>in</text>

<text 
x="345" 
y="309" 
class="s1_165"
>soup</text>

<text 
x="377" 
y="309" 
class="s2_165"
>(</text>

<text 
x="385" 
y="309" 
class="s5_165"
>'p'</text>

<text 
x="408" 
y="309" 
class="s2_165"
>)</text>

<text 
x="424" 
y="309" 
class="s7_165"
>if</text>

<text 
x="448" 
y="309" 
class="s1_165"
>p</text>

<text 
x="456" 
y="309" 
class="s2_165"
>.</text>

<text 
x="464" 
y="309" 
class="s1_165"
>get</text>

<text 
x="487" 
y="309" 
class="s2_165"
>(</text>

<text 
x="495" 
y="309" 
class="s5_165"
>'id'</text>

<text 
x="527" 
y="309" 
class="s2_165"
>)]</text>

<text 
x="55" 
y="361" 
class="s3_165"
>Frequently you’ll want to find tags with a specific</text>

<text 
x="500" 
y="361" 
class="s4_165"
>class</text>

<text 
x="552" 
y="361" 
class="s3_165"
>:</text>

<text 
x="76" 
y="409" 
class="s1_165"
>important_paragraphs</text>

<text 
x="242" 
y="409" 
class="s2_165"
>=</text>

<text 
x="258" 
y="409" 
class="s1_165"
>soup</text>

<text 
x="290" 
y="409" 
class="s2_165"
>(</text>

<text 
x="298" 
y="409" 
class="s5_165"
>'p'</text>

<text 
x="322" 
y="409" 
dx="0,0,4.6" 
class="s2_165"
>, {</text>

<text 
x="345" 
y="409" 
class="s5_165"
>'class'</text>

<text 
x="408" 
y="409" 
class="s2_165"
>:</text>

<text 
x="424" 
y="409" 
class="s5_165"
>'important'</text>

<text 
x="511" 
y="409" 
class="s2_165"
>})</text>

<text 
x="76" 
y="424" 
class="s1_165"
>important_paragraphs2</text>

<text 
x="250" 
y="424" 
class="s2_165"
>=</text>

<text 
x="266" 
y="424" 
class="s1_165"
>soup</text>

<text 
x="298" 
y="424" 
class="s2_165"
>(</text>

<text 
x="306" 
y="424" 
class="s5_165"
>'p'</text>

<text 
x="329" 
y="424" 
class="s2_165"
>,</text>

<text 
x="345" 
y="424" 
class="s5_165"
>'important'</text>

<text 
x="432" 
y="424" 
class="s2_165"
>)</text>

<text 
x="76" 
y="440" 
class="s1_165"
>important_paragraphs3</text>

<text 
x="250" 
y="440" 
dx="0,0,4.6" 
class="s2_165"
>= [</text>

<text 
x="274" 
y="440" 
class="s1_165"
>p</text>

<text 
x="290" 
y="440" 
class="s7_165"
>for</text>

<text 
x="322" 
y="440" 
class="s1_165"
>p</text>

<text 
x="337" 
y="440" 
class="s8_165"
>in</text>

<text 
x="361" 
y="440" 
class="s1_165"
>soup</text>

<text 
x="393" 
y="440" 
class="s2_165"
>(</text>

<text 
x="401" 
y="440" 
class="s5_165"
>'p'</text>

<text 
x="424" 
y="440" 
class="s2_165"
>)</text>

<text 
x="274" 
y="455" 
class="s7_165"
>if</text>

<text 
x="298" 
y="455" 
class="s5_165"
>'important'</text>

<text 
x="393" 
y="455" 
class="s8_165"
>in</text>

<text 
x="416" 
y="455" 
class="s1_165"
>p</text>

<text 
x="424" 
y="455" 
class="s2_165"
>.</text>

<text 
x="432" 
y="455" 
class="s1_165"
>get</text>

<text 
x="456" 
y="455" 
class="s2_165"
>(</text>

<text 
x="464" 
y="455" 
class="s5_165"
>'class'</text>

<text 
x="519" 
y="455" 
dx="0,0,4.6,0,0,0" 
class="s2_165"
>, [])]</text>

<text 
x="55" 
y="508" 
class="s3_165"
>And you can combine these to implement more elaborate logic. For example, if you want</text>

<text 
x="55" 
y="535" 
class="s3_165"
>to find every</text>

<text 
x="172" 
y="535" 
class="s4_165"
>&lt;span&gt;</text>

<text 
x="241" 
y="535" 
class="s3_165"
>element that is contained inside a</text>

<text 
x="539" 
y="535" 
class="s4_165"
>&lt;div&gt;</text>

<text 
x="597" 
y="535" 
class="s3_165"
>element, you could do this:</text>

<text 
x="76" 
y="583" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s6_165"
># warning, will return the same span multiple times</text>

<text 
x="76" 
y="598" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s6_165"
># if it sits inside multiple divs</text>

<text 
x="76" 
y="613" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0" 
class="s6_165"
># be more clever if that's the case</text>

<text 
x="76" 
y="629" 
class="s1_165"
>spans_inside_divs</text>

<text 
x="219" 
y="629" 
dx="0,0,4.6" 
class="s2_165"
>= [</text>

<text 
x="242" 
y="629" 
class="s1_165"
>span</text>

<text 
x="242" 
y="644" 
class="s7_165"
>for</text>

<text 
x="274" 
y="644" 
class="s1_165"
>div</text>

<text 
x="306" 
y="644" 
class="s8_165"
>in</text>

<text 
x="329" 
y="644" 
class="s1_165"
>soup</text>

<text 
x="361" 
y="644" 
class="s2_165"
>(</text>

<text 
x="369" 
y="644" 
class="s5_165"
>'div'</text>

<text 
x="408" 
y="644" 
class="s2_165"
>)</text>

<text 
x="456" 
y="644" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0" 
class="s6_165"
># for each &lt;div&gt; on the page</text>

<text 
x="242" 
y="660" 
class="s7_165"
>for</text>

<text 
x="274" 
y="660" 
class="s1_165"
>span</text>

<text 
x="314" 
y="660" 
class="s8_165"
>in</text>

<text 
x="337" 
y="660" 
class="s1_165"
>div</text>

<text 
x="361" 
y="660" 
class="s2_165"
>(</text>

<text 
x="369" 
y="660" 
class="s5_165"
>'span'</text>

<text 
x="416" 
y="660" 
class="s2_165"
>)]</text>

<text 
x="456" 
y="660" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0" 
class="s6_165"
># find each &lt;span&gt; inside it</text>

<text 
x="55" 
y="712" 
class="s3_165"
>Just this handful of features will allow us to do quite a lot. If you end up needing to do</text>

<text 
x="55" 
y="740" 
class="s3_165"
>more-complicated things (or if you’re just curious), check the documentation.</text>

<text 
x="55" 
y="778" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_165"
>Of course, whatever data is important won’t typically be labeled as</text>

<text 
x="649" 
y="778" 
class="s4_165"
>class="important"</text>

<text 
x="828" 
y="778" 
class="s3_165"
>.</text>

<text 
x="55" 
y="808" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_165"
>You’ll need to carefully inspect the source HTML, reason through your selection logic,</text>

<text 
x="55" 
y="836" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_165"
>and worry about edge cases to make sure your data is correct. Let’s look at an example.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
