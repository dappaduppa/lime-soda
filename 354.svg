<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 354 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_354{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_354{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s3_354{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s4_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_354{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s8_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s9_354{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_354{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s12_354{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s13_354{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_354"
>We can put this all together into a (large) function:</text>

<text 
x="76" 
y="119" 
class="s2_354"
>from</text>

<text 
x="116" 
y="119" 
class="s3_354"
>collections</text>

<text 
x="211" 
y="119" 
class="s2_354"
>import</text>

<text 
x="266" 
y="119" 
class="s4_354"
>deque</text>

<text 
x="76" 
y="150" 
class="s2_354"
>def</text>

<text 
x="108" 
y="150" 
class="s5_354"
>shortest_paths_from</text>

<text 
x="258" 
y="150" 
class="s6_354"
>(</text>

<text 
x="266" 
y="150" 
class="s4_354"
>from_user</text>

<text 
x="337" 
y="150" 
class="s6_354"
>):</text>

<text 
x="108" 
y="181" 
dx="0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0" 
class="s7_354"
># a dictionary from "user_id" to *all* shortest paths to that user</text>

<text 
x="108" 
y="196" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="250" 
y="196" 
dx="0,0,4.6" 
class="s6_354"
>= {</text>

<text 
x="282" 
y="196" 
class="s4_354"
>from_user</text>

<text 
x="353" 
y="196" 
class="s6_354"
>[</text>

<text 
x="361" 
y="196" 
class="s8_354"
>"id"</text>

<text 
x="393" 
y="196" 
dx="0,0,4.6,0,4.6,0,0,0,0,4.6" 
class="s6_354"
>] : [[]] }</text>

<text 
x="108" 
y="227" 
dx="0,0,4.6,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s7_354"
># a queue of (previous user, next user) that we need to check.</text>

<text 
x="108" 
y="243" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_354"
># starts out with all pairs (from_user, friend_of_from_user)</text>

<text 
x="108" 
y="258" 
class="s4_354"
>frontier</text>

<text 
x="179" 
y="258" 
class="s6_354"
>=</text>

<text 
x="195" 
y="258" 
class="s4_354"
>deque</text>

<text 
x="235" 
y="258" 
class="s6_354"
>((</text>

<text 
x="250" 
y="258" 
class="s4_354"
>from_user</text>

<text 
x="322" 
y="258" 
class="s6_354"
>,</text>

<text 
x="337" 
y="258" 
class="s4_354"
>friend</text>

<text 
x="385" 
y="258" 
class="s6_354"
>)</text>

<text 
x="242" 
y="273" 
class="s2_354"
>for</text>

<text 
x="274" 
y="273" 
class="s4_354"
>friend</text>

<text 
x="329" 
y="273" 
class="s9_354"
>in</text>

<text 
x="353" 
y="273" 
class="s4_354"
>from_user</text>

<text 
x="424" 
y="273" 
class="s6_354"
>[</text>

<text 
x="432" 
y="273" 
class="s8_354"
>"friends"</text>

<text 
x="503" 
y="273" 
class="s6_354"
>])</text>

<text 
x="108" 
y="304" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0" 
class="s7_354"
># keep going until we empty the queue</text>

<text 
x="108" 
y="320" 
class="s2_354"
>while</text>

<text 
x="156" 
y="320" 
class="s4_354"
>frontier</text>

<text 
x="219" 
y="320" 
class="s6_354"
>:</text>

<text 
x="140" 
y="350" 
class="s4_354"
>prev_user</text>

<text 
x="211" 
y="350" 
class="s6_354"
>,</text>

<text 
x="227" 
y="350" 
class="s4_354"
>user</text>

<text 
x="266" 
y="350" 
class="s6_354"
>=</text>

<text 
x="282" 
y="350" 
class="s4_354"
>frontier</text>

<text 
x="345" 
y="350" 
class="s6_354"
>.</text>

<text 
x="353" 
y="350" 
class="s4_354"
>popleft</text>

<text 
x="408" 
y="350" 
class="s6_354"
>()</text>

<text 
x="448" 
y="350" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0" 
class="s7_354"
># remove the user who's</text>

<text 
x="140" 
y="366" 
class="s4_354"
>user_id</text>

<text 
x="203" 
y="366" 
class="s6_354"
>=</text>

<text 
x="219" 
y="366" 
class="s4_354"
>user</text>

<text 
x="250" 
y="366" 
class="s6_354"
>[</text>

<text 
x="258" 
y="366" 
class="s8_354"
>"id"</text>

<text 
x="290" 
y="366" 
class="s6_354"
>]</text>

<text 
x="448" 
y="366" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0" 
class="s7_354"
># first in the queue</text>

<text 
x="140" 
y="397" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0" 
class="s7_354"
># because of the way we're adding to the queue,</text>

<text 
x="140" 
y="412" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s7_354"
># necessarily we already know some shortest paths to prev_user</text>

<text 
x="140" 
y="428" 
class="s4_354"
>paths_to_prev_user</text>

<text 
x="290" 
y="428" 
class="s6_354"
>=</text>

<text 
x="306" 
y="428" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="440" 
y="428" 
class="s6_354"
>[</text>

<text 
x="448" 
y="428" 
class="s4_354"
>prev_user</text>

<text 
x="519" 
y="428" 
class="s6_354"
>[</text>

<text 
x="527" 
y="428" 
class="s8_354"
>"id"</text>

<text 
x="559" 
y="428" 
class="s6_354"
>]]</text>

<text 
x="140" 
y="443" 
class="s4_354"
>new_paths_to_user</text>

<text 
x="282" 
y="443" 
dx="0,0,4.6" 
class="s6_354"
>= [</text>

<text 
x="306" 
y="443" 
class="s4_354"
>path</text>

<text 
x="345" 
y="443" 
dx="0,0,4.6" 
class="s6_354"
>+ [</text>

<text 
x="369" 
y="443" 
class="s4_354"
>user_id</text>

<text 
x="424" 
y="443" 
class="s6_354"
>]</text>

<text 
x="440" 
y="443" 
class="s2_354"
>for</text>

<text 
x="472" 
y="443" 
class="s4_354"
>path</text>

<text 
x="511" 
y="443" 
class="s9_354"
>in</text>

<text 
x="535" 
y="443" 
class="s4_354"
>paths_to_prev_user</text>

<text 
x="677" 
y="443" 
class="s6_354"
>]</text>

<text 
x="140" 
y="474" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s7_354"
># it's possible we already know a shortest path</text>

<text 
x="140" 
y="489" 
class="s4_354"
>old_paths_to_user</text>

<text 
x="282" 
y="489" 
class="s6_354"
>=</text>

<text 
x="298" 
y="489" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="432" 
y="489" 
class="s6_354"
>.</text>

<text 
x="440" 
y="489" 
class="s4_354"
>get</text>

<text 
x="464" 
y="489" 
class="s6_354"
>(</text>

<text 
x="472" 
y="489" 
class="s4_354"
>user_id</text>

<text 
x="527" 
y="489" 
dx="0,0,4.6,0,0" 
class="s6_354"
>, [])</text>

<text 
x="140" 
y="520" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0" 
class="s7_354"
># what's the shortest path to here that we've seen so far?</text>

<text 
x="140" 
y="535" 
class="s2_354"
>if</text>

<text 
x="163" 
y="535" 
class="s4_354"
>old_paths_to_user</text>

<text 
x="298" 
y="535" 
class="s6_354"
>:</text>

<text 
x="171" 
y="551" 
class="s4_354"
>min_path_length</text>

<text 
x="298" 
y="551" 
class="s6_354"
>=</text>

<text 
x="314" 
y="551" 
class="s10_354"
>len</text>

<text 
x="337" 
y="551" 
class="s6_354"
>(</text>

<text 
x="345" 
y="551" 
class="s4_354"
>old_paths_to_user</text>

<text 
x="480" 
y="551" 
class="s6_354"
>[</text>

<text 
x="487" 
y="551" 
class="s11_354"
>0</text>

<text 
x="495" 
y="551" 
class="s6_354"
>])</text>

<text 
x="140" 
y="566" 
class="s2_354"
>else</text>

<text 
x="171" 
y="566" 
class="s6_354"
>:</text>

<text 
x="171" 
y="582" 
class="s4_354"
>min_path_length</text>

<text 
x="298" 
y="582" 
class="s6_354"
>=</text>

<text 
x="314" 
y="582" 
class="s10_354"
>float</text>

<text 
x="353" 
y="582" 
class="s6_354"
>(</text>

<text 
x="361" 
y="582" 
class="s8_354"
>'inf'</text>

<text 
x="401" 
y="582" 
class="s6_354"
>)</text>

<text 
x="140" 
y="612" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0" 
class="s7_354"
># only keep paths that aren't too long and are actually new</text>

<text 
x="140" 
y="628" 
class="s4_354"
>new_paths_to_user</text>

<text 
x="282" 
y="628" 
dx="0,0,4.6" 
class="s6_354"
>= [</text>

<text 
x="306" 
y="628" 
class="s4_354"
>path</text>

<text 
x="306" 
y="643" 
class="s2_354"
>for</text>

<text 
x="337" 
y="643" 
class="s4_354"
>path</text>

<text 
x="377" 
y="643" 
class="s9_354"
>in</text>

<text 
x="401" 
y="643" 
class="s4_354"
>new_paths_to_user</text>

<text 
x="306" 
y="659" 
class="s2_354"
>if</text>

<text 
x="329" 
y="659" 
class="s10_354"
>len</text>

<text 
x="353" 
y="659" 
class="s6_354"
>(</text>

<text 
x="361" 
y="659" 
class="s4_354"
>path</text>

<text 
x="393" 
y="659" 
dx="0,0,4.6,0" 
class="s6_354"
>) &lt;=</text>

<text 
x="432" 
y="659" 
class="s4_354"
>min_path_length</text>

<text 
x="306" 
y="674" 
class="s9_354"
>and</text>

<text 
x="337" 
y="674" 
class="s4_354"
>path</text>

<text 
x="377" 
y="674" 
dx="0,0,0,0,4.6,0" 
class="s9_354"
>not in</text>

<text 
x="432" 
y="674" 
class="s4_354"
>old_paths_to_user</text>

<text 
x="567" 
y="674" 
class="s6_354"
>]</text>

<text 
x="140" 
y="705" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="274" 
y="705" 
class="s6_354"
>[</text>

<text 
x="282" 
y="705" 
class="s4_354"
>user_id</text>

<text 
x="337" 
y="705" 
dx="0,0,4.6" 
class="s6_354"
>] =</text>

<text 
x="369" 
y="705" 
class="s4_354"
>old_paths_to_user</text>

<text 
x="511" 
y="705" 
class="s6_354"
>+</text>

<text 
x="527" 
y="705" 
class="s4_354"
>new_paths_to_user</text>

<text 
x="140" 
y="736" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s7_354"
># add never-seen neighbors to the frontier</text>

<text 
x="140" 
y="751" 
class="s4_354"
>frontier</text>

<text 
x="203" 
y="751" 
class="s6_354"
>.</text>

<text 
x="211" 
y="751" 
class="s4_354"
>extend</text>

<text 
x="258" 
y="751" 
class="s6_354"
>((</text>

<text 
x="274" 
y="751" 
class="s4_354"
>user</text>

<text 
x="306" 
y="751" 
class="s6_354"
>,</text>

<text 
x="322" 
y="751" 
class="s4_354"
>friend</text>

<text 
x="369" 
y="751" 
class="s6_354"
>)</text>

<text 
x="266" 
y="766" 
class="s2_354"
>for</text>

<text 
x="298" 
y="766" 
class="s4_354"
>friend</text>

<text 
x="353" 
y="766" 
class="s9_354"
>in</text>

<text 
x="377" 
y="766" 
class="s4_354"
>user</text>

<text 
x="408" 
y="766" 
class="s6_354"
>[</text>

<text 
x="416" 
y="766" 
class="s8_354"
>"friends"</text>

<text 
x="487" 
y="766" 
class="s6_354"
>]</text>

<text 
x="266" 
y="782" 
class="s2_354"
>if</text>

<text 
x="290" 
y="782" 
class="s4_354"
>friend</text>

<text 
x="337" 
y="782" 
class="s6_354"
>[</text>

<text 
x="345" 
y="782" 
class="s8_354"
>"id"</text>

<text 
x="377" 
y="782" 
class="s6_354"
>]</text>

<text 
x="393" 
y="782" 
dx="0,0,0,0,4.6,0" 
class="s9_354"
>not in</text>

<text 
x="448" 
y="782" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="582" 
y="782" 
class="s6_354"
>)</text>

<text 
x="108" 
y="813" 
class="s2_354"
>return</text>

<text 
x="163" 
y="813" 
class="s4_354"
>shortest_paths_to</text>

<text 
x="55" 
y="865" 
class="s1_354"
>Now we can store these</text>

<text 
x="269" 
y="865" 
class="s12_354"
>dict</text>

<text 
x="311" 
y="865" 
class="s1_354"
>s with each node:</text>

<text 
x="76" 
y="913" 
class="s2_354"
>for</text>

<text 
x="108" 
y="913" 
class="s4_354"
>user</text>

<text 
x="148" 
y="913" 
class="s9_354"
>in</text>

<text 
x="171" 
y="913" 
class="s4_354"
>users</text>

<text 
x="211" 
y="913" 
class="s6_354"
>:</text>

<text 
x="108" 
y="928" 
class="s4_354"
>user</text>

<text 
x="140" 
y="928" 
class="s6_354"
>[</text>

<text 
x="148" 
y="928" 
class="s8_354"
>"shortest_paths"</text>

<text 
x="274" 
y="928" 
dx="0,0,4.6" 
class="s6_354"
>] =</text>

<text 
x="306" 
y="928" 
class="s4_354"
>shortest_paths_from</text>

<text 
x="456" 
y="928" 
class="s6_354"
>(</text>

<text 
x="464" 
y="928" 
class="s4_354"
>user</text>

<text 
x="495" 
y="928" 
class="s6_354"
>)</text>

<text 
x="55" 
y="981" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_354"
>And we’re finally ready to compute betweenness centrality. For every pair of nodes</text>

<text 
x="794" 
y="981" 
class="s13_354"
>i</text>

<text 
x="806" 
y="981" 
class="s1_354"
>and</text>

<text 
x="55" 
y="1008" 
class="s13_354"
>j</text>

<text 
x="61" 
y="1008" 
class="s1_354"
>, we know the</text>

<text 
x="189" 
y="1008" 
class="s13_354"
>n</text>

<text 
x="206" 
y="1008" 
class="s1_354"
>shortest paths from</text>

<text 
x="380" 
y="1008" 
class="s13_354"
>i</text>

<text 
x="392" 
y="1008" 
class="s1_354"
>to</text>

<text 
x="414" 
y="1008" 
class="s13_354"
>j</text>

<text 
x="420" 
y="1008" 
class="s1_354"
>. Then, for each of those paths, we just add</text>

<text 
x="803" 
y="1008" 
class="s13_354"
>1/n</text>

<text 
x="837" 
y="1008" 
class="s1_354"
>to</text>

<text 
x="55" 
y="1036" 
class="s1_354"
>the centrality of each node on that path:</text>

<text 
x="76" 
y="1081" 
class="s2_354"
>for</text>

<text 
x="108" 
y="1081" 
class="s4_354"
>user</text>

<text 
x="148" 
y="1081" 
class="s9_354"
>in</text>

<text 
x="171" 
y="1081" 
class="s4_354"
>users</text>

<text 
x="211" 
y="1081" 
class="s6_354"
>:</text>

<text 
x="108" 
y="1096" 
class="s4_354"
>user</text>

<text 
x="140" 
y="1096" 
class="s6_354"
>[</text>

<text 
x="148" 
y="1096" 
class="s8_354"
>"betweenness_centrality"</text>

<text 
x="337" 
y="1096" 
dx="0,0,4.6" 
class="s6_354"
>] =</text>

<text 
x="369" 
y="1096" 
class="s11_354"
>0.0</text>

<text 
x="76" 
y="1127" 
class="s2_354"
>for</text>

<text 
x="108" 
y="1127" 
class="s4_354"
>source</text>

<text 
x="163" 
y="1127" 
class="s9_354"
>in</text>

<text 
x="187" 
y="1127" 
class="s4_354"
>users</text>

<text 
x="227" 
y="1127" 
class="s6_354"
>:</text>

<text 
x="108" 
y="1143" 
class="s4_354"
>source_id</text>

<text 
x="187" 
y="1143" 
class="s6_354"
>=</text>

<text 
x="203" 
y="1143" 
class="s4_354"
>source</text>

<text 
x="250" 
y="1143" 
class="s6_354"
>[</text>

<text 
x="258" 
y="1143" 
class="s8_354"
>"id"</text>

<text 
x="290" 
y="1143" 
class="s6_354"
>]</text>

<text 
x="108" 
y="1158" 
class="s2_354"
>for</text>

<text 
x="140" 
y="1158" 
class="s4_354"
>target_id</text>

<text 
x="211" 
y="1158" 
class="s6_354"
>,</text>

<text 
x="227" 
y="1158" 
class="s4_354"
>paths</text>

<text 
x="274" 
y="1158" 
class="s9_354"
>in</text>

<text 
x="298" 
y="1158" 
class="s4_354"
>source</text>

<text 
x="345" 
y="1158" 
class="s6_354"
>[</text>

<text 
x="353" 
y="1158" 
class="s8_354"
>"shortest_paths"</text>

<text 
x="480" 
y="1158" 
class="s6_354"
>].</text>

<text 
x="495" 
y="1158" 
class="s4_354"
>iteritems</text>

<text 
x="567" 
y="1158" 
class="s6_354"
>():</text>

<text 
x="140" 
y="1173" 
class="s2_354"
>if</text>

<text 
x="163" 
y="1173" 
class="s4_354"
>source_id</text>

<text 
x="242" 
y="1173" 
class="s6_354"
>&lt;</text>

<text 
x="258" 
y="1173" 
class="s4_354"
>target_id</text>

<text 
x="329" 
y="1173" 
class="s6_354"
>:</text>

<text 
x="385" 
y="1173" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s7_354"
># don't double count</text>

<text 
x="171" 
y="1189" 
class="s4_354"
>num_paths</text>

<text 
x="250" 
y="1189" 
class="s6_354"
>=</text>

<text 
x="266" 
y="1189" 
class="s10_354"
>len</text>

<text 
x="290" 
y="1189" 
class="s6_354"
>(</text>

<text 
x="298" 
y="1189" 
class="s4_354"
>paths</text>

<text 
x="337" 
y="1189" 
class="s6_354"
>)</text>

<text 
x="385" 
y="1189" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s7_354"
># how many shortest paths?</text>

<text 
x="171" 
y="1204" 
class="s4_354"
>contrib</text>

<text 
x="235" 
y="1204" 
class="s6_354"
>=</text>

<text 
x="250" 
y="1204" 
class="s11_354"
>1</text>

<text 
x="266" 
y="1204" 
class="s6_354"
>/</text>

<text 
x="282" 
y="1204" 
class="s4_354"
>num_paths</text>

<text 
x="385" 
y="1204" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s7_354"
># contribution to centrality</text>

<text 
x="171" 
y="1220" 
class="s2_354"
>for</text>

<text 
x="203" 
y="1220" 
class="s4_354"
>path</text>

<text 
x="242" 
y="1220" 
class="s9_354"
>in</text>

<text 
x="266" 
y="1220" 
class="s4_354"
>paths</text>

<text 
x="306" 
y="1220" 
class="s6_354"
>:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
