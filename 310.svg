<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 310 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_310{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s2_310{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s3_310{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_310{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s5_310{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_310{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s7_310{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s8_310{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s9_310{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s10_310{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="76" 
y="80" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s1_310"
># the network starts out with random weights</text>

<text 
x="76" 
y="95" 
class="s2_310"
>network</text>

<text 
x="140" 
y="95" 
dx="0,0,4.6" 
class="s3_310"
>= [</text>

<text 
x="163" 
y="95" 
class="s2_310"
>hidden_layer</text>

<text 
x="258" 
y="95" 
class="s3_310"
>,</text>

<text 
x="274" 
y="95" 
class="s2_310"
>output_layer</text>

<text 
x="369" 
y="95" 
class="s3_310"
>]</text>

<text 
x="55" 
y="148" 
class="s4_310"
>And we can train it using the backpropagation algorithm:</text>

<text 
x="76" 
y="193" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s1_310"
># 10,000 iterations seems enough to converge</text>

<text 
x="76" 
y="209" 
class="s5_310"
>for</text>

<text 
x="108" 
y="209" 
class="s2_310"
>__</text>

<text 
x="132" 
y="209" 
class="s6_310"
>in</text>

<text 
x="156" 
y="209" 
class="s7_310"
>range</text>

<text 
x="195" 
y="209" 
class="s3_310"
>(</text>

<text 
x="203" 
y="209" 
class="s8_310"
>10000</text>

<text 
x="242" 
y="209" 
class="s3_310"
>):</text>

<text 
x="108" 
y="224" 
class="s5_310"
>for</text>

<text 
x="140" 
y="224" 
class="s2_310"
>input_vector</text>

<text 
x="235" 
y="224" 
class="s3_310"
>,</text>

<text 
x="250" 
y="224" 
class="s2_310"
>target_vector</text>

<text 
x="361" 
y="224" 
class="s6_310"
>in</text>

<text 
x="385" 
y="224" 
class="s7_310"
>zip</text>

<text 
x="408" 
y="224" 
class="s3_310"
>(</text>

<text 
x="416" 
y="224" 
class="s2_310"
>inputs</text>

<text 
x="464" 
y="224" 
class="s3_310"
>,</text>

<text 
x="480" 
y="224" 
class="s2_310"
>targets</text>

<text 
x="535" 
y="224" 
class="s3_310"
>):</text>

<text 
x="140" 
y="239" 
class="s2_310"
>backpropagate</text>

<text 
x="242" 
y="239" 
class="s3_310"
>(</text>

<text 
x="250" 
y="239" 
class="s2_310"
>network</text>

<text 
x="306" 
y="239" 
class="s3_310"
>,</text>

<text 
x="322" 
y="239" 
class="s2_310"
>input_vector</text>

<text 
x="416" 
y="239" 
class="s3_310"
>,</text>

<text 
x="432" 
y="239" 
class="s2_310"
>target_vector</text>

<text 
x="535" 
y="239" 
class="s3_310"
>)</text>

<text 
x="55" 
y="292" 
class="s4_310"
>It works well on the training set, obviously:</text>

<text 
x="76" 
y="337" 
class="s5_310"
>def</text>

<text 
x="108" 
y="337" 
class="s9_310"
>predict</text>

<text 
x="163" 
y="337" 
class="s3_310"
>(</text>

<text 
x="171" 
y="337" 
class="s7_310"
>input</text>

<text 
x="211" 
y="337" 
class="s3_310"
>):</text>

<text 
x="108" 
y="353" 
class="s5_310"
>return</text>

<text 
x="163" 
y="353" 
class="s2_310"
>feed_forward</text>

<text 
x="258" 
y="353" 
class="s3_310"
>(</text>

<text 
x="266" 
y="353" 
class="s2_310"
>network</text>

<text 
x="322" 
y="353" 
class="s3_310"
>,</text>

<text 
x="337" 
y="353" 
class="s7_310"
>input</text>

<text 
x="377" 
y="353" 
class="s3_310"
>)[-</text>

<text 
x="401" 
y="353" 
class="s8_310"
>1</text>

<text 
x="408" 
y="353" 
class="s3_310"
>]</text>

<text 
x="76" 
y="383" 
class="s2_310"
>predict</text>

<text 
x="132" 
y="383" 
class="s3_310"
>(</text>

<text 
x="140" 
y="383" 
class="s2_310"
>inputs</text>

<text 
x="187" 
y="383" 
class="s3_310"
>[</text>

<text 
x="195" 
y="383" 
class="s8_310"
>7</text>

<text 
x="203" 
y="383" 
class="s3_310"
>])</text>

<text 
x="76" 
y="399" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0" 
class="s1_310"
># [0.026, 0.0, 0.0, 0.018, 0.001, 0.0, 0.0, 0.967, 0.0, 0.0]</text>

<text 
x="55" 
y="452" 
class="s4_310"
>Which indicates that the digit 7 output neuron produces 0.97, while all the other output</text>

<text 
x="55" 
y="479" 
class="s4_310"
>neurons produce very small numbers.</text>

<text 
x="55" 
y="518" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>But we can also apply it to differently drawn digits, like my stylized 3:</text>

<text 
x="76" 
y="563" 
class="s2_310"
>predict</text>

<text 
x="132" 
y="563" 
class="s3_310"
>([</text>

<text 
x="148" 
y="563" 
class="s8_310"
>0</text>

<text 
x="156" 
y="563" 
class="s3_310"
>,</text>

<text 
x="163" 
y="563" 
class="s8_310"
>1</text>

<text 
x="171" 
y="563" 
class="s3_310"
>,</text>

<text 
x="179" 
y="563" 
class="s8_310"
>1</text>

<text 
x="187" 
y="563" 
class="s3_310"
>,</text>

<text 
x="195" 
y="563" 
class="s8_310"
>1</text>

<text 
x="203" 
y="563" 
class="s3_310"
>,</text>

<text 
x="211" 
y="563" 
class="s8_310"
>0</text>

<text 
x="219" 
y="563" 
class="s3_310"
>,</text>

<text 
x="242" 
y="563" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># .@@@.</text>

<text 
x="148" 
y="578" 
class="s8_310"
>0</text>

<text 
x="156" 
y="578" 
class="s3_310"
>,</text>

<text 
x="163" 
y="578" 
class="s8_310"
>0</text>

<text 
x="171" 
y="578" 
class="s3_310"
>,</text>

<text 
x="179" 
y="578" 
class="s8_310"
>0</text>

<text 
x="187" 
y="578" 
class="s3_310"
>,</text>

<text 
x="195" 
y="578" 
class="s8_310"
>1</text>

<text 
x="203" 
y="578" 
class="s3_310"
>,</text>

<text 
x="211" 
y="578" 
class="s8_310"
>1</text>

<text 
x="219" 
y="578" 
class="s3_310"
>,</text>

<text 
x="242" 
y="578" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># ...@@</text>

<text 
x="148" 
y="594" 
class="s8_310"
>0</text>

<text 
x="156" 
y="594" 
class="s3_310"
>,</text>

<text 
x="163" 
y="594" 
class="s8_310"
>0</text>

<text 
x="171" 
y="594" 
class="s3_310"
>,</text>

<text 
x="179" 
y="594" 
class="s8_310"
>1</text>

<text 
x="187" 
y="594" 
class="s3_310"
>,</text>

<text 
x="195" 
y="594" 
class="s8_310"
>1</text>

<text 
x="203" 
y="594" 
class="s3_310"
>,</text>

<text 
x="211" 
y="594" 
class="s8_310"
>0</text>

<text 
x="219" 
y="594" 
class="s3_310"
>,</text>

<text 
x="242" 
y="594" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># ..@@.</text>

<text 
x="148" 
y="609" 
class="s8_310"
>0</text>

<text 
x="156" 
y="609" 
class="s3_310"
>,</text>

<text 
x="163" 
y="609" 
class="s8_310"
>0</text>

<text 
x="171" 
y="609" 
class="s3_310"
>,</text>

<text 
x="179" 
y="609" 
class="s8_310"
>0</text>

<text 
x="187" 
y="609" 
class="s3_310"
>,</text>

<text 
x="195" 
y="609" 
class="s8_310"
>1</text>

<text 
x="203" 
y="609" 
class="s3_310"
>,</text>

<text 
x="211" 
y="609" 
class="s8_310"
>1</text>

<text 
x="219" 
y="609" 
class="s3_310"
>,</text>

<text 
x="242" 
y="609" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># ...@@</text>

<text 
x="148" 
y="624" 
class="s8_310"
>0</text>

<text 
x="156" 
y="624" 
class="s3_310"
>,</text>

<text 
x="163" 
y="624" 
class="s8_310"
>1</text>

<text 
x="171" 
y="624" 
class="s3_310"
>,</text>

<text 
x="179" 
y="624" 
class="s8_310"
>1</text>

<text 
x="187" 
y="624" 
class="s3_310"
>,</text>

<text 
x="195" 
y="624" 
class="s8_310"
>1</text>

<text 
x="203" 
y="624" 
class="s3_310"
>,</text>

<text 
x="211" 
y="624" 
class="s8_310"
>0</text>

<text 
x="219" 
y="624" 
class="s3_310"
>])</text>

<text 
x="242" 
y="624" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># .@@@.</text>

<text 
x="76" 
y="655" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0" 
class="s1_310"
># [0.0, 0.0, 0.0, 0.92, 0.0, 0.0, 0.0, 0.01, 0.0, 0.12]</text>

<text 
x="55" 
y="708" 
class="s4_310"
>The network still thinks it looks like a 3, whereas my stylized 8 gets votes for being a 5, an</text>

<text 
x="55" 
y="736" 
class="s4_310"
>8, and a 9:</text>

<text 
x="76" 
y="781" 
class="s2_310"
>predict</text>

<text 
x="132" 
y="781" 
class="s3_310"
>([</text>

<text 
x="148" 
y="781" 
class="s8_310"
>0</text>

<text 
x="156" 
y="781" 
class="s3_310"
>,</text>

<text 
x="163" 
y="781" 
class="s8_310"
>1</text>

<text 
x="171" 
y="781" 
class="s3_310"
>,</text>

<text 
x="179" 
y="781" 
class="s8_310"
>1</text>

<text 
x="187" 
y="781" 
class="s3_310"
>,</text>

<text 
x="195" 
y="781" 
class="s8_310"
>1</text>

<text 
x="203" 
y="781" 
class="s3_310"
>,</text>

<text 
x="211" 
y="781" 
class="s8_310"
>0</text>

<text 
x="219" 
y="781" 
class="s3_310"
>,</text>

<text 
x="242" 
y="781" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># .@@@.</text>

<text 
x="148" 
y="796" 
class="s8_310"
>1</text>

<text 
x="156" 
y="796" 
class="s3_310"
>,</text>

<text 
x="163" 
y="796" 
class="s8_310"
>0</text>

<text 
x="171" 
y="796" 
class="s3_310"
>,</text>

<text 
x="179" 
y="796" 
class="s8_310"
>0</text>

<text 
x="187" 
y="796" 
class="s3_310"
>,</text>

<text 
x="195" 
y="796" 
class="s8_310"
>1</text>

<text 
x="203" 
y="796" 
class="s3_310"
>,</text>

<text 
x="211" 
y="796" 
class="s8_310"
>1</text>

<text 
x="219" 
y="796" 
class="s3_310"
>,</text>

<text 
x="242" 
y="796" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># @..@@</text>

<text 
x="148" 
y="811" 
class="s8_310"
>0</text>

<text 
x="156" 
y="811" 
class="s3_310"
>,</text>

<text 
x="163" 
y="811" 
class="s8_310"
>1</text>

<text 
x="171" 
y="811" 
class="s3_310"
>,</text>

<text 
x="179" 
y="811" 
class="s8_310"
>1</text>

<text 
x="187" 
y="811" 
class="s3_310"
>,</text>

<text 
x="195" 
y="811" 
class="s8_310"
>1</text>

<text 
x="203" 
y="811" 
class="s3_310"
>,</text>

<text 
x="211" 
y="811" 
class="s8_310"
>0</text>

<text 
x="219" 
y="811" 
class="s3_310"
>,</text>

<text 
x="242" 
y="811" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># .@@@.</text>

<text 
x="148" 
y="827" 
class="s8_310"
>1</text>

<text 
x="156" 
y="827" 
class="s3_310"
>,</text>

<text 
x="163" 
y="827" 
class="s8_310"
>0</text>

<text 
x="171" 
y="827" 
class="s3_310"
>,</text>

<text 
x="179" 
y="827" 
class="s8_310"
>0</text>

<text 
x="187" 
y="827" 
class="s3_310"
>,</text>

<text 
x="195" 
y="827" 
class="s8_310"
>1</text>

<text 
x="203" 
y="827" 
class="s3_310"
>,</text>

<text 
x="211" 
y="827" 
class="s8_310"
>1</text>

<text 
x="219" 
y="827" 
class="s3_310"
>,</text>

<text 
x="242" 
y="827" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># @..@@</text>

<text 
x="148" 
y="842" 
class="s8_310"
>0</text>

<text 
x="156" 
y="842" 
class="s3_310"
>,</text>

<text 
x="163" 
y="842" 
class="s8_310"
>1</text>

<text 
x="171" 
y="842" 
class="s3_310"
>,</text>

<text 
x="179" 
y="842" 
class="s8_310"
>1</text>

<text 
x="187" 
y="842" 
class="s3_310"
>,</text>

<text 
x="195" 
y="842" 
class="s8_310"
>1</text>

<text 
x="203" 
y="842" 
class="s3_310"
>,</text>

<text 
x="211" 
y="842" 
class="s8_310"
>0</text>

<text 
x="219" 
y="842" 
class="s3_310"
>])</text>

<text 
x="242" 
y="842" 
dx="0,0,4.6,0,0,0,0" 
class="s1_310"
># .@@@.</text>

<text 
x="76" 
y="873" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0" 
class="s1_310"
># [0.0, 0.0, 0.0, 0.0, 0.0, 0.55, 0.0, 0.0, 0.93, 1.0]</text>

<text 
x="55" 
y="926" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>Having a larger training set would probably help.</text>

<text 
x="55" 
y="964" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>Although the network’s operation is not exactly transparent, we can inspect the weights of</text>

<text 
x="55" 
y="992" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>the hidden layer to get a sense of what they’re recognizing. In particular, we can plot the</text>

<text 
x="55" 
y="1019" 
class="s4_310"
>weights of each neuron as a 5 × 5 grid corresponding to the 5 × 5 inputs.</text>

<text 
x="55" 
y="1058" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>In real life you’d probably want to plot zero weights as white, with larger positive weights</text>

<text 
x="55" 
y="1085" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>more and more (say) green and larger negative weights more and more (say) red.</text>

<text 
x="55" 
y="1113" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>Unfortunately, that’s hard to do in a black-and-white book.</text>

<text 
x="55" 
y="1151" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>Instead, we’ll plot zero weights as white, with far-away-from-zero weights darker and</text>

<text 
x="55" 
y="1179" 
dx="0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>darker. And we’ll use crosshatching to indicate negative weights.</text>

<text 
x="55" 
y="1217" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>To do this we’ll use</text>

<text 
x="233" 
y="1217" 
class="s10_310"
>pyplot.imshow</text>

<text 
x="370" 
y="1217" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s4_310"
>, which we haven’t seen before. With it we can plot</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
