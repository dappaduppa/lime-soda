<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 403 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_403{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_403{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_403{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s4_403{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_403{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_403{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s7_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s8_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s10_403{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s11_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s12_403{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s13_403{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s14_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s15_403{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_403"
>Example: Matrix Multiplication</text>

<text 
x="55" 
y="125" 
class="s2_403"
>Recall from</text>

<text 
x="164" 
y="125" 
class="s3_403"
>“Matrix Multiplication”</text>

<text 
x="380" 
y="125" 
class="s2_403"
>that given a</text>

<image preserveAspectRatio="none" x="489" y="106" width="78" height="19" xlink:href="403/img/1.png" />
<text 
x="572" 
y="125" 
class="s2_403"
>matrix</text>

<text 
x="635" 
y="125" 
class="s4_403"
>A</text>

<text 
x="654" 
y="125" 
class="s2_403"
>and a</text>

<image preserveAspectRatio="none" x="707" y="101" width="72" height="24" xlink:href="403/img/2.png" />
<text 
x="783" 
y="125" 
class="s2_403"
>matrix</text>

<text 
x="55" 
y="156" 
class="s4_403"
>B</text>

<text 
x="68" 
y="156" 
class="s2_403"
>, we can multiply them to form a</text>

<image preserveAspectRatio="none" x="362" y="132" width="79" height="24" xlink:href="403/img/3.png" />
<text 
x="446" 
y="156" 
class="s2_403"
>matrix</text>

<text 
x="509" 
y="156" 
class="s4_403"
>C</text>

<text 
x="524" 
y="156" 
class="s2_403"
>, where the element of</text>

<text 
x="725" 
y="156" 
class="s4_403"
>C</text>

<text 
x="745" 
y="156" 
class="s2_403"
>in row</text>

<text 
x="808" 
y="156" 
class="s4_403"
>i</text>

<text 
x="819" 
y="156" 
class="s2_403"
>and</text>

<text 
x="55" 
y="183" 
class="s2_403"
>column</text>

<text 
x="126" 
y="183" 
class="s4_403"
>j</text>

<text 
x="138" 
y="183" 
class="s2_403"
>is given by:</text>

<image preserveAspectRatio="none" x="55" y="201" width="799" height="63" xlink:href="403/img/4.png" />
<text 
x="55" 
y="295" 
class="s2_403"
>As we’ve seen, a “natural” way to represent a</text>

<image preserveAspectRatio="none" x="462" y="276" width="78" height="20" xlink:href="403/img/5.png" />
<text 
x="545" 
y="295" 
class="s2_403"
>matrix is with a</text>

<text 
x="687" 
y="295" 
class="s5_403"
>list</text>

<text 
x="735" 
y="295" 
class="s2_403"
>of</text>

<text 
x="759" 
y="295" 
class="s5_403"
>list</text>

<text 
x="801" 
y="295" 
class="s2_403"
>s,</text>

<text 
x="55" 
y="334" 
class="s2_403"
>where the element</text>

<image preserveAspectRatio="none" x="222" y="305" width="32" height="29" xlink:href="403/img/6.png" />
<text 
x="259" 
y="334" 
class="s2_403"
>is the</text>

<text 
x="311" 
y="334" 
class="s4_403"
>j</text>

<text 
x="317" 
y="334" 
class="s2_403"
>th element of the</text>

<text 
x="471" 
y="334" 
class="s4_403"
>i</text>

<text 
x="477" 
y="334" 
class="s2_403"
>th list.</text>

<text 
x="55" 
y="372" 
dx="0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_403"
>But large matrices are sometimes</text>

<text 
x="353" 
y="372" 
class="s4_403"
>sparse</text>

<text 
x="410" 
y="372" 
class="s2_403"
>, which means that most of their elements equal</text>

<text 
x="55" 
y="400" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0" 
class="s2_403"
>zero. For large sparse matrices, a list of lists can be a very wasteful representation. A more</text>

<text 
x="55" 
y="428" 
class="s2_403"
>compact representation is a list of tuples</text>

<text 
x="414" 
y="428" 
dx="0,0,0,0,0,0,0,6.1,0,0,6.1,0,0,6.1,0,0,0,0,0" 
class="s5_403"
>(name, i, j, value)</text>

<text 
x="620" 
y="428" 
class="s2_403"
>where</text>

<text 
x="679" 
y="428" 
class="s5_403"
>name</text>

<text 
x="727" 
y="428" 
class="s2_403"
>identifies the</text>

<text 
x="55" 
y="457" 
class="s2_403"
>matrix, and where</text>

<text 
x="219" 
y="457" 
dx="0,0,0,6.1,0,0,6.1,0,0,0,0" 
class="s5_403"
>i, j, value</text>

<text 
x="341" 
y="457" 
class="s2_403"
>indicates a location with nonzero value.</text>

<text 
x="55" 
y="498" 
class="s2_403"
>For example, a billion × billion matrix has a</text>

<text 
x="448" 
y="498" 
class="s4_403"
>quintillion</text>

<text 
x="545" 
y="498" 
class="s2_403"
>entries, which would not be easy</text>

<text 
x="55" 
y="525" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0" 
class="s2_403"
>to store on a computer. But if there are only a few nonzero entries in each row, this</text>

<text 
x="55" 
y="553" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_403"
>alternative representation is many orders of magnitude smaller.</text>

<text 
x="55" 
y="591" 
class="s2_403"
>Given this sort of representation, it turns out that we can use MapReduce to perform</text>

<text 
x="55" 
y="619" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_403"
>matrix multiplication in a distributed manner.</text>

<text 
x="55" 
y="666" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_403"
>To motivate our algorithm, notice that each element</text>

<image preserveAspectRatio="none" x="516" y="637" width="32" height="30" xlink:href="403/img/7.png" />
<text 
x="552" 
y="666" 
class="s2_403"
>is only used to compute the</text>

<text 
x="55" 
y="703" 
class="s2_403"
>elements of</text>

<text 
x="162" 
y="703" 
class="s4_403"
>C</text>

<text 
x="182" 
y="703" 
class="s2_403"
>in row</text>

<text 
x="244" 
y="703" 
class="s4_403"
>i</text>

<text 
x="250" 
y="703" 
class="s2_403"
>, and each element</text>

<image preserveAspectRatio="none" x="420" y="673" width="30" height="30" xlink:href="403/img/8.png" />
<text 
x="455" 
y="703" 
class="s2_403"
>is only used to compute the elements of</text>

<text 
x="809" 
y="703" 
class="s4_403"
>C</text>

<text 
x="829" 
y="703" 
class="s2_403"
>in</text>

<text 
x="55" 
y="730" 
class="s2_403"
>column</text>

<text 
x="126" 
y="730" 
class="s4_403"
>j</text>

<text 
x="132" 
y="730" 
class="s2_403"
>. Our goal will be for each output of our</text>

<text 
x="489" 
y="730" 
class="s5_403"
>reducer</text>

<text 
x="569" 
y="730" 
class="s2_403"
>to be a single entry of</text>

<text 
x="765" 
y="730" 
class="s4_403"
>C</text>

<text 
x="780" 
y="730" 
class="s2_403"
>, which</text>

<text 
x="55" 
y="760" 
class="s2_403"
>means we’ll need our mapper to emit keys identifying a single entry of</text>

<text 
x="683" 
y="760" 
class="s4_403"
>C</text>

<text 
x="697" 
y="760" 
class="s2_403"
>. This suggests</text>

<text 
x="55" 
y="787" 
class="s2_403"
>the following:</text>

<text 
x="76" 
y="832" 
class="s6_403"
>def</text>

<text 
x="108" 
y="832" 
class="s7_403"
>matrix_multiply_mapper</text>

<text 
x="282" 
y="832" 
class="s8_403"
>(</text>

<text 
x="290" 
y="832" 
class="s9_403"
>m</text>

<text 
x="298" 
y="832" 
class="s8_403"
>,</text>

<text 
x="314" 
y="832" 
class="s9_403"
>element</text>

<text 
x="369" 
y="832" 
class="s8_403"
>):</text>

<text 
x="108" 
y="848" 
dx="0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0" 
class="s10_403"
>"""m is the common dimension (columns of A, rows of B)</text>

<text 
x="108" 
y="863" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s10_403"
>element is a tuple (matrix_name, i, j, value)"""</text>

<text 
x="108" 
y="879" 
class="s9_403"
>name</text>

<text 
x="140" 
y="879" 
class="s8_403"
>,</text>

<text 
x="156" 
y="879" 
class="s9_403"
>i</text>

<text 
x="163" 
y="879" 
class="s8_403"
>,</text>

<text 
x="179" 
y="879" 
class="s9_403"
>j</text>

<text 
x="187" 
y="879" 
class="s8_403"
>,</text>

<text 
x="203" 
y="879" 
class="s9_403"
>value</text>

<text 
x="250" 
y="879" 
class="s8_403"
>=</text>

<text 
x="266" 
y="879" 
class="s9_403"
>element</text>

<text 
x="108" 
y="909" 
class="s6_403"
>if</text>

<text 
x="132" 
y="909" 
class="s9_403"
>name</text>

<text 
x="171" 
y="909" 
class="s8_403"
>==</text>

<text 
x="195" 
y="909" 
class="s11_403"
>"A"</text>

<text 
x="219" 
y="909" 
class="s8_403"
>:</text>

<text 
x="140" 
y="925" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s12_403"
># A_ij is the jth entry in the sum for each C_ik, k=1..m</text>

<text 
x="140" 
y="940" 
class="s6_403"
>for</text>

<text 
x="171" 
y="940" 
class="s9_403"
>k</text>

<text 
x="187" 
y="940" 
class="s13_403"
>in</text>

<text 
x="211" 
y="940" 
class="s14_403"
>range</text>

<text 
x="250" 
y="940" 
class="s8_403"
>(</text>

<text 
x="258" 
y="940" 
class="s9_403"
>m</text>

<text 
x="266" 
y="940" 
class="s8_403"
>):</text>

<text 
x="171" 
y="956" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0" 
class="s12_403"
># group with other entries for C_ik</text>

<text 
x="171" 
y="971" 
class="s6_403"
>yield</text>

<text 
x="211" 
y="971" 
class="s8_403"
>((</text>

<text 
x="227" 
y="971" 
class="s9_403"
>i</text>

<text 
x="235" 
y="971" 
class="s8_403"
>,</text>

<text 
x="250" 
y="971" 
class="s9_403"
>k</text>

<text 
x="258" 
y="971" 
dx="0,0,0,4.6" 
class="s8_403"
>), (</text>

<text 
x="290" 
y="971" 
class="s9_403"
>j</text>

<text 
x="298" 
y="971" 
class="s8_403"
>,</text>

<text 
x="314" 
y="971" 
class="s9_403"
>value</text>

<text 
x="353" 
y="971" 
class="s8_403"
>))</text>

<text 
x="108" 
y="986" 
class="s6_403"
>else</text>

<text 
x="140" 
y="986" 
class="s8_403"
>:</text>

<text 
x="140" 
y="1002" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0" 
class="s12_403"
># B_ij is the i-th entry in the sum for each C_kj</text>

<text 
x="140" 
y="1017" 
class="s6_403"
>for</text>

<text 
x="171" 
y="1017" 
class="s9_403"
>k</text>

<text 
x="187" 
y="1017" 
class="s13_403"
>in</text>

<text 
x="211" 
y="1017" 
class="s14_403"
>range</text>

<text 
x="250" 
y="1017" 
class="s8_403"
>(</text>

<text 
x="258" 
y="1017" 
class="s9_403"
>m</text>

<text 
x="266" 
y="1017" 
class="s8_403"
>):</text>

<text 
x="171" 
y="1033" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0" 
class="s12_403"
># group with other entries for C_kj</text>

<text 
x="171" 
y="1048" 
class="s6_403"
>yield</text>

<text 
x="211" 
y="1048" 
class="s8_403"
>((</text>

<text 
x="227" 
y="1048" 
class="s9_403"
>k</text>

<text 
x="235" 
y="1048" 
class="s8_403"
>,</text>

<text 
x="250" 
y="1048" 
class="s9_403"
>j</text>

<text 
x="258" 
y="1048" 
dx="0,0,0,4.6" 
class="s8_403"
>), (</text>

<text 
x="290" 
y="1048" 
class="s9_403"
>i</text>

<text 
x="298" 
y="1048" 
class="s8_403"
>,</text>

<text 
x="314" 
y="1048" 
class="s9_403"
>value</text>

<text 
x="353" 
y="1048" 
class="s8_403"
>))</text>

<text 
x="76" 
y="1079" 
class="s6_403"
>def</text>

<text 
x="108" 
y="1079" 
class="s7_403"
>matrix_multiply_reducer</text>

<text 
x="290" 
y="1079" 
class="s8_403"
>(</text>

<text 
x="298" 
y="1079" 
class="s9_403"
>m</text>

<text 
x="306" 
y="1079" 
class="s8_403"
>,</text>

<text 
x="322" 
y="1079" 
class="s9_403"
>key</text>

<text 
x="345" 
y="1079" 
class="s8_403"
>,</text>

<text 
x="361" 
y="1079" 
class="s9_403"
>indexed_values</text>

<text 
x="472" 
y="1079" 
class="s8_403"
>):</text>

<text 
x="108" 
y="1094" 
class="s9_403"
>results_by_index</text>

<text 
x="242" 
y="1094" 
class="s8_403"
>=</text>

<text 
x="258" 
y="1094" 
class="s9_403"
>defaultdict</text>

<text 
x="345" 
y="1094" 
class="s8_403"
>(</text>

<text 
x="353" 
y="1094" 
class="s14_403"
>list</text>

<text 
x="385" 
y="1094" 
class="s8_403"
>)</text>

<text 
x="108" 
y="1110" 
class="s6_403"
>for</text>

<text 
x="140" 
y="1110" 
class="s9_403"
>index</text>

<text 
x="179" 
y="1110" 
class="s8_403"
>,</text>

<text 
x="195" 
y="1110" 
class="s9_403"
>value</text>

<text 
x="242" 
y="1110" 
class="s13_403"
>in</text>

<text 
x="266" 
y="1110" 
class="s9_403"
>indexed_values</text>

<text 
x="377" 
y="1110" 
class="s8_403"
>:</text>

<text 
x="140" 
y="1125" 
class="s9_403"
>results_by_index</text>

<text 
x="266" 
y="1125" 
class="s8_403"
>[</text>

<text 
x="274" 
y="1125" 
class="s9_403"
>index</text>

<text 
x="314" 
y="1125" 
class="s8_403"
>].</text>

<text 
x="329" 
y="1125" 
class="s9_403"
>append</text>

<text 
x="377" 
y="1125" 
class="s8_403"
>(</text>

<text 
x="385" 
y="1125" 
class="s9_403"
>value</text>

<text 
x="424" 
y="1125" 
class="s8_403"
>)</text>

<text 
x="108" 
y="1156" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0" 
class="s12_403"
># sum up all the products of the positions with two results</text>

<text 
x="108" 
y="1171" 
class="s9_403"
>sum_product</text>

<text 
x="203" 
y="1171" 
class="s8_403"
>=</text>

<text 
x="219" 
y="1171" 
class="s14_403"
>sum</text>

<text 
x="242" 
y="1171" 
class="s8_403"
>(</text>

<text 
x="250" 
y="1171" 
class="s9_403"
>results</text>

<text 
x="306" 
y="1171" 
class="s8_403"
>[</text>

<text 
x="314" 
y="1171" 
class="s15_403"
>0</text>

<text 
x="322" 
y="1171" 
dx="0,0,4.6" 
class="s8_403"
>] *</text>

<text 
x="353" 
y="1171" 
class="s9_403"
>results</text>

<text 
x="408" 
y="1171" 
class="s8_403"
>[</text>

<text 
x="416" 
y="1171" 
class="s15_403"
>1</text>

<text 
x="424" 
y="1171" 
class="s8_403"
>]</text>

<text 
x="250" 
y="1187" 
class="s6_403"
>for</text>

<text 
x="282" 
y="1187" 
class="s9_403"
>results</text>

<text 
x="345" 
y="1187" 
class="s13_403"
>in</text>

<text 
x="369" 
y="1187" 
class="s9_403"
>results_by_index</text>

<text 
x="495" 
y="1187" 
class="s8_403"
>.</text>

<text 
x="503" 
y="1187" 
class="s9_403"
>values</text>

<text 
x="551" 
y="1187" 
class="s8_403"
>()</text>

<text 
x="250" 
y="1202" 
class="s6_403"
>if</text>

<text 
x="274" 
y="1202" 
class="s14_403"
>len</text>

<text 
x="298" 
y="1202" 
class="s8_403"
>(</text>

<text 
x="306" 
y="1202" 
class="s9_403"
>results</text>

<text 
x="361" 
y="1202" 
dx="0,0,4.6,0" 
class="s8_403"
>) ==</text>

<text 
x="401" 
y="1202" 
class="s15_403"
>2</text>

<text 
x="408" 
y="1202" 
class="s8_403"
>)</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
