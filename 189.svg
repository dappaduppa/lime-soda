<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 189 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_189{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_189{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_189{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_189{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s5_189{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_189{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s7_189{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_189{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s9_189{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_189{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s11_189{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s12_189{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s13_189{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s14_189{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_189"
>Cleaning and Munging</text>

<text 
x="55" 
y="122" 
class="s2_189"
>Real-world data is</text>

<text 
x="221" 
y="122" 
class="s3_189"
>dirty</text>

<text 
x="263" 
y="122" 
class="s2_189"
>. Often you’ll have to do some work on it before you can use it.</text>

<text 
x="55" 
y="149" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>We’ve seen examples of this in</text>

<text 
x="334" 
y="149" 
class="s4_189"
>Chapter 9</text>

<text 
x="420" 
y="149" 
dx="0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>. We have to convert strings to</text>

<text 
x="693" 
y="149" 
class="s5_189"
>float</text>

<text 
x="745" 
y="149" 
class="s2_189"
>s or</text>

<text 
x="783" 
y="149" 
class="s5_189"
>int</text>

<text 
x="815" 
y="149" 
class="s2_189"
>s</text>

<text 
x="55" 
y="179" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>before we can use them. Previously, we did that right before using the data:</text>

<text 
x="140" 
y="224" 
class="s6_189"
>closing_price</text>

<text 
x="250" 
y="224" 
class="s7_189"
>=</text>

<text 
x="266" 
y="224" 
class="s8_189"
>float</text>

<text 
x="306" 
y="224" 
class="s7_189"
>(</text>

<text 
x="314" 
y="224" 
class="s6_189"
>row</text>

<text 
x="337" 
y="224" 
class="s7_189"
>[</text>

<text 
x="345" 
y="224" 
class="s9_189"
>2</text>

<text 
x="353" 
y="224" 
class="s7_189"
>])</text>

<text 
x="55" 
y="277" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>But it’s probably less error-prone to do the parsing on the way in, which we can do by</text>

<text 
x="55" 
y="304" 
class="s2_189"
>creating a function that wraps</text>

<text 
x="321" 
y="304" 
class="s5_189"
>csv.reader</text>

<text 
x="427" 
y="304" 
dx="0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>. We’ll give it a list of parsers, each specifying</text>

<text 
x="55" 
y="334" 
class="s2_189"
>how to parse one of the columns. And we’ll use</text>

<text 
x="480" 
y="334" 
class="s5_189"
>None</text>

<text 
x="528" 
y="334" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>to represent “don’t do anything to</text>

<text 
x="55" 
y="364" 
class="s2_189"
>this column”:</text>

<text 
x="76" 
y="409" 
class="s10_189"
>def</text>

<text 
x="108" 
y="409" 
class="s11_189"
>parse_row</text>

<text 
x="179" 
y="409" 
class="s7_189"
>(</text>

<text 
x="187" 
y="409" 
class="s6_189"
>input_row</text>

<text 
x="258" 
y="409" 
class="s7_189"
>,</text>

<text 
x="274" 
y="409" 
class="s6_189"
>parsers</text>

<text 
x="329" 
y="409" 
class="s7_189"
>):</text>

<text 
x="108" 
y="424" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0" 
class="s12_189"
>"""given a list of parsers (some of which may be None)</text>

<text 
x="108" 
y="440" 
dx="0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s12_189"
>apply the appropriate one to each element of the input_row"""</text>

<text 
x="108" 
y="470" 
class="s10_189"
>return</text>

<text 
x="163" 
y="470" 
class="s7_189"
>[</text>

<text 
x="171" 
y="470" 
class="s6_189"
>parser</text>

<text 
x="219" 
y="470" 
class="s7_189"
>(</text>

<text 
x="227" 
y="470" 
class="s6_189"
>value</text>

<text 
x="266" 
y="470" 
class="s7_189"
>)</text>

<text 
x="282" 
y="470" 
class="s10_189"
>if</text>

<text 
x="306" 
y="470" 
class="s6_189"
>parser</text>

<text 
x="361" 
y="470" 
dx="0,0,0,4.6,0,0" 
class="s13_189"
>is not</text>

<text 
x="416" 
y="470" 
class="s8_189"
>None</text>

<text 
x="456" 
y="470" 
class="s10_189"
>else</text>

<text 
x="495" 
y="470" 
class="s6_189"
>value</text>

<text 
x="171" 
y="486" 
class="s10_189"
>for</text>

<text 
x="203" 
y="486" 
class="s6_189"
>value</text>

<text 
x="242" 
y="486" 
class="s7_189"
>,</text>

<text 
x="258" 
y="486" 
class="s6_189"
>parser</text>

<text 
x="314" 
y="486" 
class="s13_189"
>in</text>

<text 
x="337" 
y="486" 
class="s8_189"
>zip</text>

<text 
x="361" 
y="486" 
class="s7_189"
>(</text>

<text 
x="369" 
y="486" 
class="s6_189"
>input_row</text>

<text 
x="440" 
y="486" 
class="s7_189"
>,</text>

<text 
x="456" 
y="486" 
class="s6_189"
>parsers</text>

<text 
x="511" 
y="486" 
class="s7_189"
>)]</text>

<text 
x="76" 
y="517" 
class="s10_189"
>def</text>

<text 
x="108" 
y="517" 
class="s11_189"
>parse_rows_with</text>

<text 
x="227" 
y="517" 
class="s7_189"
>(</text>

<text 
x="235" 
y="517" 
class="s6_189"
>reader</text>

<text 
x="282" 
y="517" 
class="s7_189"
>,</text>

<text 
x="298" 
y="517" 
class="s6_189"
>parsers</text>

<text 
x="353" 
y="517" 
class="s7_189"
>):</text>

<text 
x="108" 
y="532" 
dx="0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0" 
class="s12_189"
>"""wrap a reader to apply the parsers to each of its rows"""</text>

<text 
x="108" 
y="547" 
class="s10_189"
>for</text>

<text 
x="140" 
y="547" 
class="s6_189"
>row</text>

<text 
x="171" 
y="547" 
class="s13_189"
>in</text>

<text 
x="195" 
y="547" 
class="s6_189"
>reader</text>

<text 
x="242" 
y="547" 
class="s7_189"
>:</text>

<text 
x="140" 
y="563" 
class="s10_189"
>yield</text>

<text 
x="187" 
y="563" 
class="s6_189"
>parse_row</text>

<text 
x="258" 
y="563" 
class="s7_189"
>(</text>

<text 
x="266" 
y="563" 
class="s6_189"
>row</text>

<text 
x="290" 
y="563" 
class="s7_189"
>,</text>

<text 
x="306" 
y="563" 
class="s6_189"
>parsers</text>

<text 
x="361" 
y="563" 
class="s7_189"
>)</text>

<text 
x="55" 
y="616" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0" 
class="s2_189"
>What if there’s bad data? A “float” value that doesn’t actually represent a number? We’d</text>

<text 
x="55" 
y="643" 
class="s2_189"
>usually rather get a</text>

<text 
x="228" 
y="643" 
class="s5_189"
>None</text>

<text 
x="276" 
y="643" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_189"
>than crash our program. We can do this with a helper function:</text>

<text 
x="76" 
y="690" 
class="s10_189"
>def</text>

<text 
x="108" 
y="690" 
class="s11_189"
>try_or_none</text>

<text 
x="195" 
y="690" 
class="s7_189"
>(</text>

<text 
x="203" 
y="690" 
class="s6_189"
>f</text>

<text 
x="211" 
y="690" 
class="s7_189"
>):</text>

<text 
x="108" 
y="706" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s12_189"
>"""wraps f to return None if f raises an exception</text>

<text 
x="108" 
y="721" 
dx="0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s12_189"
>assumes f takes only one input"""</text>

<text 
x="108" 
y="737" 
class="s10_189"
>def</text>

<text 
x="140" 
y="737" 
class="s11_189"
>f_or_none</text>

<text 
x="211" 
y="737" 
class="s7_189"
>(</text>

<text 
x="219" 
y="737" 
class="s6_189"
>x</text>

<text 
x="227" 
y="737" 
class="s7_189"
>):</text>

<text 
x="140" 
y="752" 
class="s10_189"
>try</text>

<text 
x="163" 
y="752" 
class="s7_189"
>:</text>

<text 
x="179" 
y="752" 
class="s10_189"
>return</text>

<text 
x="235" 
y="752" 
class="s6_189"
>f</text>

<text 
x="242" 
y="752" 
class="s7_189"
>(</text>

<text 
x="250" 
y="752" 
class="s6_189"
>x</text>

<text 
x="258" 
y="752" 
class="s7_189"
>)</text>

<text 
x="140" 
y="767" 
class="s10_189"
>except</text>

<text 
x="187" 
y="767" 
class="s7_189"
>:</text>

<text 
x="203" 
y="767" 
class="s10_189"
>return</text>

<text 
x="258" 
y="767" 
class="s8_189"
>None</text>

<text 
x="108" 
y="783" 
class="s10_189"
>return</text>

<text 
x="163" 
y="783" 
class="s6_189"
>f_or_none</text>

<text 
x="55" 
y="836" 
class="s2_189"
>after which we can rewrite</text>

<text 
x="294" 
y="836" 
class="s5_189"
>parse_row</text>

<text 
x="395" 
y="836" 
class="s2_189"
>to use it:</text>

<text 
x="76" 
y="883" 
class="s10_189"
>def</text>

<text 
x="108" 
y="883" 
class="s11_189"
>parse_row</text>

<text 
x="179" 
y="883" 
class="s7_189"
>(</text>

<text 
x="187" 
y="883" 
class="s6_189"
>input_row</text>

<text 
x="258" 
y="883" 
class="s7_189"
>,</text>

<text 
x="274" 
y="883" 
class="s6_189"
>parsers</text>

<text 
x="329" 
y="883" 
class="s7_189"
>):</text>

<text 
x="108" 
y="898" 
class="s10_189"
>return</text>

<text 
x="163" 
y="898" 
class="s7_189"
>[</text>

<text 
x="171" 
y="898" 
class="s6_189"
>try_or_none</text>

<text 
x="258" 
y="898" 
class="s7_189"
>(</text>

<text 
x="266" 
y="898" 
class="s6_189"
>parser</text>

<text 
x="314" 
y="898" 
class="s7_189"
>)(</text>

<text 
x="329" 
y="898" 
class="s6_189"
>value</text>

<text 
x="369" 
y="898" 
class="s7_189"
>)</text>

<text 
x="385" 
y="898" 
class="s10_189"
>if</text>

<text 
x="408" 
y="898" 
class="s6_189"
>parser</text>

<text 
x="464" 
y="898" 
dx="0,0,0,4.6,0,0" 
class="s13_189"
>is not</text>

<text 
x="519" 
y="898" 
class="s8_189"
>None</text>

<text 
x="559" 
y="898" 
class="s10_189"
>else</text>

<text 
x="598" 
y="898" 
class="s6_189"
>value</text>

<text 
x="171" 
y="914" 
class="s10_189"
>for</text>

<text 
x="203" 
y="914" 
class="s6_189"
>value</text>

<text 
x="242" 
y="914" 
class="s7_189"
>,</text>

<text 
x="258" 
y="914" 
class="s6_189"
>parser</text>

<text 
x="314" 
y="914" 
class="s13_189"
>in</text>

<text 
x="337" 
y="914" 
class="s8_189"
>zip</text>

<text 
x="361" 
y="914" 
class="s7_189"
>(</text>

<text 
x="369" 
y="914" 
class="s6_189"
>input_row</text>

<text 
x="440" 
y="914" 
class="s7_189"
>,</text>

<text 
x="456" 
y="914" 
class="s6_189"
>parsers</text>

<text 
x="511" 
y="914" 
class="s7_189"
>)]</text>

<text 
x="55" 
y="967" 
class="s2_189"
>For example, if we have comma-delimited stock prices with bad data:</text>

<text 
x="76" 
y="1012" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1012" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1012" 
class="s9_189"
>20</text>

<text 
x="108" 
y="1012" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1012" 
class="s9_189"
>2014</text>

<text 
x="148" 
y="1012" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1012" 
class="s6_189"
>AAPL</text>

<text 
x="187" 
y="1012" 
class="s7_189"
>,</text>

<text 
x="195" 
y="1012" 
class="s9_189"
>90.91</text>

<text 
x="76" 
y="1027" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1027" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1027" 
class="s9_189"
>20</text>

<text 
x="108" 
y="1027" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1027" 
class="s9_189"
>2014</text>

<text 
x="148" 
y="1027" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1027" 
class="s6_189"
>MSFT</text>

<text 
x="187" 
y="1027" 
class="s7_189"
>,</text>

<text 
x="195" 
y="1027" 
class="s9_189"
>41.68</text>

<text 
x="76" 
y="1043" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1043" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1043" 
class="s9_189"
>20</text>

<text 
x="108" 
y="1043" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1043" 
class="s9_189"
>3014</text>

<text 
x="148" 
y="1043" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1043" 
class="s6_189"
>FB</text>

<text 
x="171" 
y="1043" 
class="s7_189"
>,</text>

<text 
x="179" 
y="1043" 
class="s9_189"
>64.5</text>

<text 
x="76" 
y="1058" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1058" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1058" 
class="s9_189"
>19</text>

<text 
x="108" 
y="1058" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1058" 
class="s9_189"
>2014</text>

<text 
x="148" 
y="1058" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1058" 
class="s6_189"
>AAPL</text>

<text 
x="187" 
y="1058" 
class="s7_189"
>,</text>

<text 
x="195" 
y="1058" 
class="s9_189"
>91.86</text>

<text 
x="76" 
y="1073" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1073" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1073" 
class="s9_189"
>19</text>

<text 
x="108" 
y="1073" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1073" 
class="s9_189"
>2014</text>

<text 
x="148" 
y="1073" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1073" 
class="s6_189"
>MSFT</text>

<text 
x="187" 
y="1073" 
class="s7_189"
>,</text>

<text 
x="195" 
y="1073" 
class="s6_189"
>n</text>

<text 
x="203" 
y="1073" 
class="s7_189"
>/</text>

<text 
x="211" 
y="1073" 
class="s6_189"
>a</text>

<text 
x="76" 
y="1089" 
class="s9_189"
>6</text>

<text 
x="84" 
y="1089" 
class="s7_189"
>/</text>

<text 
x="92" 
y="1089" 
class="s9_189"
>19</text>

<text 
x="108" 
y="1089" 
class="s7_189"
>/</text>

<text 
x="116" 
y="1089" 
class="s9_189"
>2014</text>

<text 
x="148" 
y="1089" 
class="s7_189"
>,</text>

<text 
x="156" 
y="1089" 
class="s6_189"
>FB</text>

<text 
x="171" 
y="1089" 
class="s7_189"
>,</text>

<text 
x="179" 
y="1089" 
class="s9_189"
>64.34</text>

<text 
x="55" 
y="1142" 
class="s2_189"
>we can now read and parse in a single step:</text>

<text 
x="76" 
y="1187" 
class="s10_189"
>import</text>

<text 
x="132" 
y="1187" 
class="s14_189"
>dateutil.parser</text>

<text 
x="76" 
y="1202" 
class="s6_189"
>data</text>

<text 
x="116" 
y="1202" 
dx="0,0,4.6,0" 
class="s7_189"
>= []</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
