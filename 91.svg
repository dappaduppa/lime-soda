<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 91 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_91{
fill: #BEBEBE;
}

.s1_91{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_91{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_91{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_91{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_91{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_91{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_91{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s8_91{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s9_91{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s10_91{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s11_91{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s12_91{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s13_91{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s14_91{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s15_91{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,392.8l722.5,0c3,0,5.5,2.5,5.5,5.5l0,99c0,3.1,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.4,-5.5,-5.5l0,-99c0,-3,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,2,4.4,4.4l0,99c0,2.4,-2,4.4,-4.4,4.4l-722.5,0c-2.4,0,-4.4,-2,-4.4,-4.4l0,-99c0,-2.4,2,-4.4,4.4,-4.4Z" class="g1_91" />
<text 
x="55" 
y="81" 
class="s1_91"
>Matrices</text>

<text 
x="55" 
y="122" 
class="s2_91"
>A</text>

<text 
x="75" 
y="122" 
class="s3_91"
>matrix</text>

<text 
x="138" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_91"
>is a two-dimensional collection of numbers. We will represent matrices as</text>

<text 
x="793" 
y="122" 
class="s4_91"
>list</text>

<text 
x="835" 
y="122" 
class="s2_91"
>s</text>

<text 
x="55" 
y="151" 
class="s2_91"
>of</text>

<text 
x="78" 
y="151" 
class="s4_91"
>list</text>

<text 
x="121" 
y="151" 
class="s2_91"
>s, with each inner list having the same size and representing a</text>

<text 
x="668" 
y="151" 
dx="0,-0.8,0" 
class="s3_91"
>row</text>

<text 
x="707" 
y="151" 
class="s2_91"
>of the matrix. If</text>

<text 
x="55" 
y="181" 
class="s4_91"
>A</text>

<text 
x="71" 
y="181" 
class="s2_91"
>is a matrix, then</text>

<text 
x="218" 
y="181" 
class="s4_91"
>A[i][j]</text>

<text 
x="297" 
y="181" 
class="s2_91"
>is the element in the</text>

<text 
x="480" 
y="181" 
class="s3_91"
>i</text>

<text 
x="486" 
y="181" 
class="s2_91"
>th row and the</text>

<text 
x="618" 
y="181" 
class="s3_91"
>j</text>

<text 
x="624" 
y="181" 
class="s2_91"
>th column. Per</text>

<text 
x="55" 
y="211" 
class="s2_91"
>mathematical convention, we will typically use capital letters to represent matrices. For</text>

<text 
x="55" 
y="238" 
class="s2_91"
>example:</text>

<text 
x="76" 
y="283" 
class="s5_91"
>A</text>

<text 
x="92" 
y="283" 
dx="0,0,4.6,0" 
class="s6_91"
>= [[</text>

<text 
x="124" 
y="283" 
class="s7_91"
>1</text>

<text 
x="132" 
y="283" 
class="s6_91"
>,</text>

<text 
x="148" 
y="283" 
class="s7_91"
>2</text>

<text 
x="156" 
y="283" 
class="s6_91"
>,</text>

<text 
x="171" 
y="283" 
class="s7_91"
>3</text>

<text 
x="179" 
y="283" 
class="s6_91"
>],</text>

<text 
x="211" 
y="283" 
dx="0,0,4.6,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s8_91"
># A has 2 rows and 3 columns</text>

<text 
x="116" 
y="299" 
class="s6_91"
>[</text>

<text 
x="124" 
y="299" 
class="s7_91"
>4</text>

<text 
x="132" 
y="299" 
class="s6_91"
>,</text>

<text 
x="148" 
y="299" 
class="s7_91"
>5</text>

<text 
x="156" 
y="299" 
class="s6_91"
>,</text>

<text 
x="171" 
y="299" 
class="s7_91"
>6</text>

<text 
x="179" 
y="299" 
class="s6_91"
>]]</text>

<text 
x="76" 
y="330" 
class="s5_91"
>B</text>

<text 
x="92" 
y="330" 
dx="0,0,4.6,0" 
class="s6_91"
>= [[</text>

<text 
x="124" 
y="330" 
class="s7_91"
>1</text>

<text 
x="132" 
y="330" 
class="s6_91"
>,</text>

<text 
x="148" 
y="330" 
class="s7_91"
>2</text>

<text 
x="156" 
y="330" 
class="s6_91"
>],</text>

<text 
x="211" 
y="330" 
dx="0,0,4.6,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s8_91"
># B has 3 rows and 2 columns</text>

<text 
x="116" 
y="345" 
class="s6_91"
>[</text>

<text 
x="124" 
y="345" 
class="s7_91"
>3</text>

<text 
x="132" 
y="345" 
class="s6_91"
>,</text>

<text 
x="148" 
y="345" 
class="s7_91"
>4</text>

<text 
x="156" 
y="345" 
class="s6_91"
>],</text>

<text 
x="116" 
y="360" 
class="s6_91"
>[</text>

<text 
x="124" 
y="360" 
class="s7_91"
>5</text>

<text 
x="132" 
y="360" 
class="s6_91"
>,</text>

<text 
x="148" 
y="360" 
class="s7_91"
>6</text>

<text 
x="156" 
y="360" 
class="s6_91"
>]]</text>

<text 
x="421" 
y="418" 
dx="0,1.1,1.1,1.1" 
class="s9_91"
>NOTE</text>

<text 
x="97" 
y="447" 
class="s10_91"
>In mathematics, you would usually name the first row of the matrix “row 1” and the first column “column</text>

<text 
x="97" 
y="467" 
class="s10_91"
>1.” Because we’re representing matrices with Python</text>

<text 
x="452" 
y="467" 
class="s6_91"
>list</text>

<text 
x="483" 
y="467" 
class="s10_91"
>s, which are zero-indexed, we’ll call the first row</text>

<text 
x="97" 
y="489" 
class="s10_91"
>of a matrix “row 0” and the first column “column 0.”</text>

<text 
x="55" 
y="534" 
class="s2_91"
>Given this list-of-lists representation, the matrix</text>

<text 
x="482" 
y="534" 
class="s4_91"
>A</text>

<text 
x="498" 
y="534" 
class="s2_91"
>has</text>

<text 
x="533" 
y="534" 
class="s4_91"
>len(A)</text>

<text 
x="602" 
y="534" 
class="s2_91"
>rows and</text>

<text 
x="688" 
y="534" 
class="s4_91"
>len(A[0])</text>

<text 
x="55" 
y="564" 
class="s2_91"
>columns, which we consider its</text>

<text 
x="337" 
y="564" 
class="s4_91"
>shape</text>

<text 
x="389" 
y="564" 
class="s2_91"
>:</text>

<text 
x="76" 
y="611" 
class="s11_91"
>def</text>

<text 
x="108" 
y="611" 
class="s12_91"
>shape</text>

<text 
x="148" 
y="611" 
class="s6_91"
>(</text>

<text 
x="156" 
y="611" 
class="s5_91"
>A</text>

<text 
x="163" 
y="611" 
class="s6_91"
>):</text>

<text 
x="108" 
y="627" 
class="s5_91"
>num_rows</text>

<text 
x="179" 
y="627" 
class="s6_91"
>=</text>

<text 
x="195" 
y="627" 
class="s13_91"
>len</text>

<text 
x="219" 
y="627" 
class="s6_91"
>(</text>

<text 
x="227" 
y="627" 
class="s5_91"
>A</text>

<text 
x="235" 
y="627" 
class="s6_91"
>)</text>

<text 
x="108" 
y="642" 
class="s5_91"
>num_cols</text>

<text 
x="179" 
y="642" 
class="s6_91"
>=</text>

<text 
x="195" 
y="642" 
class="s13_91"
>len</text>

<text 
x="219" 
y="642" 
class="s6_91"
>(</text>

<text 
x="227" 
y="642" 
class="s5_91"
>A</text>

<text 
x="235" 
y="642" 
class="s6_91"
>[</text>

<text 
x="242" 
y="642" 
class="s7_91"
>0</text>

<text 
x="250" 
y="642" 
class="s6_91"
>])</text>

<text 
x="274" 
y="642" 
class="s11_91"
>if</text>

<text 
x="298" 
y="642" 
class="s5_91"
>A</text>

<text 
x="314" 
y="642" 
class="s11_91"
>else</text>

<text 
x="353" 
y="642" 
class="s7_91"
>0</text>

<text 
x="385" 
y="642" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0" 
class="s8_91"
># number of elements in first row</text>

<text 
x="108" 
y="657" 
class="s11_91"
>return</text>

<text 
x="163" 
y="657" 
class="s5_91"
>num_rows</text>

<text 
x="227" 
y="657" 
class="s6_91"
>,</text>

<text 
x="242" 
y="657" 
class="s5_91"
>num_cols</text>

<text 
x="55" 
y="714" 
class="s2_91"
>If a matrix has</text>

<text 
x="188" 
y="714" 
class="s3_91"
>n</text>

<text 
x="204" 
y="714" 
class="s2_91"
>rows and</text>

<text 
x="290" 
y="714" 
class="s3_91"
>k</text>

<text 
x="305" 
y="714" 
class="s2_91"
>columns, we will refer to it as a</text>

<image preserveAspectRatio="none" x="588" y="690" width="72" height="24" xlink:href="91/img/1.png" />
<text 
x="664" 
y="714" 
dx="0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0" 
class="s2_91"
>matrix. We can (and</text>

<text 
x="55" 
y="744" 
class="s2_91"
>sometimes will) think of each row of a</text>

<image preserveAspectRatio="none" x="400" y="721" width="72" height="24" xlink:href="91/img/2.png" />
<text 
x="477" 
y="744" 
class="s2_91"
>matrix as a vector of length</text>

<text 
x="724" 
y="744" 
class="s3_91"
>k</text>

<text 
x="733" 
y="744" 
class="s2_91"
>, and each</text>

<text 
x="55" 
y="772" 
class="s2_91"
>column as a vector of length</text>

<text 
x="310" 
y="772" 
class="s3_91"
>n</text>

<text 
x="321" 
y="772" 
class="s2_91"
>:</text>

<text 
x="76" 
y="817" 
class="s11_91"
>def</text>

<text 
x="108" 
y="817" 
class="s12_91"
>get_row</text>

<text 
x="163" 
y="817" 
class="s6_91"
>(</text>

<text 
x="171" 
y="817" 
class="s5_91"
>A</text>

<text 
x="179" 
y="817" 
class="s6_91"
>,</text>

<text 
x="195" 
y="817" 
class="s5_91"
>i</text>

<text 
x="203" 
y="817" 
class="s6_91"
>):</text>

<text 
x="108" 
y="832" 
class="s11_91"
>return</text>

<text 
x="163" 
y="832" 
class="s5_91"
>A</text>

<text 
x="171" 
y="832" 
class="s6_91"
>[</text>

<text 
x="179" 
y="832" 
class="s5_91"
>i</text>

<text 
x="187" 
y="832" 
class="s6_91"
>]</text>

<text 
x="298" 
y="832" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0" 
class="s8_91"
># A[i] is already the ith row</text>

<text 
x="76" 
y="863" 
class="s11_91"
>def</text>

<text 
x="108" 
y="863" 
class="s12_91"
>get_column</text>

<text 
x="187" 
y="863" 
class="s6_91"
>(</text>

<text 
x="195" 
y="863" 
class="s5_91"
>A</text>

<text 
x="203" 
y="863" 
class="s6_91"
>,</text>

<text 
x="219" 
y="863" 
class="s5_91"
>j</text>

<text 
x="227" 
y="863" 
class="s6_91"
>):</text>

<text 
x="108" 
y="879" 
class="s11_91"
>return</text>

<text 
x="163" 
y="879" 
class="s6_91"
>[</text>

<text 
x="171" 
y="879" 
class="s5_91"
>A_i</text>

<text 
x="195" 
y="879" 
class="s6_91"
>[</text>

<text 
x="203" 
y="879" 
class="s5_91"
>j</text>

<text 
x="211" 
y="879" 
class="s6_91"
>]</text>

<text 
x="298" 
y="879" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0" 
class="s8_91"
># jth element of row A_i</text>

<text 
x="171" 
y="894" 
class="s11_91"
>for</text>

<text 
x="203" 
y="894" 
class="s5_91"
>A_i</text>

<text 
x="235" 
y="894" 
class="s14_91"
>in</text>

<text 
x="258" 
y="894" 
class="s5_91"
>A</text>

<text 
x="266" 
y="894" 
class="s6_91"
>]</text>

<text 
x="298" 
y="894" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0" 
class="s8_91"
># for each row A_i</text>

<text 
x="55" 
y="947" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_91"
>We’ll also want to be able to create a matrix given its shape and a function for generating</text>

<text 
x="55" 
y="974" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_91"
>its elements. We can do this using a nested list comprehension:</text>

<text 
x="76" 
y="1019" 
class="s11_91"
>def</text>

<text 
x="108" 
y="1019" 
class="s12_91"
>make_matrix</text>

<text 
x="195" 
y="1019" 
class="s6_91"
>(</text>

<text 
x="203" 
y="1019" 
class="s5_91"
>num_rows</text>

<text 
x="266" 
y="1019" 
class="s6_91"
>,</text>

<text 
x="282" 
y="1019" 
class="s5_91"
>num_cols</text>

<text 
x="345" 
y="1019" 
class="s6_91"
>,</text>

<text 
x="361" 
y="1019" 
class="s5_91"
>entry_fn</text>

<text 
x="424" 
y="1019" 
class="s6_91"
>):</text>

<text 
x="108" 
y="1035" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s15_91"
>"""returns a num_rows x num_cols matrix</text>

<text 
x="108" 
y="1050" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s15_91"
>whose (i,j)th entry is entry_fn(i, j)"""</text>

<text 
x="108" 
y="1066" 
class="s11_91"
>return</text>

<text 
x="163" 
y="1066" 
class="s6_91"
>[[</text>

<text 
x="179" 
y="1066" 
class="s5_91"
>entry_fn</text>

<text 
x="242" 
y="1066" 
class="s6_91"
>(</text>

<text 
x="250" 
y="1066" 
class="s5_91"
>i</text>

<text 
x="258" 
y="1066" 
class="s6_91"
>,</text>

<text 
x="274" 
y="1066" 
class="s5_91"
>j</text>

<text 
x="282" 
y="1066" 
class="s6_91"
>)</text>

<text 
x="393" 
y="1066" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0" 
class="s8_91"
># given i, create a list</text>

<text 
x="179" 
y="1081" 
class="s11_91"
>for</text>

<text 
x="211" 
y="1081" 
class="s5_91"
>j</text>

<text 
x="227" 
y="1081" 
class="s14_91"
>in</text>

<text 
x="250" 
y="1081" 
class="s13_91"
>range</text>

<text 
x="290" 
y="1081" 
class="s6_91"
>(</text>

<text 
x="298" 
y="1081" 
class="s5_91"
>num_cols</text>

<text 
x="361" 
y="1081" 
class="s6_91"
>)]</text>

<text 
x="393" 
y="1081" 
class="s8_91"
>#</text>

<text 
x="424" 
y="1081" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6" 
class="s8_91"
>[entry_fn(i, 0), ... ]</text>

<text 
x="171" 
y="1096" 
class="s11_91"
>for</text>

<text 
x="203" 
y="1096" 
class="s5_91"
>i</text>

<text 
x="219" 
y="1096" 
class="s14_91"
>in</text>

<text 
x="242" 
y="1096" 
class="s13_91"
>range</text>

<text 
x="282" 
y="1096" 
class="s6_91"
>(</text>

<text 
x="290" 
y="1096" 
class="s5_91"
>num_rows</text>

<text 
x="353" 
y="1096" 
class="s6_91"
>)]</text>

<text 
x="393" 
y="1096" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6" 
class="s8_91"
># create one list for each i</text>

<text 
x="55" 
y="1149" 
class="s2_91"
>Given this function, you could make a 5 × 5</text>

<text 
x="447" 
y="1149" 
class="s3_91"
>identity matrix</text>

<text 
x="582" 
y="1149" 
class="s2_91"
>(with 1s on the diagonal and</text>

<text 
x="55" 
y="1177" 
class="s2_91"
>0s elsewhere) with:</text>

<text 
x="76" 
y="1222" 
class="s11_91"
>def</text>

<text 
x="108" 
y="1222" 
class="s12_91"
>is_diagonal</text>

<text 
x="195" 
y="1222" 
class="s6_91"
>(</text>

<text 
x="203" 
y="1222" 
class="s5_91"
>i</text>

<text 
x="211" 
y="1222" 
class="s6_91"
>,</text>

<text 
x="227" 
y="1222" 
class="s5_91"
>j</text>

<text 
x="235" 
y="1222" 
class="s6_91"
>):</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
