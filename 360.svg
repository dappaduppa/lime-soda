<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 360 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_360{
fill: #BEBEBE;
}

.s1_360{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_360{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_360{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_360{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_360{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_360{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s7_360{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_360{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s9_360{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_360{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s11_360{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s12_360{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s13_360{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s14_360{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s15_360{
font-size: 16.50px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,418.1l722.5,0c3,0,5.5,2.5,5.5,5.5l0,101.2c0,3.1,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.4,-5.5,-5.5L88,423.6c0,-3,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,2,4.4,4.4l0,101.2c0,2.5,-2,4.4,-4.4,4.4l-722.5,0c-2.4,0,-4.4,-1.9,-4.4,-4.4l0,-101.2c0,-2.4,2,-4.4,4.4,-4.4Z" class="g1_360" />
<text 
x="55" 
y="77" 
class="s1_360"
>Centrality</text>

<text 
x="55" 
y="115" 
class="s2_360"
>How does this help us understand the DataSciencester network?</text>

<text 
x="55" 
y="154" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_360"
>To start with, we’ll need to represent the connections in our network as an</text>

<text 
x="55" 
y="181" 
class="s3_360"
>adjacency_matrix</text>

<text 
x="223" 
y="181" 
class="s2_360"
>, whose (i,j)th entry is either 1 (if user</text>

<text 
x="562" 
y="181" 
class="s4_360"
>i</text>

<text 
x="574" 
y="181" 
class="s2_360"
>and user</text>

<text 
x="653" 
y="181" 
class="s4_360"
>j</text>

<text 
x="665" 
y="181" 
class="s2_360"
>are friends) or 0 (if</text>

<text 
x="55" 
y="211" 
class="s2_360"
>they’re not):</text>

<text 
x="76" 
y="256" 
class="s5_360"
>def</text>

<text 
x="108" 
y="256" 
class="s6_360"
>entry_fn</text>

<text 
x="171" 
y="256" 
class="s7_360"
>(</text>

<text 
x="179" 
y="256" 
class="s8_360"
>i</text>

<text 
x="187" 
y="256" 
class="s7_360"
>,</text>

<text 
x="203" 
y="256" 
class="s8_360"
>j</text>

<text 
x="211" 
y="256" 
class="s7_360"
>):</text>

<text 
x="108" 
y="271" 
class="s5_360"
>return</text>

<text 
x="163" 
y="271" 
class="s9_360"
>1</text>

<text 
x="179" 
y="271" 
class="s5_360"
>if</text>

<text 
x="203" 
y="271" 
class="s7_360"
>(</text>

<text 
x="211" 
y="271" 
class="s8_360"
>i</text>

<text 
x="219" 
y="271" 
class="s7_360"
>,</text>

<text 
x="235" 
y="271" 
class="s8_360"
>j</text>

<text 
x="242" 
y="271" 
class="s7_360"
>)</text>

<text 
x="258" 
y="271" 
class="s10_360"
>in</text>

<text 
x="282" 
y="271" 
class="s8_360"
>friendships</text>

<text 
x="377" 
y="271" 
class="s10_360"
>or</text>

<text 
x="401" 
y="271" 
class="s7_360"
>(</text>

<text 
x="408" 
y="271" 
class="s8_360"
>j</text>

<text 
x="416" 
y="271" 
class="s7_360"
>,</text>

<text 
x="432" 
y="271" 
class="s8_360"
>i</text>

<text 
x="440" 
y="271" 
class="s7_360"
>)</text>

<text 
x="456" 
y="271" 
class="s10_360"
>in</text>

<text 
x="480" 
y="271" 
class="s8_360"
>friendships</text>

<text 
x="574" 
y="271" 
class="s5_360"
>else</text>

<text 
x="614" 
y="271" 
class="s9_360"
>0</text>

<text 
x="76" 
y="302" 
class="s8_360"
>n</text>

<text 
x="92" 
y="302" 
class="s7_360"
>=</text>

<text 
x="108" 
y="302" 
class="s11_360"
>len</text>

<text 
x="132" 
y="302" 
class="s7_360"
>(</text>

<text 
x="140" 
y="302" 
class="s8_360"
>users</text>

<text 
x="179" 
y="302" 
class="s7_360"
>)</text>

<text 
x="76" 
y="317" 
class="s8_360"
>adjacency_matrix</text>

<text 
x="211" 
y="317" 
class="s7_360"
>=</text>

<text 
x="227" 
y="317" 
class="s8_360"
>make_matrix</text>

<text 
x="314" 
y="317" 
class="s7_360"
>(</text>

<text 
x="322" 
y="317" 
class="s8_360"
>n</text>

<text 
x="329" 
y="317" 
class="s7_360"
>,</text>

<text 
x="345" 
y="317" 
class="s8_360"
>n</text>

<text 
x="353" 
y="317" 
class="s7_360"
>,</text>

<text 
x="369" 
y="317" 
class="s8_360"
>entry_fn</text>

<text 
x="432" 
y="317" 
class="s7_360"
>)</text>

<text 
x="55" 
y="370" 
class="s2_360"
>The eigenvector centrality for each user is then the entry corresponding to that user in the</text>

<text 
x="55" 
y="398" 
class="s2_360"
>eigenvector returned by</text>

<text 
x="269" 
y="398" 
class="s3_360"
>find_eigenvector</text>

<text 
x="443" 
y="398" 
class="s2_360"
>(</text>

<text 
x="450" 
y="398" 
class="s12_360"
>Figure 21-4</text>

<text 
x="554" 
y="398" 
class="s2_360"
>):</text>

<text 
x="421" 
y="443" 
dx="0,1.1,1.1,1.1" 
class="s13_360"
>NOTE</text>

<text 
x="97" 
y="473" 
class="s14_360"
>For technical reasons that are way beyond the scope of this book, any nonzero adjacency matrix necessarily</text>

<text 
x="97" 
y="492" 
class="s14_360"
>has an eigenvector all of whose values are non-negative. And fortunately for us, for this</text>

<text 
x="680" 
y="492" 
class="s7_360"
>adjacency_matrix</text>

<text 
x="97" 
y="514" 
class="s14_360"
>our</text>

<text 
x="123" 
y="514" 
class="s7_360"
>find_eigenvector</text>

<text 
x="254" 
y="514" 
class="s14_360"
>function finds it.</text>

<text 
x="76" 
y="568" 
class="s8_360"
>eigenvector_centralities</text>

<text 
x="266" 
y="568" 
class="s7_360"
>,</text>

<text 
x="282" 
y="568" 
class="s8_360"
>_</text>

<text 
x="298" 
y="568" 
class="s7_360"
>=</text>

<text 
x="314" 
y="568" 
class="s8_360"
>find_eigenvector</text>

<text 
x="440" 
y="568" 
class="s7_360"
>(</text>

<text 
x="448" 
y="568" 
class="s8_360"
>adjacency_matrix</text>

<text 
x="574" 
y="568" 
class="s7_360"
>)</text>

<image preserveAspectRatio="none" x="96" y="601" width="718" height="267" xlink:href="360/img/1.png" />
<text 
x="211" 
y="894" 
dx="0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s15_360"
>Figure 21-4. The DataSciencester network sized by eigenvector centrality</text>

<text 
x="55" 
y="936" 
class="s2_360"
>Users with high eigenvector centrality should be those who have a lot of connections and</text>

<text 
x="55" 
y="963" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4" 
class="s2_360"
>connections to people who themselves have high centrality.</text>

<text 
x="55" 
y="1002" 
class="s2_360"
>Here users 1 and 2 are the most central, as they both have three connections to people who</text>

<text 
x="55" 
y="1029" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_360"
>are themselves highly central. As we move away from them, people’s centralities steadily</text>

<text 
x="55" 
y="1057" 
dx="0,0,0,0,0,0,0,-0.4,0" 
class="s2_360"
>drop off.</text>

<text 
x="55" 
y="1095" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_360"
>On a network this small, eigenvector centrality behaves somewhat erratically. If you try</text>

<text 
x="55" 
y="1123" 
class="s2_360"
>adding or subtracting links, you’ll find that small changes in the network can dramatically</text>

<text 
x="55" 
y="1150" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_360"
>change the centrality numbers. In a much larger network this would not particularly be the</text>

<text 
x="55" 
y="1178" 
class="s2_360"
>case.</text>

<text 
x="55" 
y="1216" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_360"
>We still haven’t motivated why an eigenvector might lead to a reasonable notion of</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
