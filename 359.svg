<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 359 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_359{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_359{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s3_359{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_359{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_359{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_359{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_359{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_359{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s9_359{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_359{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_359{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
class="s1_359"
>When</text>

<text 
x="113" 
y="74" 
class="s2_359"
>A</text>

<text 
x="131" 
y="74" 
class="s1_359"
>is a</text>

<text 
x="167" 
y="74" 
dx="0,0,0,0,0,-0.8" 
class="s2_359"
>square</text>

<text 
x="231" 
y="74" 
class="s1_359"
>matrix, this operation maps</text>

<text 
x="477" 
y="74" 
class="s2_359"
>n</text>

<text 
x="488" 
y="74" 
class="s1_359"
>-dimensional vectors to other</text>

<text 
x="751" 
y="74" 
class="s2_359"
>n</text>

<text 
x="762" 
y="74" 
class="s1_359"
>-</text>

<text 
x="55" 
y="102" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_359"
>dimensional vectors. It’s possible that, for some matrix</text>

<text 
x="543" 
y="102" 
class="s2_359"
>A</text>

<text 
x="562" 
y="102" 
class="s1_359"
>and vector</text>

<text 
x="660" 
y="102" 
class="s2_359"
>v</text>

<text 
x="669" 
y="102" 
class="s1_359"
>, when</text>

<text 
x="733" 
y="102" 
class="s2_359"
>A</text>

<text 
x="752" 
y="102" 
class="s1_359"
>operates on</text>

<text 
x="55" 
y="129" 
class="s2_359"
>v</text>

<text 
x="70" 
y="129" 
class="s1_359"
>we get back a scalar multiple of</text>

<text 
x="355" 
y="129" 
class="s2_359"
>v</text>

<text 
x="365" 
y="129" 
class="s1_359"
>. That is, that the result is a vector that points in the</text>

<text 
x="55" 
y="157" 
class="s1_359"
>same direction as</text>

<text 
x="213" 
y="157" 
class="s2_359"
>v</text>

<text 
x="222" 
y="157" 
class="s1_359"
>. When this happens (and when, in addition,</text>

<text 
x="615" 
y="157" 
class="s2_359"
>v</text>

<text 
x="630" 
y="157" 
class="s1_359"
>is not a vector of all</text>

<text 
x="55" 
y="184" 
class="s1_359"
>zeroes), we call</text>

<text 
x="197" 
y="184" 
class="s2_359"
>v</text>

<text 
x="213" 
y="184" 
class="s1_359"
>an</text>

<text 
x="239" 
y="184" 
class="s2_359"
>eigenvector</text>

<text 
x="347" 
y="184" 
class="s1_359"
>of</text>

<text 
x="371" 
y="184" 
class="s2_359"
>A</text>

<text 
x="384" 
y="184" 
class="s1_359"
>. And we call the multiplier an</text>

<text 
x="658" 
y="184" 
class="s2_359"
>eigenvalue</text>

<text 
x="753" 
y="184" 
class="s1_359"
>.</text>

<text 
x="55" 
y="223" 
class="s1_359"
>One possible way to find an eigenvector of</text>

<text 
x="438" 
y="223" 
class="s2_359"
>A</text>

<text 
x="457" 
y="223" 
class="s1_359"
>is by picking a starting vector</text>

<text 
x="723" 
y="223" 
class="s2_359"
>v</text>

<text 
x="733" 
y="223" 
class="s1_359"
>, applying</text>

<text 
x="55" 
y="250" 
class="s3_359"
>matrix_operate</text>

<text 
x="202" 
y="250" 
class="s1_359"
>, rescaling the result to have magnitude 1, and repeating until the process</text>

<text 
x="55" 
y="280" 
dx="0,0,0,0,0,0,-0.4,0,0,0" 
class="s1_359"
>converges:</text>

<text 
x="76" 
y="325" 
class="s4_359"
>def</text>

<text 
x="108" 
y="325" 
class="s5_359"
>find_eigenvector</text>

<text 
x="235" 
y="325" 
class="s6_359"
>(</text>

<text 
x="242" 
y="325" 
class="s7_359"
>A</text>

<text 
x="250" 
y="325" 
class="s6_359"
>,</text>

<text 
x="266" 
y="325" 
class="s7_359"
>tolerance</text>

<text 
x="337" 
y="325" 
class="s6_359"
>=</text>

<text 
x="345" 
y="325" 
class="s8_359"
>0.00001</text>

<text 
x="401" 
y="325" 
class="s6_359"
>):</text>

<text 
x="108" 
y="341" 
class="s7_359"
>guess</text>

<text 
x="156" 
y="341" 
dx="0,0,4.6" 
class="s6_359"
>= [</text>

<text 
x="179" 
y="341" 
class="s7_359"
>random</text>

<text 
x="227" 
y="341" 
class="s6_359"
>.</text>

<text 
x="235" 
y="341" 
class="s7_359"
>random</text>

<text 
x="282" 
y="341" 
class="s6_359"
>()</text>

<text 
x="306" 
y="341" 
class="s4_359"
>for</text>

<text 
x="337" 
y="341" 
class="s7_359"
>__</text>

<text 
x="361" 
y="341" 
class="s9_359"
>in</text>

<text 
x="385" 
y="341" 
class="s7_359"
>A</text>

<text 
x="393" 
y="341" 
class="s6_359"
>]</text>

<text 
x="108" 
y="371" 
class="s4_359"
>while</text>

<text 
x="156" 
y="371" 
class="s10_359"
>True</text>

<text 
x="187" 
y="371" 
class="s6_359"
>:</text>

<text 
x="140" 
y="387" 
class="s7_359"
>result</text>

<text 
x="195" 
y="387" 
class="s6_359"
>=</text>

<text 
x="211" 
y="387" 
class="s7_359"
>matrix_operate</text>

<text 
x="322" 
y="387" 
class="s6_359"
>(</text>

<text 
x="329" 
y="387" 
class="s7_359"
>A</text>

<text 
x="337" 
y="387" 
class="s6_359"
>,</text>

<text 
x="353" 
y="387" 
class="s7_359"
>guess</text>

<text 
x="393" 
y="387" 
class="s6_359"
>)</text>

<text 
x="140" 
y="402" 
class="s7_359"
>length</text>

<text 
x="195" 
y="402" 
class="s6_359"
>=</text>

<text 
x="211" 
y="402" 
class="s7_359"
>magnitude</text>

<text 
x="282" 
y="402" 
class="s6_359"
>(</text>

<text 
x="290" 
y="402" 
class="s7_359"
>result</text>

<text 
x="337" 
y="402" 
class="s6_359"
>)</text>

<text 
x="140" 
y="418" 
class="s7_359"
>next_guess</text>

<text 
x="227" 
y="418" 
class="s6_359"
>=</text>

<text 
x="242" 
y="418" 
class="s7_359"
>scalar_multiply</text>

<text 
x="361" 
y="418" 
class="s6_359"
>(</text>

<text 
x="369" 
y="418" 
class="s8_359"
>1</text>

<text 
x="377" 
y="418" 
class="s6_359"
>/</text>

<text 
x="385" 
y="418" 
class="s7_359"
>length</text>

<text 
x="432" 
y="418" 
class="s6_359"
>,</text>

<text 
x="448" 
y="418" 
class="s7_359"
>result</text>

<text 
x="495" 
y="418" 
class="s6_359"
>)</text>

<text 
x="140" 
y="448" 
class="s4_359"
>if</text>

<text 
x="163" 
y="448" 
class="s7_359"
>distance</text>

<text 
x="227" 
y="448" 
class="s6_359"
>(</text>

<text 
x="235" 
y="448" 
class="s7_359"
>guess</text>

<text 
x="274" 
y="448" 
class="s6_359"
>,</text>

<text 
x="290" 
y="448" 
class="s7_359"
>next_guess</text>

<text 
x="369" 
y="448" 
dx="0,0,4.6" 
class="s6_359"
>) &lt;</text>

<text 
x="401" 
y="448" 
class="s7_359"
>tolerance</text>

<text 
x="472" 
y="448" 
class="s6_359"
>:</text>

<text 
x="171" 
y="464" 
class="s4_359"
>return</text>

<text 
x="227" 
y="464" 
class="s7_359"
>next_guess</text>

<text 
x="306" 
y="464" 
class="s6_359"
>,</text>

<text 
x="322" 
y="464" 
class="s7_359"
>length</text>

<text 
x="393" 
y="464" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s11_359"
># eigenvector, eigenvalue</text>

<text 
x="140" 
y="495" 
class="s7_359"
>guess</text>

<text 
x="187" 
y="495" 
class="s6_359"
>=</text>

<text 
x="203" 
y="495" 
class="s7_359"
>next_guess</text>

<text 
x="55" 
y="547" 
class="s1_359"
>By construction, the returned</text>

<text 
x="316" 
y="547" 
class="s3_359"
>guess</text>

<text 
x="375" 
y="547" 
class="s1_359"
>is a vector such that, when you apply</text>

<text 
x="706" 
y="547" 
class="s3_359"
>matrix_operate</text>

<text 
x="55" 
y="577" 
class="s1_359"
>to it and rescale it to have length 1, you get back (a vector very close to) itself. Which</text>

<text 
x="55" 
y="605" 
dx="0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s1_359"
>means it’s an eigenvector.</text>

<text 
x="55" 
y="643" 
class="s1_359"
>Not all matrices of real numbers have eigenvectors and eigenvalues. For example the</text>

<text 
x="55" 
y="671" 
class="s1_359"
>matrix:</text>

<text 
x="76" 
y="716" 
class="s7_359"
>rotate</text>

<text 
x="132" 
y="716" 
dx="0,0,4.6,0" 
class="s6_359"
>= [[</text>

<text 
x="171" 
y="716" 
class="s8_359"
>0</text>

<text 
x="179" 
y="716" 
class="s6_359"
>,</text>

<text 
x="195" 
y="716" 
class="s8_359"
>1</text>

<text 
x="203" 
y="716" 
class="s6_359"
>],</text>

<text 
x="156" 
y="731" 
class="s6_359"
>[-</text>

<text 
x="171" 
y="731" 
class="s8_359"
>1</text>

<text 
x="179" 
y="731" 
class="s6_359"
>,</text>

<text 
x="195" 
y="731" 
class="s8_359"
>0</text>

<text 
x="203" 
y="731" 
class="s6_359"
>]]</text>

<text 
x="55" 
y="784" 
class="s1_359"
>rotates vectors 90 degrees clockwise, which means that the only vector it maps to a scalar</text>

<text 
x="55" 
y="811" 
class="s1_359"
>multiple of itself is a vector of zeroes. If you tried</text>

<text 
x="498" 
y="811" 
class="s3_359"
>find_eigenvector(rotate)</text>

<text 
x="756" 
y="811" 
class="s1_359"
>it would</text>

<text 
x="55" 
y="841" 
dx="0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_359"
>run forever. Even matrices that have eigenvectors can sometimes get stuck in cycles.</text>

<text 
x="55" 
y="869" 
class="s1_359"
>Consider the matrix:</text>

<text 
x="76" 
y="914" 
class="s7_359"
>flip</text>

<text 
x="116" 
y="914" 
dx="0,0,4.6,0" 
class="s6_359"
>= [[</text>

<text 
x="148" 
y="914" 
class="s8_359"
>0</text>

<text 
x="156" 
y="914" 
class="s6_359"
>,</text>

<text 
x="171" 
y="914" 
class="s8_359"
>1</text>

<text 
x="179" 
y="914" 
class="s6_359"
>],</text>

<text 
x="140" 
y="929" 
class="s6_359"
>[</text>

<text 
x="148" 
y="929" 
class="s8_359"
>1</text>

<text 
x="156" 
y="929" 
class="s6_359"
>,</text>

<text 
x="171" 
y="929" 
class="s8_359"
>0</text>

<text 
x="179" 
y="929" 
class="s6_359"
>]]</text>

<text 
x="55" 
y="982" 
class="s1_359"
>This matrix maps any vector</text>

<text 
x="312" 
y="982" 
dx="0,0,0,0,6.1,0" 
class="s3_359"
>[x, y]</text>

<text 
x="380" 
y="982" 
class="s1_359"
>to</text>

<text 
x="403" 
y="982" 
dx="0,0,0,0,6.1,0" 
class="s3_359"
>[y, x]</text>

<text 
x="466" 
y="982" 
class="s1_359"
>. This means that, for example,</text>

<text 
x="744" 
y="982" 
dx="0,0,0,0,6.1,0" 
class="s3_359"
>[1, 1]</text>

<text 
x="813" 
y="982" 
class="s1_359"
>is an</text>

<text 
x="55" 
y="1012" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_359"
>eigenvector with eigenvalue 1. However, if you start with a random vector with unequal</text>

<text 
x="55" 
y="1039" 
class="s1_359"
>coordinates,</text>

<text 
x="167" 
y="1039" 
class="s3_359"
>find_eigenvector</text>

<text 
x="341" 
y="1039" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0" 
class="s1_359"
>will just repeatedly swap the coordinates forever. (Not-</text>

<text 
x="55" 
y="1069" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_359"
>from-scratch libraries like NumPy use different methods that would work in this case.)</text>

<text 
x="55" 
y="1096" 
class="s1_359"
>Nonetheless, when</text>

<text 
x="226" 
y="1096" 
class="s3_359"
>find_eigenvector</text>

<text 
x="400" 
y="1096" 
class="s1_359"
>does return a result, that result is indeed an</text>

<text 
x="55" 
y="1126" 
dx="0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s1_359"
>eigenvector.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
