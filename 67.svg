<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 67 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_67{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_67{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_67{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_67{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_67{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s6_67{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_67{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_67{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s9_67{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s10_67{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_67{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s12_67{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_67"
>args and kwargs</text>

<text 
x="55" 
y="115" 
dx="0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>Letâ€™s say we want to create a higher-order function that takes as input some function</text>

<text 
x="802" 
y="115" 
class="s3_67"
>f</text>

<text 
x="818" 
y="115" 
class="s2_67"
>and</text>

<text 
x="55" 
y="145" 
class="s2_67"
>returns a new function that for any input returns twice the value of</text>

<text 
x="644" 
y="145" 
class="s3_67"
>f</text>

<text 
x="654" 
y="145" 
class="s2_67"
>:</text>

<text 
x="76" 
y="192" 
class="s4_67"
>def</text>

<text 
x="108" 
y="192" 
class="s5_67"
>doubler</text>

<text 
x="163" 
y="192" 
class="s6_67"
>(</text>

<text 
x="171" 
y="192" 
class="s7_67"
>f</text>

<text 
x="179" 
y="192" 
class="s6_67"
>):</text>

<text 
x="108" 
y="207" 
class="s4_67"
>def</text>

<text 
x="140" 
y="207" 
class="s5_67"
>g</text>

<text 
x="148" 
y="207" 
class="s6_67"
>(</text>

<text 
x="156" 
y="207" 
class="s7_67"
>x</text>

<text 
x="163" 
y="207" 
class="s6_67"
>):</text>

<text 
x="140" 
y="223" 
class="s4_67"
>return</text>

<text 
x="195" 
y="223" 
class="s8_67"
>2</text>

<text 
x="211" 
y="223" 
class="s6_67"
>*</text>

<text 
x="227" 
y="223" 
class="s7_67"
>f</text>

<text 
x="235" 
y="223" 
class="s6_67"
>(</text>

<text 
x="242" 
y="223" 
class="s7_67"
>x</text>

<text 
x="250" 
y="223" 
class="s6_67"
>)</text>

<text 
x="108" 
y="238" 
class="s4_67"
>return</text>

<text 
x="163" 
y="238" 
class="s7_67"
>g</text>

<text 
x="55" 
y="291" 
class="s2_67"
>This works in some cases:</text>

<text 
x="76" 
y="336" 
class="s4_67"
>def</text>

<text 
x="108" 
y="336" 
class="s5_67"
>f1</text>

<text 
x="124" 
y="336" 
class="s6_67"
>(</text>

<text 
x="132" 
y="336" 
class="s7_67"
>x</text>

<text 
x="140" 
y="336" 
class="s6_67"
>):</text>

<text 
x="108" 
y="352" 
class="s4_67"
>return</text>

<text 
x="163" 
y="352" 
class="s7_67"
>x</text>

<text 
x="179" 
y="352" 
class="s6_67"
>+</text>

<text 
x="195" 
y="352" 
class="s8_67"
>1</text>

<text 
x="76" 
y="382" 
class="s7_67"
>g</text>

<text 
x="92" 
y="382" 
class="s6_67"
>=</text>

<text 
x="108" 
y="382" 
class="s7_67"
>doubler</text>

<text 
x="163" 
y="382" 
class="s6_67"
>(</text>

<text 
x="171" 
y="382" 
class="s7_67"
>f1</text>

<text 
x="187" 
y="382" 
class="s6_67"
>)</text>

<text 
x="76" 
y="398" 
class="s4_67"
>print</text>

<text 
x="124" 
y="398" 
class="s7_67"
>g</text>

<text 
x="132" 
y="398" 
class="s6_67"
>(</text>

<text 
x="140" 
y="398" 
class="s8_67"
>3</text>

<text 
x="148" 
y="398" 
class="s6_67"
>)</text>

<text 
x="235" 
y="398" 
dx="0,0,4.6,0,4.6,0,0,0,4.6,0,4.6,0,4.6,0,4.6,0,0,4.6,0,4.6,0" 
class="s9_67"
># 8 (== ( 3 + 1) * 2)</text>

<text 
x="76" 
y="413" 
class="s4_67"
>print</text>

<text 
x="124" 
y="413" 
class="s7_67"
>g</text>

<text 
x="132" 
y="413" 
class="s6_67"
>(-</text>

<text 
x="148" 
y="413" 
class="s8_67"
>1</text>

<text 
x="156" 
y="413" 
class="s6_67"
>)</text>

<text 
x="235" 
y="413" 
dx="0,0,4.6,0,4.6,0,0,0,4.6,0,0,0,4.6,0,4.6,0,0,4.6,0,4.6,0" 
class="s9_67"
># 0 (== (-1 + 1) * 2)</text>

<text 
x="55" 
y="466" 
dx="0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0" 
class="s2_67"
>However, it breaks down with functions that take more than a single argument:</text>

<text 
x="76" 
y="511" 
class="s4_67"
>def</text>

<text 
x="108" 
y="511" 
class="s5_67"
>f2</text>

<text 
x="124" 
y="511" 
class="s6_67"
>(</text>

<text 
x="132" 
y="511" 
class="s7_67"
>x</text>

<text 
x="140" 
y="511" 
class="s6_67"
>,</text>

<text 
x="156" 
y="511" 
class="s7_67"
>y</text>

<text 
x="163" 
y="511" 
class="s6_67"
>):</text>

<text 
x="108" 
y="527" 
class="s4_67"
>return</text>

<text 
x="163" 
y="527" 
class="s7_67"
>x</text>

<text 
x="179" 
y="527" 
class="s6_67"
>+</text>

<text 
x="195" 
y="527" 
class="s7_67"
>y</text>

<text 
x="76" 
y="557" 
class="s7_67"
>g</text>

<text 
x="92" 
y="557" 
class="s6_67"
>=</text>

<text 
x="108" 
y="557" 
class="s7_67"
>doubler</text>

<text 
x="163" 
y="557" 
class="s6_67"
>(</text>

<text 
x="171" 
y="557" 
class="s7_67"
>f2</text>

<text 
x="187" 
y="557" 
class="s6_67"
>)</text>

<text 
x="76" 
y="573" 
class="s4_67"
>print</text>

<text 
x="124" 
y="573" 
class="s7_67"
>g</text>

<text 
x="132" 
y="573" 
class="s6_67"
>(</text>

<text 
x="140" 
y="573" 
class="s8_67"
>1</text>

<text 
x="148" 
y="573" 
class="s6_67"
>,</text>

<text 
x="163" 
y="573" 
class="s8_67"
>2</text>

<text 
x="171" 
y="573" 
class="s6_67"
>)</text>

<text 
x="211" 
y="573" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s9_67"
># TypeError: g() takes exactly 1 argument (2 given)</text>

<text 
x="55" 
y="626" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>What we need is a way to specify a function that takes arbitrary arguments. We can do this</text>

<text 
x="55" 
y="653" 
dx="0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>with argument unpacking and a little bit of magic:</text>

<text 
x="76" 
y="698" 
class="s4_67"
>def</text>

<text 
x="108" 
y="698" 
class="s5_67"
>magic</text>

<text 
x="148" 
y="698" 
class="s6_67"
>(*</text>

<text 
x="163" 
y="698" 
class="s7_67"
>args</text>

<text 
x="195" 
y="698" 
dx="0,0,4.6,0" 
class="s6_67"
>, **</text>

<text 
x="227" 
y="698" 
class="s7_67"
>kwargs</text>

<text 
x="274" 
y="698" 
class="s6_67"
>):</text>

<text 
x="108" 
y="714" 
class="s4_67"
>print</text>

<text 
x="156" 
y="714" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s10_67"
>"unnamed args:"</text>

<text 
x="274" 
y="714" 
class="s6_67"
>,</text>

<text 
x="290" 
y="714" 
class="s7_67"
>args</text>

<text 
x="108" 
y="729" 
class="s4_67"
>print</text>

<text 
x="156" 
y="729" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s10_67"
>"keyword args:"</text>

<text 
x="274" 
y="729" 
class="s6_67"
>,</text>

<text 
x="290" 
y="729" 
class="s7_67"
>kwargs</text>

<text 
x="76" 
y="760" 
class="s7_67"
>magic</text>

<text 
x="116" 
y="760" 
class="s6_67"
>(</text>

<text 
x="124" 
y="760" 
class="s8_67"
>1</text>

<text 
x="132" 
y="760" 
class="s6_67"
>,</text>

<text 
x="148" 
y="760" 
class="s8_67"
>2</text>

<text 
x="156" 
y="760" 
class="s6_67"
>,</text>

<text 
x="171" 
y="760" 
class="s7_67"
>key</text>

<text 
x="195" 
y="760" 
class="s6_67"
>=</text>

<text 
x="203" 
y="760" 
class="s10_67"
>"word"</text>

<text 
x="250" 
y="760" 
class="s6_67"
>,</text>

<text 
x="266" 
y="760" 
class="s7_67"
>key2</text>

<text 
x="298" 
y="760" 
class="s6_67"
>=</text>

<text 
x="306" 
y="760" 
class="s10_67"
>"word2"</text>

<text 
x="361" 
y="760" 
class="s6_67"
>)</text>

<text 
x="76" 
y="791" 
dx="0,0,4.6,0,0,0,0,0" 
class="s9_67"
># prints</text>

<text 
x="76" 
y="806" 
class="s9_67"
>#</text>

<text 
x="100" 
y="806" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0" 
class="s9_67"
>unnamed args: (1, 2)</text>

<text 
x="76" 
y="821" 
class="s9_67"
>#</text>

<text 
x="100" 
y="821" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s9_67"
>keyword args: {'key2': 'word2', 'key': 'word'}</text>

<text 
x="55" 
y="874" 
class="s2_67"
>That is, when we define a function like this,</text>

<text 
x="446" 
y="874" 
class="s3_67"
>args</text>

<text 
x="494" 
y="874" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>is a tuple of its unnamed arguments and</text>

<text 
x="55" 
y="904" 
class="s3_67"
>kwargs</text>

<text 
x="123" 
y="904" 
class="s2_67"
>is a</text>

<text 
x="159" 
y="904" 
class="s3_67"
>dict</text>

<text 
x="206" 
y="904" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>of its named arguments. It works the other way too, if you want to use a</text>

<text 
x="55" 
y="934" 
class="s3_67"
>list</text>

<text 
x="102" 
y="934" 
class="s2_67"
>(or</text>

<text 
x="133" 
y="934" 
class="s3_67"
>tuple</text>

<text 
x="186" 
y="934" 
class="s2_67"
>) and</text>

<text 
x="236" 
y="934" 
class="s3_67"
>dict</text>

<text 
x="284" 
y="934" 
class="s2_67"
>to</text>

<text 
x="306" 
y="934" 
class="s11_67"
>supply</text>

<text 
x="369" 
y="934" 
dx="0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_67"
>arguments to a function:</text>

<text 
x="76" 
y="981" 
class="s4_67"
>def</text>

<text 
x="108" 
y="981" 
class="s5_67"
>other_way_magic</text>

<text 
x="227" 
y="981" 
class="s6_67"
>(</text>

<text 
x="235" 
y="981" 
class="s7_67"
>x</text>

<text 
x="242" 
y="981" 
class="s6_67"
>,</text>

<text 
x="258" 
y="981" 
class="s7_67"
>y</text>

<text 
x="266" 
y="981" 
class="s6_67"
>,</text>

<text 
x="282" 
y="981" 
class="s7_67"
>z</text>

<text 
x="290" 
y="981" 
class="s6_67"
>):</text>

<text 
x="108" 
y="996" 
class="s4_67"
>return</text>

<text 
x="163" 
y="996" 
class="s7_67"
>x</text>

<text 
x="179" 
y="996" 
class="s6_67"
>+</text>

<text 
x="195" 
y="996" 
class="s7_67"
>y</text>

<text 
x="211" 
y="996" 
class="s6_67"
>+</text>

<text 
x="227" 
y="996" 
class="s7_67"
>z</text>

<text 
x="76" 
y="1027" 
class="s7_67"
>x_y_list</text>

<text 
x="148" 
y="1027" 
dx="0,0,4.6" 
class="s6_67"
>= [</text>

<text 
x="171" 
y="1027" 
class="s8_67"
>1</text>

<text 
x="179" 
y="1027" 
class="s6_67"
>,</text>

<text 
x="195" 
y="1027" 
class="s8_67"
>2</text>

<text 
x="203" 
y="1027" 
class="s6_67"
>]</text>

<text 
x="76" 
y="1043" 
class="s7_67"
>z_dict</text>

<text 
x="132" 
y="1043" 
dx="0,0,4.6" 
class="s6_67"
>= {</text>

<text 
x="163" 
y="1043" 
class="s10_67"
>"z"</text>

<text 
x="195" 
y="1043" 
class="s6_67"
>:</text>

<text 
x="211" 
y="1043" 
class="s8_67"
>3</text>

<text 
x="227" 
y="1043" 
class="s6_67"
>}</text>

<text 
x="76" 
y="1058" 
class="s4_67"
>print</text>

<text 
x="124" 
y="1058" 
class="s7_67"
>other_way_magic</text>

<text 
x="242" 
y="1058" 
class="s6_67"
>(*</text>

<text 
x="258" 
y="1058" 
class="s7_67"
>x_y_list</text>

<text 
x="322" 
y="1058" 
dx="0,0,4.6,0" 
class="s6_67"
>, **</text>

<text 
x="353" 
y="1058" 
class="s7_67"
>z_dict</text>

<text 
x="401" 
y="1058" 
class="s6_67"
>)</text>

<text 
x="432" 
y="1058" 
dx="0,0,4.6" 
class="s9_67"
># 6</text>

<text 
x="55" 
y="1111" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5" 
class="s2_67"
>You could do all sorts of strange tricks with this; we will only use it to produce higher-</text>

<text 
x="55" 
y="1138" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0" 
class="s2_67"
>order functions whose inputs can accept arbitrary arguments:</text>

<text 
x="76" 
y="1183" 
class="s4_67"
>def</text>

<text 
x="108" 
y="1183" 
class="s5_67"
>doubler_correct</text>

<text 
x="227" 
y="1183" 
class="s6_67"
>(</text>

<text 
x="235" 
y="1183" 
class="s7_67"
>f</text>

<text 
x="242" 
y="1183" 
class="s6_67"
>):</text>

<text 
x="108" 
y="1199" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s12_67"
>"""works no matter what kind of inputs f expects"""</text>

<text 
x="108" 
y="1214" 
class="s4_67"
>def</text>

<text 
x="140" 
y="1214" 
class="s5_67"
>g</text>

<text 
x="148" 
y="1214" 
class="s6_67"
>(*</text>

<text 
x="163" 
y="1214" 
class="s7_67"
>args</text>

<text 
x="195" 
y="1214" 
dx="0,0,4.6,0" 
class="s6_67"
>, **</text>

<text 
x="227" 
y="1214" 
class="s7_67"
>kwargs</text>

<text 
x="274" 
y="1214" 
class="s6_67"
>):</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
