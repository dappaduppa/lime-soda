<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 221 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_221{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_221{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s3_221{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s4_221{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_221{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_221{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s7_221{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s8_221{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s9_221{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_221{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_221"
>We’ll implement the third:</text>

<text 
x="76" 
y="119" 
class="s2_221"
>def</text>

<text 
x="108" 
y="119" 
class="s3_221"
>majority_vote</text>

<text 
x="211" 
y="119" 
class="s4_221"
>(</text>

<text 
x="219" 
y="119" 
class="s5_221"
>labels</text>

<text 
x="266" 
y="119" 
class="s4_221"
>):</text>

<text 
x="108" 
y="135" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s6_221"
>"""assumes that labels are ordered from nearest to farthest"""</text>

<text 
x="108" 
y="150" 
class="s5_221"
>vote_counts</text>

<text 
x="203" 
y="150" 
class="s4_221"
>=</text>

<text 
x="219" 
y="150" 
class="s5_221"
>Counter</text>

<text 
x="274" 
y="150" 
class="s4_221"
>(</text>

<text 
x="282" 
y="150" 
class="s5_221"
>labels</text>

<text 
x="329" 
y="150" 
class="s4_221"
>)</text>

<text 
x="108" 
y="166" 
class="s5_221"
>winner</text>

<text 
x="156" 
y="166" 
class="s4_221"
>,</text>

<text 
x="171" 
y="166" 
class="s5_221"
>winner_count</text>

<text 
x="274" 
y="166" 
class="s4_221"
>=</text>

<text 
x="290" 
y="166" 
class="s5_221"
>vote_counts</text>

<text 
x="377" 
y="166" 
class="s4_221"
>.</text>

<text 
x="385" 
y="166" 
class="s5_221"
>most_common</text>

<text 
x="472" 
y="166" 
class="s4_221"
>(</text>

<text 
x="480" 
y="166" 
class="s7_221"
>1</text>

<text 
x="487" 
y="166" 
class="s4_221"
>)[</text>

<text 
x="503" 
y="166" 
class="s7_221"
>0</text>

<text 
x="511" 
y="166" 
class="s4_221"
>]</text>

<text 
x="108" 
y="181" 
class="s5_221"
>num_winners</text>

<text 
x="203" 
y="181" 
class="s4_221"
>=</text>

<text 
x="219" 
y="181" 
class="s8_221"
>len</text>

<text 
x="242" 
y="181" 
class="s4_221"
>([</text>

<text 
x="258" 
y="181" 
class="s5_221"
>count</text>

<text 
x="258" 
y="196" 
class="s2_221"
>for</text>

<text 
x="290" 
y="196" 
class="s5_221"
>count</text>

<text 
x="337" 
y="196" 
class="s9_221"
>in</text>

<text 
x="361" 
y="196" 
class="s5_221"
>vote_counts</text>

<text 
x="448" 
y="196" 
class="s4_221"
>.</text>

<text 
x="456" 
y="196" 
class="s5_221"
>values</text>

<text 
x="503" 
y="196" 
class="s4_221"
>()</text>

<text 
x="258" 
y="212" 
class="s2_221"
>if</text>

<text 
x="282" 
y="212" 
class="s5_221"
>count</text>

<text 
x="329" 
y="212" 
class="s4_221"
>==</text>

<text 
x="353" 
y="212" 
class="s5_221"
>winner_count</text>

<text 
x="448" 
y="212" 
class="s4_221"
>])</text>

<text 
x="108" 
y="243" 
class="s2_221"
>if</text>

<text 
x="132" 
y="243" 
class="s5_221"
>num_winners</text>

<text 
x="227" 
y="243" 
class="s4_221"
>==</text>

<text 
x="250" 
y="243" 
class="s7_221"
>1</text>

<text 
x="258" 
y="243" 
class="s4_221"
>:</text>

<text 
x="140" 
y="258" 
class="s2_221"
>return</text>

<text 
x="195" 
y="258" 
class="s5_221"
>winner</text>

<text 
x="408" 
y="258" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0" 
class="s10_221"
># unique winner, so return it</text>

<text 
x="108" 
y="273" 
class="s2_221"
>else</text>

<text 
x="140" 
y="273" 
class="s4_221"
>:</text>

<text 
x="140" 
y="289" 
class="s2_221"
>return</text>

<text 
x="195" 
y="289" 
class="s5_221"
>majority_vote</text>

<text 
x="298" 
y="289" 
class="s4_221"
>(</text>

<text 
x="306" 
y="289" 
class="s5_221"
>labels</text>

<text 
x="353" 
y="289" 
class="s4_221"
>[:-</text>

<text 
x="377" 
y="289" 
class="s7_221"
>1</text>

<text 
x="385" 
y="289" 
class="s4_221"
>])</text>

<text 
x="408" 
y="289" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s10_221"
># try again without the farthest</text>

<text 
x="55" 
y="342" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_221"
>This approach is sure to work eventually, since in the worst case we go all the way down</text>

<text 
x="55" 
y="369" 
class="s1_221"
>to just one label, at which point that one label wins.</text>

<text 
x="55" 
y="408" 
dx="0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_221"
>With this function it’s easy to create a classifier:</text>

<text 
x="76" 
y="453" 
class="s2_221"
>def</text>

<text 
x="108" 
y="453" 
class="s3_221"
>knn_classify</text>

<text 
x="203" 
y="453" 
class="s4_221"
>(</text>

<text 
x="211" 
y="453" 
class="s5_221"
>k</text>

<text 
x="219" 
y="453" 
class="s4_221"
>,</text>

<text 
x="235" 
y="453" 
class="s5_221"
>labeled_points</text>

<text 
x="345" 
y="453" 
class="s4_221"
>,</text>

<text 
x="361" 
y="453" 
class="s5_221"
>new_point</text>

<text 
x="432" 
y="453" 
class="s4_221"
>):</text>

<text 
x="108" 
y="468" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s6_221"
>"""each labeled point should be a pair (point, label)"""</text>

<text 
x="108" 
y="499" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s10_221"
># order the labeled points from nearest to farthest</text>

<text 
x="108" 
y="514" 
class="s5_221"
>by_distance</text>

<text 
x="203" 
y="514" 
class="s4_221"
>=</text>

<text 
x="219" 
y="514" 
class="s8_221"
>sorted</text>

<text 
x="266" 
y="514" 
class="s4_221"
>(</text>

<text 
x="274" 
y="514" 
class="s5_221"
>labeled_points</text>

<text 
x="385" 
y="514" 
class="s4_221"
>,</text>

<text 
x="274" 
y="530" 
class="s5_221"
>key</text>

<text 
x="298" 
y="530" 
class="s4_221"
>=</text>

<text 
x="306" 
y="530" 
class="s2_221"
>lambda</text>

<text 
x="361" 
y="530" 
class="s4_221"
>(</text>

<text 
x="369" 
y="530" 
class="s5_221"
>point</text>

<text 
x="408" 
y="530" 
class="s4_221"
>,</text>

<text 
x="424" 
y="530" 
class="s5_221"
>_</text>

<text 
x="432" 
y="530" 
class="s4_221"
>):</text>

<text 
x="456" 
y="530" 
class="s5_221"
>distance</text>

<text 
x="519" 
y="530" 
class="s4_221"
>(</text>

<text 
x="527" 
y="530" 
class="s5_221"
>point</text>

<text 
x="567" 
y="530" 
class="s4_221"
>,</text>

<text 
x="582" 
y="530" 
class="s5_221"
>new_point</text>

<text 
x="653" 
y="530" 
class="s4_221"
>))</text>

<text 
x="108" 
y="561" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s10_221"
># find the labels for the k closest</text>

<text 
x="108" 
y="576" 
class="s5_221"
>k_nearest_labels</text>

<text 
x="242" 
y="576" 
dx="0,0,4.6" 
class="s4_221"
>= [</text>

<text 
x="266" 
y="576" 
class="s5_221"
>label</text>

<text 
x="314" 
y="576" 
class="s2_221"
>for</text>

<text 
x="345" 
y="576" 
class="s5_221"
>_</text>

<text 
x="353" 
y="576" 
class="s4_221"
>,</text>

<text 
x="369" 
y="576" 
class="s5_221"
>label</text>

<text 
x="416" 
y="576" 
class="s9_221"
>in</text>

<text 
x="440" 
y="576" 
class="s5_221"
>by_distance</text>

<text 
x="527" 
y="576" 
class="s4_221"
>[:</text>

<text 
x="543" 
y="576" 
class="s5_221"
>k</text>

<text 
x="551" 
y="576" 
class="s4_221"
>]]</text>

<text 
x="108" 
y="607" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0" 
class="s10_221"
># and let them vote</text>

<text 
x="108" 
y="622" 
class="s2_221"
>return</text>

<text 
x="163" 
y="622" 
class="s5_221"
>majority_vote</text>

<text 
x="266" 
y="622" 
class="s4_221"
>(</text>

<text 
x="274" 
y="622" 
class="s5_221"
>k_nearest_labels</text>

<text 
x="401" 
y="622" 
class="s4_221"
>)</text>

<text 
x="55" 
y="675" 
dx="0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_221"
>Let’s take a look at how this works.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
