<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 66 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_66{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_66{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_66{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s7_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s8_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s9_66{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s10_66{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s11_66{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s12_66{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_66"
>zip and Argument Unpacking</text>

<text 
x="55" 
y="115" 
class="s2_66"
>Often we will need to</text>

<text 
x="250" 
y="115" 
class="s3_66"
>zip</text>

<text 
x="288" 
y="115" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_66"
>two or more lists together.</text>

<text 
x="523" 
y="115" 
class="s3_66"
>zip</text>

<text 
x="560" 
y="115" 
class="s2_66"
>transforms multiple lists into a</text>

<text 
x="55" 
y="145" 
class="s2_66"
>single list of tuples of corresponding elements:</text>

<text 
x="76" 
y="190" 
class="s4_66"
>list1</text>

<text 
x="124" 
y="190" 
dx="0,0,4.6" 
class="s5_66"
>= [</text>

<text 
x="148" 
y="190" 
class="s6_66"
>'a'</text>

<text 
x="171" 
y="190" 
class="s5_66"
>,</text>

<text 
x="187" 
y="190" 
class="s6_66"
>'b'</text>

<text 
x="211" 
y="190" 
class="s5_66"
>,</text>

<text 
x="227" 
y="190" 
class="s6_66"
>'c'</text>

<text 
x="250" 
y="190" 
class="s5_66"
>]</text>

<text 
x="76" 
y="205" 
class="s4_66"
>list2</text>

<text 
x="124" 
y="205" 
dx="0,0,4.6" 
class="s5_66"
>= [</text>

<text 
x="148" 
y="205" 
class="s7_66"
>1</text>

<text 
x="156" 
y="205" 
class="s5_66"
>,</text>

<text 
x="171" 
y="205" 
class="s7_66"
>2</text>

<text 
x="179" 
y="205" 
class="s5_66"
>,</text>

<text 
x="195" 
y="205" 
class="s7_66"
>3</text>

<text 
x="203" 
y="205" 
class="s5_66"
>]</text>

<text 
x="76" 
y="221" 
class="s8_66"
>zip</text>

<text 
x="100" 
y="221" 
class="s5_66"
>(</text>

<text 
x="108" 
y="221" 
class="s4_66"
>list1</text>

<text 
x="148" 
y="221" 
class="s5_66"
>,</text>

<text 
x="163" 
y="221" 
class="s4_66"
>list2</text>

<text 
x="203" 
y="221" 
class="s5_66"
>)</text>

<text 
x="274" 
y="221" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0" 
class="s9_66"
># is [('a', 1), ('b', 2), ('c', 3)]</text>

<text 
x="55" 
y="273" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_66"
>If the lists are different lengths,</text>

<text 
x="336" 
y="273" 
class="s3_66"
>zip</text>

<text 
x="373" 
y="273" 
class="s2_66"
>stops as soon as the first list ends.</text>

<text 
x="55" 
y="314" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_66"
>You can also “unzip” a list using a strange trick:</text>

<text 
x="76" 
y="359" 
class="s4_66"
>pairs</text>

<text 
x="124" 
y="359" 
dx="0,0,4.6,0" 
class="s5_66"
>= [(</text>

<text 
x="156" 
y="359" 
class="s6_66"
>'a'</text>

<text 
x="179" 
y="359" 
class="s5_66"
>,</text>

<text 
x="195" 
y="359" 
class="s7_66"
>1</text>

<text 
x="203" 
y="359" 
dx="0,0,0,4.6" 
class="s5_66"
>), (</text>

<text 
x="235" 
y="359" 
class="s6_66"
>'b'</text>

<text 
x="258" 
y="359" 
class="s5_66"
>,</text>

<text 
x="274" 
y="359" 
class="s7_66"
>2</text>

<text 
x="282" 
y="359" 
dx="0,0,0,4.6" 
class="s5_66"
>), (</text>

<text 
x="314" 
y="359" 
class="s6_66"
>'c'</text>

<text 
x="337" 
y="359" 
class="s5_66"
>,</text>

<text 
x="353" 
y="359" 
class="s7_66"
>3</text>

<text 
x="361" 
y="359" 
class="s5_66"
>)]</text>

<text 
x="76" 
y="375" 
class="s4_66"
>letters</text>

<text 
x="132" 
y="375" 
class="s5_66"
>,</text>

<text 
x="148" 
y="375" 
class="s4_66"
>numbers</text>

<text 
x="211" 
y="375" 
class="s5_66"
>=</text>

<text 
x="227" 
y="375" 
class="s8_66"
>zip</text>

<text 
x="250" 
y="375" 
class="s5_66"
>(*</text>

<text 
x="266" 
y="375" 
class="s4_66"
>pairs</text>

<text 
x="306" 
y="375" 
class="s5_66"
>)</text>

<text 
x="55" 
y="428" 
class="s2_66"
>The asterisk performs</text>

<text 
x="252" 
y="428" 
dx="0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_66"
>argument unpacking</text>

<text 
x="432" 
y="428" 
class="s2_66"
>, which uses the elements of</text>

<text 
x="686" 
y="428" 
class="s3_66"
>pairs</text>

<text 
x="744" 
y="428" 
class="s2_66"
>as</text>

<text 
x="55" 
y="457" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0" 
class="s2_66"
>individual arguments to</text>

<text 
x="268" 
y="457" 
class="s3_66"
>zip</text>

<text 
x="300" 
y="457" 
class="s2_66"
>. It ends up the same as if you’d called:</text>

<text 
x="76" 
y="505" 
class="s8_66"
>zip</text>

<text 
x="100" 
y="505" 
class="s5_66"
>((</text>

<text 
x="116" 
y="505" 
class="s6_66"
>'a'</text>

<text 
x="140" 
y="505" 
class="s5_66"
>,</text>

<text 
x="156" 
y="505" 
class="s7_66"
>1</text>

<text 
x="163" 
y="505" 
dx="0,0,0,4.6" 
class="s5_66"
>), (</text>

<text 
x="195" 
y="505" 
class="s6_66"
>'b'</text>

<text 
x="219" 
y="505" 
class="s5_66"
>,</text>

<text 
x="235" 
y="505" 
class="s7_66"
>2</text>

<text 
x="242" 
y="505" 
dx="0,0,0,4.6" 
class="s5_66"
>), (</text>

<text 
x="274" 
y="505" 
class="s6_66"
>'c'</text>

<text 
x="298" 
y="505" 
class="s5_66"
>,</text>

<text 
x="314" 
y="505" 
class="s7_66"
>3</text>

<text 
x="322" 
y="505" 
class="s5_66"
>))</text>

<text 
x="55" 
y="557" 
class="s2_66"
>which returns</text>

<text 
x="180" 
y="557" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.1,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s3_66"
>[('a','b','c'), ('1','2','3')]</text>

<text 
x="497" 
y="557" 
class="s2_66"
>.</text>

<text 
x="55" 
y="598" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_66"
>You can use argument unpacking with any function:</text>

<text 
x="76" 
y="643" 
class="s11_66"
>def</text>

<text 
x="108" 
y="643" 
class="s12_66"
>add</text>

<text 
x="132" 
y="643" 
class="s5_66"
>(</text>

<text 
x="140" 
y="643" 
class="s4_66"
>a</text>

<text 
x="148" 
y="643" 
class="s5_66"
>,</text>

<text 
x="163" 
y="643" 
class="s4_66"
>b</text>

<text 
x="171" 
y="643" 
class="s5_66"
>):</text>

<text 
x="195" 
y="643" 
class="s11_66"
>return</text>

<text 
x="250" 
y="643" 
class="s4_66"
>a</text>

<text 
x="266" 
y="643" 
class="s5_66"
>+</text>

<text 
x="282" 
y="643" 
class="s4_66"
>b</text>

<text 
x="76" 
y="674" 
class="s4_66"
>add</text>

<text 
x="100" 
y="674" 
class="s5_66"
>(</text>

<text 
x="108" 
y="674" 
class="s7_66"
>1</text>

<text 
x="116" 
y="674" 
class="s5_66"
>,</text>

<text 
x="132" 
y="674" 
class="s7_66"
>2</text>

<text 
x="140" 
y="674" 
class="s5_66"
>)</text>

<text 
x="195" 
y="674" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6" 
class="s9_66"
># returns 3</text>

<text 
x="76" 
y="689" 
class="s4_66"
>add</text>

<text 
x="100" 
y="689" 
class="s5_66"
>([</text>

<text 
x="116" 
y="689" 
class="s7_66"
>1</text>

<text 
x="124" 
y="689" 
class="s5_66"
>,</text>

<text 
x="140" 
y="689" 
class="s7_66"
>2</text>

<text 
x="148" 
y="689" 
class="s5_66"
>])</text>

<text 
x="195" 
y="689" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s9_66"
># TypeError!</text>

<text 
x="76" 
y="705" 
class="s4_66"
>add</text>

<text 
x="100" 
y="705" 
class="s5_66"
>(*[</text>

<text 
x="124" 
y="705" 
class="s7_66"
>1</text>

<text 
x="132" 
y="705" 
class="s5_66"
>,</text>

<text 
x="148" 
y="705" 
class="s7_66"
>2</text>

<text 
x="156" 
y="705" 
class="s5_66"
>])</text>

<text 
x="195" 
y="705" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6" 
class="s9_66"
># returns 3</text>

<text 
x="55" 
y="758" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_66"
>It is rare that we’ll find this useful, but when we do it’s a neat trick.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
