<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 297 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_297{
fill: #BEBEBE;
}

.s1_297{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s2_297{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s3_297{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s4_297{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s5_297{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s6_297{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_297{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s8_297{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s9_297{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s10_297{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_297{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s12_297{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s13_297{
font-size: 16.50px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,981.4l722.5,0c3,0,5.5,2.5,5.5,5.5l0,96.9c0,3,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.5,-5.5,-5.5l0,-96.9c0,-3,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,2,4.4,4.4l0,96.9c0,2.4,-2,4.4,-4.4,4.4l-722.5,0c-2.4,0,-4.4,-2,-4.4,-4.4l0,-96.9c0,-2.4,2,-4.4,4.4,-4.4Z" class="g1_297" />
<text 
x="108" 
y="64" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0" 
class="s1_297"
># if this is our first pass,</text>

<text 
x="108" 
y="80" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s1_297"
># all keys of the first input are split candidates</text>

<text 
x="108" 
y="95" 
class="s2_297"
>if</text>

<text 
x="132" 
y="95" 
class="s3_297"
>split_candidates</text>

<text 
x="266" 
y="95" 
class="s4_297"
>is</text>

<text 
x="290" 
y="95" 
class="s5_297"
>None</text>

<text 
x="322" 
y="95" 
class="s6_297"
>:</text>

<text 
x="140" 
y="111" 
class="s3_297"
>split_candidates</text>

<text 
x="274" 
y="111" 
class="s6_297"
>=</text>

<text 
x="290" 
y="111" 
class="s3_297"
>inputs</text>

<text 
x="337" 
y="111" 
class="s6_297"
>[</text>

<text 
x="345" 
y="111" 
class="s7_297"
>0</text>

<text 
x="353" 
y="111" 
class="s6_297"
>][</text>

<text 
x="369" 
y="111" 
class="s7_297"
>0</text>

<text 
x="377" 
y="111" 
class="s6_297"
>].</text>

<text 
x="393" 
y="111" 
class="s3_297"
>keys</text>

<text 
x="424" 
y="111" 
class="s6_297"
>()</text>

<text 
x="108" 
y="141" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0" 
class="s1_297"
># count Trues and Falses in the inputs</text>

<text 
x="108" 
y="157" 
class="s3_297"
>num_inputs</text>

<text 
x="195" 
y="157" 
class="s6_297"
>=</text>

<text 
x="211" 
y="157" 
class="s5_297"
>len</text>

<text 
x="235" 
y="157" 
class="s6_297"
>(</text>

<text 
x="242" 
y="157" 
class="s3_297"
>inputs</text>

<text 
x="290" 
y="157" 
class="s6_297"
>)</text>

<text 
x="108" 
y="172" 
class="s3_297"
>num_trues</text>

<text 
x="187" 
y="172" 
class="s6_297"
>=</text>

<text 
x="203" 
y="172" 
class="s5_297"
>len</text>

<text 
x="227" 
y="172" 
class="s6_297"
>([</text>

<text 
x="242" 
y="172" 
class="s3_297"
>label</text>

<text 
x="290" 
y="172" 
class="s2_297"
>for</text>

<text 
x="322" 
y="172" 
class="s3_297"
>item</text>

<text 
x="353" 
y="172" 
class="s6_297"
>,</text>

<text 
x="369" 
y="172" 
class="s3_297"
>label</text>

<text 
x="416" 
y="172" 
class="s4_297"
>in</text>

<text 
x="440" 
y="172" 
class="s3_297"
>inputs</text>

<text 
x="495" 
y="172" 
class="s2_297"
>if</text>

<text 
x="519" 
y="172" 
class="s3_297"
>label</text>

<text 
x="559" 
y="172" 
class="s6_297"
>])</text>

<text 
x="108" 
y="188" 
class="s3_297"
>num_falses</text>

<text 
x="195" 
y="188" 
class="s6_297"
>=</text>

<text 
x="211" 
y="188" 
class="s3_297"
>num_inputs</text>

<text 
x="298" 
y="188" 
class="s6_297"
>-</text>

<text 
x="314" 
y="188" 
class="s3_297"
>num_trues</text>

<text 
x="108" 
y="218" 
class="s2_297"
>if</text>

<text 
x="132" 
y="218" 
class="s3_297"
>num_trues</text>

<text 
x="211" 
y="218" 
class="s6_297"
>==</text>

<text 
x="235" 
y="218" 
class="s7_297"
>0</text>

<text 
x="242" 
y="218" 
class="s6_297"
>:</text>

<text 
x="258" 
y="218" 
class="s2_297"
>return</text>

<text 
x="314" 
y="218" 
class="s5_297"
>False</text>

<text 
x="393" 
y="218" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s1_297"
># no Trues? return a "False" leaf</text>

<text 
x="108" 
y="234" 
class="s2_297"
>if</text>

<text 
x="132" 
y="234" 
class="s3_297"
>num_falses</text>

<text 
x="219" 
y="234" 
class="s6_297"
>==</text>

<text 
x="242" 
y="234" 
class="s7_297"
>0</text>

<text 
x="250" 
y="234" 
class="s6_297"
>:</text>

<text 
x="266" 
y="234" 
class="s2_297"
>return</text>

<text 
x="322" 
y="234" 
class="s5_297"
>True</text>

<text 
x="393" 
y="234" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,0" 
class="s1_297"
># no Falses? return a "True" leaf</text>

<text 
x="108" 
y="265" 
class="s2_297"
>if</text>

<text 
x="132" 
y="265" 
class="s4_297"
>not</text>

<text 
x="163" 
y="265" 
class="s3_297"
>split_candidates</text>

<text 
x="290" 
y="265" 
class="s6_297"
>:</text>

<text 
x="393" 
y="265" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s1_297"
># if no split candidates left</text>

<text 
x="140" 
y="280" 
class="s2_297"
>return</text>

<text 
x="195" 
y="280" 
class="s3_297"
>num_trues</text>

<text 
x="274" 
y="280" 
class="s6_297"
>&gt;=</text>

<text 
x="298" 
y="280" 
class="s3_297"
>num_falses</text>

<text 
x="393" 
y="280" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s1_297"
># return the majority leaf</text>

<text 
x="108" 
y="311" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s1_297"
># otherwise, split on the best attribute</text>

<text 
x="108" 
y="326" 
class="s3_297"
>best_attribute</text>

<text 
x="227" 
y="326" 
class="s6_297"
>=</text>

<text 
x="242" 
y="326" 
class="s5_297"
>min</text>

<text 
x="266" 
y="326" 
class="s6_297"
>(</text>

<text 
x="274" 
y="326" 
class="s3_297"
>split_candidates</text>

<text 
x="401" 
y="326" 
class="s6_297"
>,</text>

<text 
x="274" 
y="342" 
class="s3_297"
>key</text>

<text 
x="298" 
y="342" 
class="s6_297"
>=</text>

<text 
x="306" 
y="342" 
class="s3_297"
>partial</text>

<text 
x="361" 
y="342" 
class="s6_297"
>(</text>

<text 
x="369" 
y="342" 
class="s3_297"
>partition_entropy_by</text>

<text 
x="527" 
y="342" 
class="s6_297"
>,</text>

<text 
x="543" 
y="342" 
class="s3_297"
>inputs</text>

<text 
x="590" 
y="342" 
class="s6_297"
>))</text>

<text 
x="108" 
y="372" 
class="s3_297"
>partitions</text>

<text 
x="195" 
y="372" 
class="s6_297"
>=</text>

<text 
x="211" 
y="372" 
class="s3_297"
>partition_by</text>

<text 
x="306" 
y="372" 
class="s6_297"
>(</text>

<text 
x="314" 
y="372" 
class="s3_297"
>inputs</text>

<text 
x="361" 
y="372" 
class="s6_297"
>,</text>

<text 
x="377" 
y="372" 
class="s3_297"
>best_attribute</text>

<text 
x="487" 
y="372" 
class="s6_297"
>)</text>

<text 
x="108" 
y="388" 
class="s3_297"
>new_candidates</text>

<text 
x="227" 
y="388" 
dx="0,0,4.6" 
class="s6_297"
>= [</text>

<text 
x="250" 
y="388" 
class="s3_297"
>a</text>

<text 
x="266" 
y="388" 
class="s2_297"
>for</text>

<text 
x="298" 
y="388" 
class="s3_297"
>a</text>

<text 
x="314" 
y="388" 
class="s4_297"
>in</text>

<text 
x="337" 
y="388" 
class="s3_297"
>split_candidates</text>

<text 
x="250" 
y="403" 
class="s2_297"
>if</text>

<text 
x="274" 
y="403" 
class="s3_297"
>a</text>

<text 
x="290" 
y="403" 
class="s6_297"
>!=</text>

<text 
x="314" 
y="403" 
class="s3_297"
>best_attribute</text>

<text 
x="424" 
y="403" 
class="s6_297"
>]</text>

<text 
x="108" 
y="434" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s1_297"
># recursively build the subtrees</text>

<text 
x="108" 
y="450" 
class="s3_297"
>subtrees</text>

<text 
x="179" 
y="450" 
dx="0,0,4.6" 
class="s6_297"
>= {</text>

<text 
x="211" 
y="450" 
class="s3_297"
>attribute_value</text>

<text 
x="337" 
y="450" 
class="s6_297"
>:</text>

<text 
x="353" 
y="450" 
class="s3_297"
>build_tree_id3</text>

<text 
x="464" 
y="450" 
class="s6_297"
>(</text>

<text 
x="472" 
y="450" 
class="s3_297"
>subset</text>

<text 
x="519" 
y="450" 
class="s6_297"
>,</text>

<text 
x="535" 
y="450" 
class="s3_297"
>new_candidates</text>

<text 
x="646" 
y="450" 
class="s6_297"
>)</text>

<text 
x="211" 
y="465" 
class="s2_297"
>for</text>

<text 
x="242" 
y="465" 
class="s3_297"
>attribute_value</text>

<text 
x="361" 
y="465" 
class="s6_297"
>,</text>

<text 
x="377" 
y="465" 
class="s3_297"
>subset</text>

<text 
x="432" 
y="465" 
class="s4_297"
>in</text>

<text 
x="456" 
y="465" 
class="s3_297"
>partitions</text>

<text 
x="535" 
y="465" 
class="s6_297"
>.</text>

<text 
x="543" 
y="465" 
class="s3_297"
>iteritems</text>

<text 
x="614" 
y="465" 
dx="0,0,0,4.6" 
class="s6_297"
>() }</text>

<text 
x="108" 
y="496" 
class="s3_297"
>subtrees</text>

<text 
x="171" 
y="496" 
class="s6_297"
>[</text>

<text 
x="179" 
y="496" 
class="s5_297"
>None</text>

<text 
x="211" 
y="496" 
dx="0,0,4.6" 
class="s6_297"
>] =</text>

<text 
x="242" 
y="496" 
class="s3_297"
>num_trues</text>

<text 
x="322" 
y="496" 
class="s6_297"
>&gt;</text>

<text 
x="337" 
y="496" 
class="s3_297"
>num_falses</text>

<text 
x="464" 
y="496" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s1_297"
># default case</text>

<text 
x="108" 
y="527" 
class="s2_297"
>return</text>

<text 
x="163" 
y="527" 
class="s6_297"
>(</text>

<text 
x="171" 
y="527" 
class="s3_297"
>best_attribute</text>

<text 
x="282" 
y="527" 
class="s6_297"
>,</text>

<text 
x="298" 
y="527" 
class="s3_297"
>subtrees</text>

<text 
x="361" 
y="527" 
class="s6_297"
>)</text>

<text 
x="55" 
y="579" 
class="s8_297"
>In the tree we built, every leaf consisted entirely of</text>

<text 
x="508" 
y="579" 
class="s9_297"
>True</text>

<text 
x="556" 
y="579" 
class="s8_297"
>inputs or entirely of</text>

<text 
x="735" 
y="579" 
class="s9_297"
>False</text>

<text 
x="793" 
y="579" 
class="s8_297"
>inputs.</text>

<text 
x="55" 
y="609" 
class="s8_297"
>This means that the tree predicts perfectly on the training data set. But we can also apply it</text>

<text 
x="55" 
y="637" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_297"
>to new data that wasn’t in the training set:</text>

<text 
x="76" 
y="682" 
class="s3_297"
>tree</text>

<text 
x="116" 
y="682" 
class="s6_297"
>=</text>

<text 
x="132" 
y="682" 
class="s3_297"
>build_tree_id3</text>

<text 
x="242" 
y="682" 
class="s6_297"
>(</text>

<text 
x="250" 
y="682" 
class="s3_297"
>inputs</text>

<text 
x="298" 
y="682" 
class="s6_297"
>)</text>

<text 
x="76" 
y="712" 
class="s3_297"
>classify</text>

<text 
x="140" 
y="712" 
class="s6_297"
>(</text>

<text 
x="148" 
y="712" 
class="s3_297"
>tree</text>

<text 
x="179" 
y="712" 
dx="0,0,4.6" 
class="s6_297"
>, {</text>

<text 
x="211" 
y="712" 
class="s10_297"
>"level"</text>

<text 
x="274" 
y="712" 
class="s6_297"
>:</text>

<text 
x="290" 
y="712" 
class="s10_297"
>"Junior"</text>

<text 
x="353" 
y="712" 
class="s6_297"
>,</text>

<text 
x="211" 
y="728" 
class="s10_297"
>"lang"</text>

<text 
x="266" 
y="728" 
class="s6_297"
>:</text>

<text 
x="282" 
y="728" 
class="s10_297"
>"Java"</text>

<text 
x="329" 
y="728" 
class="s6_297"
>,</text>

<text 
x="211" 
y="743" 
class="s10_297"
>"tweets"</text>

<text 
x="282" 
y="743" 
class="s6_297"
>:</text>

<text 
x="298" 
y="743" 
class="s10_297"
>"yes"</text>

<text 
x="337" 
y="743" 
class="s6_297"
>,</text>

<text 
x="211" 
y="759" 
class="s10_297"
>"phd"</text>

<text 
x="258" 
y="759" 
class="s6_297"
>:</text>

<text 
x="274" 
y="759" 
class="s10_297"
>"no"</text>

<text 
x="306" 
y="759" 
dx="0,0,4.6" 
class="s6_297"
>} )</text>

<text 
x="393" 
y="759" 
dx="0,0,4.6,0,0,0" 
class="s1_297"
># True</text>

<text 
x="76" 
y="789" 
class="s3_297"
>classify</text>

<text 
x="140" 
y="789" 
class="s6_297"
>(</text>

<text 
x="148" 
y="789" 
class="s3_297"
>tree</text>

<text 
x="179" 
y="789" 
dx="0,0,4.6" 
class="s6_297"
>, {</text>

<text 
x="211" 
y="789" 
class="s10_297"
>"level"</text>

<text 
x="274" 
y="789" 
class="s6_297"
>:</text>

<text 
x="290" 
y="789" 
class="s10_297"
>"Junior"</text>

<text 
x="353" 
y="789" 
class="s6_297"
>,</text>

<text 
x="211" 
y="805" 
class="s10_297"
>"lang"</text>

<text 
x="266" 
y="805" 
class="s6_297"
>:</text>

<text 
x="282" 
y="805" 
class="s10_297"
>"Java"</text>

<text 
x="329" 
y="805" 
class="s6_297"
>,</text>

<text 
x="211" 
y="820" 
class="s10_297"
>"tweets"</text>

<text 
x="282" 
y="820" 
class="s6_297"
>:</text>

<text 
x="298" 
y="820" 
class="s10_297"
>"yes"</text>

<text 
x="337" 
y="820" 
class="s6_297"
>,</text>

<text 
x="211" 
y="836" 
class="s10_297"
>"phd"</text>

<text 
x="258" 
y="836" 
class="s6_297"
>:</text>

<text 
x="274" 
y="836" 
class="s10_297"
>"yes"</text>

<text 
x="314" 
y="836" 
dx="0,0,4.6" 
class="s6_297"
>} )</text>

<text 
x="393" 
y="836" 
dx="0,0,4.6,0,0,0,0" 
class="s1_297"
># False</text>

<text 
x="55" 
y="889" 
class="s8_297"
>And also to data with missing or unexpected values:</text>

<text 
x="76" 
y="934" 
class="s3_297"
>classify</text>

<text 
x="140" 
y="934" 
class="s6_297"
>(</text>

<text 
x="148" 
y="934" 
class="s3_297"
>tree</text>

<text 
x="179" 
y="934" 
dx="0,0,4.6" 
class="s6_297"
>, {</text>

<text 
x="211" 
y="934" 
class="s10_297"
>"level"</text>

<text 
x="274" 
y="934" 
class="s6_297"
>:</text>

<text 
x="290" 
y="934" 
class="s10_297"
>"Intern"</text>

<text 
x="361" 
y="934" 
dx="0,0,4.6" 
class="s6_297"
>} )</text>

<text 
x="393" 
y="934" 
dx="0,0,4.6,0,0,0" 
class="s1_297"
># True</text>

<text 
x="76" 
y="949" 
class="s3_297"
>classify</text>

<text 
x="140" 
y="949" 
class="s6_297"
>(</text>

<text 
x="148" 
y="949" 
class="s3_297"
>tree</text>

<text 
x="179" 
y="949" 
dx="0,0,4.6" 
class="s6_297"
>, {</text>

<text 
x="211" 
y="949" 
class="s10_297"
>"level"</text>

<text 
x="274" 
y="949" 
class="s6_297"
>:</text>

<text 
x="290" 
y="949" 
class="s10_297"
>"Senior"</text>

<text 
x="361" 
y="949" 
dx="0,0,4.6" 
class="s6_297"
>} )</text>

<text 
x="393" 
y="949" 
dx="0,0,4.6,0,0,0,0" 
class="s1_297"
># False</text>

<text 
x="421" 
y="1006" 
dx="0,1.1,1.1,1.1" 
class="s11_297"
>NOTE</text>

<text 
x="97" 
y="1036" 
class="s12_297"
>Since our goal was mainly to demonstrate</text>

<text 
x="378" 
y="1036" 
class="s13_297"
>how</text>

<text 
x="410" 
y="1036" 
class="s12_297"
>to build a tree, we built the tree using the entire data set. As</text>

<text 
x="97" 
y="1056" 
class="s12_297"
>always, if we were really trying to create a good model for something, we would have (collected more data</text>

<text 
x="97" 
y="1076" 
class="s12_297"
>and) split the data into train/validation/test subsets.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

]]></style>

</svg>
