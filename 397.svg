<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 397 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_397{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_397{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_397{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s4_397{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s5_397{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_397{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s7_397{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s8_397{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s9_397{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s10_397{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s11_397{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s12_397{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
dx="0,0,0,0,0,0,0,0,0,0,-1.7,0,0,0,0,0,0,0,0" 
class="s1_397"
>Example: Word Count</text>

<text 
x="55" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0" 
class="s2_397"
>DataSciencester has grown to millions of users! This is great for your job security, but it</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0" 
class="s2_397"
>makes routine analyses slightly more difficult.</text>

<text 
x="55" 
y="188" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_397"
>For example, your VP of Content wants to know what sorts of things people are talking</text>

<text 
x="55" 
y="215" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9" 
class="s2_397"
>about in their status updates. As a first attempt, you decide to count the words that appear,</text>

<text 
x="55" 
y="243" 
class="s2_397"
>so that you can prepare a report on the most frequent ones.</text>

<text 
x="55" 
y="281" 
class="s2_397"
>When you had a few hundred users this was simple to do:</text>

<text 
x="76" 
y="326" 
class="s3_397"
>def</text>

<text 
x="108" 
y="326" 
class="s4_397"
>word_count_old</text>

<text 
x="219" 
y="326" 
class="s5_397"
>(</text>

<text 
x="227" 
y="326" 
class="s6_397"
>documents</text>

<text 
x="298" 
y="326" 
class="s5_397"
>):</text>

<text 
x="108" 
y="342" 
dx="0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_397"
>"""word count not using MapReduce"""</text>

<text 
x="108" 
y="357" 
class="s3_397"
>return</text>

<text 
x="163" 
y="357" 
class="s6_397"
>Counter</text>

<text 
x="219" 
y="357" 
class="s5_397"
>(</text>

<text 
x="227" 
y="357" 
class="s6_397"
>word</text>

<text 
x="140" 
y="372" 
class="s3_397"
>for</text>

<text 
x="171" 
y="372" 
class="s6_397"
>document</text>

<text 
x="242" 
y="372" 
class="s8_397"
>in</text>

<text 
x="266" 
y="372" 
class="s6_397"
>documents</text>

<text 
x="140" 
y="388" 
class="s3_397"
>for</text>

<text 
x="171" 
y="388" 
class="s6_397"
>word</text>

<text 
x="211" 
y="388" 
class="s8_397"
>in</text>

<text 
x="235" 
y="388" 
class="s6_397"
>tokenize</text>

<text 
x="298" 
y="388" 
class="s5_397"
>(</text>

<text 
x="306" 
y="388" 
class="s6_397"
>document</text>

<text 
x="369" 
y="388" 
class="s5_397"
>))</text>

<text 
x="55" 
y="441" 
dx="0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_397"
>With millions of users the set of</text>

<text 
x="341" 
y="441" 
class="s9_397"
>documents</text>

<text 
x="442" 
y="441" 
class="s2_397"
>(status updates) is suddenly too big to fit on</text>

<text 
x="55" 
y="470" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_397"
>your computer. If you can just fit this into the MapReduce model, you can use some “big</text>

<text 
x="55" 
y="498" 
class="s2_397"
>data” infrastructure that your engineers have implemented.</text>

<text 
x="55" 
y="536" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0" 
class="s2_397"
>First, we need a function that turns a document into a sequence of key-value pairs. We’ll</text>

<text 
x="55" 
y="564" 
class="s2_397"
>want our output to be grouped by word, which means that the keys should be words. And</text>

<text 
x="55" 
y="591" 
class="s2_397"
>for each word, we’ll just emit the value</text>

<text 
x="406" 
y="591" 
class="s9_397"
>1</text>

<text 
x="422" 
y="591" 
class="s2_397"
>to indicate that this pair corresponds to one</text>

<text 
x="55" 
y="621" 
class="s2_397"
>occurrence of the word:</text>

<text 
x="76" 
y="666" 
class="s3_397"
>def</text>

<text 
x="108" 
y="666" 
class="s4_397"
>wc_mapper</text>

<text 
x="179" 
y="666" 
class="s5_397"
>(</text>

<text 
x="187" 
y="666" 
class="s6_397"
>document</text>

<text 
x="250" 
y="666" 
class="s5_397"
>):</text>

<text 
x="108" 
y="682" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s7_397"
>"""for each word in the document, emit (word,1)"""</text>

<text 
x="108" 
y="697" 
class="s3_397"
>for</text>

<text 
x="140" 
y="697" 
class="s6_397"
>word</text>

<text 
x="179" 
y="697" 
class="s8_397"
>in</text>

<text 
x="203" 
y="697" 
class="s6_397"
>tokenize</text>

<text 
x="266" 
y="697" 
class="s5_397"
>(</text>

<text 
x="274" 
y="697" 
class="s6_397"
>document</text>

<text 
x="337" 
y="697" 
class="s5_397"
>):</text>

<text 
x="140" 
y="712" 
class="s3_397"
>yield</text>

<text 
x="187" 
y="712" 
class="s5_397"
>(</text>

<text 
x="195" 
y="712" 
class="s6_397"
>word</text>

<text 
x="227" 
y="712" 
class="s5_397"
>,</text>

<text 
x="242" 
y="712" 
class="s10_397"
>1</text>

<text 
x="250" 
y="712" 
class="s5_397"
>)</text>

<text 
x="55" 
y="765" 
class="s2_397"
>Skipping the “plumbing” step 2 for the moment, imagine that for some word we’ve</text>

<text 
x="55" 
y="793" 
class="s2_397"
>collected a list of the corresponding counts we emitted. Then to produce the overall count</text>

<text 
x="55" 
y="820" 
class="s2_397"
>for that word we just need:</text>

<text 
x="76" 
y="865" 
class="s3_397"
>def</text>

<text 
x="108" 
y="865" 
class="s4_397"
>wc_reducer</text>

<text 
x="187" 
y="865" 
class="s5_397"
>(</text>

<text 
x="195" 
y="865" 
class="s6_397"
>word</text>

<text 
x="227" 
y="865" 
class="s5_397"
>,</text>

<text 
x="242" 
y="865" 
class="s6_397"
>counts</text>

<text 
x="290" 
y="865" 
class="s5_397"
>):</text>

<text 
x="108" 
y="881" 
dx="0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s7_397"
>"""sum up the counts for a word"""</text>

<text 
x="108" 
y="896" 
class="s3_397"
>yield</text>

<text 
x="156" 
y="896" 
class="s5_397"
>(</text>

<text 
x="163" 
y="896" 
class="s6_397"
>word</text>

<text 
x="195" 
y="896" 
class="s5_397"
>,</text>

<text 
x="211" 
y="896" 
class="s11_397"
>sum</text>

<text 
x="235" 
y="896" 
class="s5_397"
>(</text>

<text 
x="242" 
y="896" 
class="s6_397"
>counts</text>

<text 
x="290" 
y="896" 
class="s5_397"
>))</text>

<text 
x="55" 
y="949" 
class="s2_397"
>Returning to step 2, we now need to collect the results from</text>

<text 
x="585" 
y="949" 
class="s9_397"
>wc_mapper</text>

<text 
x="686" 
y="949" 
class="s2_397"
>and feed them to</text>

<text 
x="55" 
y="979" 
class="s9_397"
>wc_reducer</text>

<text 
x="160" 
y="979" 
dx="0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_397"
>. Let’s think about how we would do this on just one computer:</text>

<text 
x="76" 
y="1026" 
class="s3_397"
>def</text>

<text 
x="108" 
y="1026" 
class="s4_397"
>word_count</text>

<text 
x="187" 
y="1026" 
class="s5_397"
>(</text>

<text 
x="195" 
y="1026" 
class="s6_397"
>documents</text>

<text 
x="266" 
y="1026" 
class="s5_397"
>):</text>

<text 
x="108" 
y="1041" 
dx="0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_397"
>"""count the words in the input documents using MapReduce"""</text>

<text 
x="108" 
y="1072" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s12_397"
># place to store grouped values</text>

<text 
x="108" 
y="1088" 
class="s6_397"
>collector</text>

<text 
x="187" 
y="1088" 
class="s5_397"
>=</text>

<text 
x="203" 
y="1088" 
class="s6_397"
>defaultdict</text>

<text 
x="290" 
y="1088" 
class="s5_397"
>(</text>

<text 
x="298" 
y="1088" 
class="s11_397"
>list</text>

<text 
x="329" 
y="1088" 
class="s5_397"
>)</text>

<text 
x="108" 
y="1118" 
class="s3_397"
>for</text>

<text 
x="140" 
y="1118" 
class="s6_397"
>document</text>

<text 
x="211" 
y="1118" 
class="s8_397"
>in</text>

<text 
x="235" 
y="1118" 
class="s6_397"
>documents</text>

<text 
x="306" 
y="1118" 
class="s5_397"
>:</text>

<text 
x="140" 
y="1134" 
class="s3_397"
>for</text>

<text 
x="171" 
y="1134" 
class="s6_397"
>word</text>

<text 
x="203" 
y="1134" 
class="s5_397"
>,</text>

<text 
x="219" 
y="1134" 
class="s6_397"
>count</text>

<text 
x="266" 
y="1134" 
class="s8_397"
>in</text>

<text 
x="290" 
y="1134" 
class="s6_397"
>wc_mapper</text>

<text 
x="361" 
y="1134" 
class="s5_397"
>(</text>

<text 
x="369" 
y="1134" 
class="s6_397"
>document</text>

<text 
x="432" 
y="1134" 
class="s5_397"
>):</text>

<text 
x="171" 
y="1149" 
class="s6_397"
>collector</text>

<text 
x="242" 
y="1149" 
class="s5_397"
>[</text>

<text 
x="250" 
y="1149" 
class="s6_397"
>word</text>

<text 
x="282" 
y="1149" 
class="s5_397"
>].</text>

<text 
x="298" 
y="1149" 
class="s6_397"
>append</text>

<text 
x="345" 
y="1149" 
class="s5_397"
>(</text>

<text 
x="353" 
y="1149" 
class="s6_397"
>count</text>

<text 
x="393" 
y="1149" 
class="s5_397"
>)</text>

<text 
x="108" 
y="1180" 
class="s3_397"
>return</text>

<text 
x="163" 
y="1180" 
class="s5_397"
>[</text>

<text 
x="171" 
y="1180" 
class="s6_397"
>output</text>

<text 
x="171" 
y="1195" 
class="s3_397"
>for</text>

<text 
x="203" 
y="1195" 
class="s6_397"
>word</text>

<text 
x="235" 
y="1195" 
class="s5_397"
>,</text>

<text 
x="250" 
y="1195" 
class="s6_397"
>counts</text>

<text 
x="306" 
y="1195" 
class="s8_397"
>in</text>

<text 
x="329" 
y="1195" 
class="s6_397"
>collector</text>

<text 
x="401" 
y="1195" 
class="s5_397"
>.</text>

<text 
x="408" 
y="1195" 
class="s6_397"
>iteritems</text>

<text 
x="480" 
y="1195" 
class="s5_397"
>()</text>

<text 
x="171" 
y="1211" 
class="s3_397"
>for</text>

<text 
x="203" 
y="1211" 
class="s6_397"
>output</text>

<text 
x="258" 
y="1211" 
class="s8_397"
>in</text>

<text 
x="282" 
y="1211" 
class="s6_397"
>wc_reducer</text>

<text 
x="361" 
y="1211" 
class="s5_397"
>(</text>

<text 
x="369" 
y="1211" 
class="s6_397"
>word</text>

<text 
x="401" 
y="1211" 
class="s5_397"
>,</text>

<text 
x="416" 
y="1211" 
class="s6_397"
>counts</text>

<text 
x="464" 
y="1211" 
class="s5_397"
>)]</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
