<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 191 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_191{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_191{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_191{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_191{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_191{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_191{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_191{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s8_191{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s9_191{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s10_191{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_191{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s12_191{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_191"
>Manipulating Data</text>

<text 
x="55" 
y="122" 
class="s2_191"
>One of the most important skills of a data scientist is</text>

<text 
x="523" 
y="122" 
class="s3_191"
>manipulating data</text>

<text 
x="685" 
y="122" 
dx="0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>. It’s more of a</text>

<text 
x="55" 
y="149" 
class="s2_191"
>general approach than a specific technique, so we’ll just work through a handful of</text>

<text 
x="55" 
y="177" 
class="s2_191"
>examples to give you the flavor of it.</text>

<text 
x="55" 
y="215" 
class="s2_191"
>Imagine we’re working with</text>

<text 
x="311" 
y="215" 
class="s4_191"
>dict</text>

<text 
x="353" 
y="215" 
class="s2_191"
>s of stock prices that look like:</text>

<text 
x="76" 
y="262" 
class="s5_191"
>data</text>

<text 
x="116" 
y="262" 
dx="0,0,4.6" 
class="s6_191"
>= [</text>

<text 
x="108" 
y="278" 
class="s6_191"
>{</text>

<text 
x="116" 
y="278" 
class="s7_191"
>'closing_price'</text>

<text 
x="235" 
y="278" 
class="s6_191"
>:</text>

<text 
x="250" 
y="278" 
class="s8_191"
>102.06</text>

<text 
x="298" 
y="278" 
class="s6_191"
>,</text>

<text 
x="116" 
y="293" 
class="s7_191"
>'date'</text>

<text 
x="163" 
y="293" 
class="s6_191"
>:</text>

<text 
x="179" 
y="293" 
class="s5_191"
>datetime</text>

<text 
x="242" 
y="293" 
class="s6_191"
>.</text>

<text 
x="250" 
y="293" 
class="s5_191"
>datetime</text>

<text 
x="314" 
y="293" 
class="s6_191"
>(</text>

<text 
x="322" 
y="293" 
class="s8_191"
>2014</text>

<text 
x="353" 
y="293" 
class="s6_191"
>,</text>

<text 
x="369" 
y="293" 
class="s8_191"
>8</text>

<text 
x="377" 
y="293" 
class="s6_191"
>,</text>

<text 
x="393" 
y="293" 
class="s8_191"
>29</text>

<text 
x="408" 
y="293" 
class="s6_191"
>,</text>

<text 
x="424" 
y="293" 
class="s8_191"
>0</text>

<text 
x="432" 
y="293" 
class="s6_191"
>,</text>

<text 
x="448" 
y="293" 
class="s8_191"
>0</text>

<text 
x="456" 
y="293" 
class="s6_191"
>),</text>

<text 
x="116" 
y="309" 
class="s7_191"
>'symbol'</text>

<text 
x="179" 
y="309" 
class="s6_191"
>:</text>

<text 
x="195" 
y="309" 
class="s7_191"
>'AAPL'</text>

<text 
x="242" 
y="309" 
class="s6_191"
>},</text>

<text 
x="108" 
y="324" 
dx="0,0,4.6,0,0" 
class="s9_191"
># ...</text>

<text 
x="76" 
y="339" 
class="s6_191"
>]</text>

<text 
x="55" 
y="392" 
class="s2_191"
>Conceptually we’ll think of them as rows (as in a spreadsheet).</text>

<text 
x="55" 
y="431" 
dx="0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>Let’s start asking questions about this data. Along the way we’ll try to notice patterns in</text>

<text 
x="55" 
y="458" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_191"
>what we’re doing and abstract out some tools to make the manipulation easier.</text>

<text 
x="55" 
y="497" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_191"
>For instance, suppose we want to know the highest-ever closing price for AAPL. Let’s</text>

<text 
x="55" 
y="524" 
class="s2_191"
>break this down into concrete steps:</text>

<text 
x="75" 
y="562" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0" 
class="s2_191"
>1. Restrict ourselves to AAPL rows.</text>

<text 
x="75" 
y="609" 
dx="0,0,0,6.6,0,0,0,0,0,0,0" 
class="s2_191"
>2. Grab the</text>

<text 
x="186" 
y="609" 
class="s4_191"
>closing_price</text>

<text 
x="328" 
y="609" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4" 
class="s2_191"
>from each row.</text>

<text 
x="75" 
y="656" 
dx="0,0,0,6.6,-1.6,0,0,0,0,0,0" 
class="s2_191"
>3. Take the</text>

<text 
x="184" 
y="656" 
class="s4_191"
>max</text>

<text 
x="221" 
y="656" 
class="s2_191"
>of those prices.</text>

<text 
x="55" 
y="705" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>We can do all three at once using a list comprehension:</text>

<text 
x="76" 
y="750" 
class="s5_191"
>max_aapl_price</text>

<text 
x="195" 
y="750" 
class="s6_191"
>=</text>

<text 
x="211" 
y="750" 
class="s10_191"
>max</text>

<text 
x="235" 
y="750" 
class="s6_191"
>(</text>

<text 
x="242" 
y="750" 
class="s5_191"
>row</text>

<text 
x="266" 
y="750" 
class="s6_191"
>[</text>

<text 
x="274" 
y="750" 
class="s7_191"
>"closing_price"</text>

<text 
x="393" 
y="750" 
class="s6_191"
>]</text>

<text 
x="242" 
y="765" 
class="s11_191"
>for</text>

<text 
x="274" 
y="765" 
class="s5_191"
>row</text>

<text 
x="306" 
y="765" 
class="s12_191"
>in</text>

<text 
x="329" 
y="765" 
class="s5_191"
>data</text>

<text 
x="242" 
y="781" 
class="s11_191"
>if</text>

<text 
x="266" 
y="781" 
class="s5_191"
>row</text>

<text 
x="290" 
y="781" 
class="s6_191"
>[</text>

<text 
x="298" 
y="781" 
class="s7_191"
>"symbol"</text>

<text 
x="361" 
y="781" 
dx="0,0,4.6,0" 
class="s6_191"
>] ==</text>

<text 
x="401" 
y="781" 
class="s7_191"
>"AAPL"</text>

<text 
x="448" 
y="781" 
class="s6_191"
>)</text>

<text 
x="55" 
y="833" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>More generally, we might want to know the highest-ever closing price for each stock in</text>

<text 
x="55" 
y="861" 
class="s2_191"
>our data set. One way to do this is:</text>

<text 
x="75" 
y="898" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>1. Group together all the rows with the same</text>

<text 
x="479" 
y="898" 
class="s4_191"
>symbol</text>

<text 
x="542" 
y="898" 
class="s2_191"
>.</text>

<text 
x="75" 
y="946" 
dx="0,0,0,6.6,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>2. Within each group, do the same as before:</text>

<text 
x="76" 
y="990" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s9_191"
># group rows by symbol</text>

<text 
x="76" 
y="1005" 
class="s5_191"
>by_symbol</text>

<text 
x="156" 
y="1005" 
class="s6_191"
>=</text>

<text 
x="171" 
y="1005" 
class="s5_191"
>defaultdict</text>

<text 
x="258" 
y="1005" 
class="s6_191"
>(</text>

<text 
x="266" 
y="1005" 
class="s10_191"
>list</text>

<text 
x="298" 
y="1005" 
class="s6_191"
>)</text>

<text 
x="76" 
y="1021" 
class="s11_191"
>for</text>

<text 
x="108" 
y="1021" 
class="s5_191"
>row</text>

<text 
x="140" 
y="1021" 
class="s12_191"
>in</text>

<text 
x="163" 
y="1021" 
class="s5_191"
>data</text>

<text 
x="195" 
y="1021" 
class="s6_191"
>:</text>

<text 
x="108" 
y="1036" 
class="s5_191"
>by_symbol</text>

<text 
x="179" 
y="1036" 
class="s6_191"
>[</text>

<text 
x="187" 
y="1036" 
class="s5_191"
>row</text>

<text 
x="211" 
y="1036" 
class="s6_191"
>[</text>

<text 
x="219" 
y="1036" 
class="s7_191"
>"symbol"</text>

<text 
x="282" 
y="1036" 
class="s6_191"
>]].</text>

<text 
x="306" 
y="1036" 
class="s5_191"
>append</text>

<text 
x="353" 
y="1036" 
class="s6_191"
>(</text>

<text 
x="361" 
y="1036" 
class="s5_191"
>row</text>

<text 
x="385" 
y="1036" 
class="s6_191"
>)</text>

<text 
x="76" 
y="1067" 
dx="0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0" 
class="s9_191"
># use a dict comprehension to find the max for each symbol</text>

<text 
x="76" 
y="1082" 
class="s5_191"
>max_price_by_symbol</text>

<text 
x="235" 
y="1082" 
dx="0,0,4.6" 
class="s6_191"
>= {</text>

<text 
x="266" 
y="1082" 
class="s5_191"
>symbol</text>

<text 
x="322" 
y="1082" 
class="s6_191"
>:</text>

<text 
x="337" 
y="1082" 
class="s10_191"
>max</text>

<text 
x="361" 
y="1082" 
class="s6_191"
>(</text>

<text 
x="369" 
y="1082" 
class="s5_191"
>row</text>

<text 
x="393" 
y="1082" 
class="s6_191"
>[</text>

<text 
x="401" 
y="1082" 
class="s7_191"
>"closing_price"</text>

<text 
x="519" 
y="1082" 
class="s6_191"
>]</text>

<text 
x="369" 
y="1098" 
class="s11_191"
>for</text>

<text 
x="401" 
y="1098" 
class="s5_191"
>row</text>

<text 
x="432" 
y="1098" 
class="s12_191"
>in</text>

<text 
x="456" 
y="1098" 
class="s5_191"
>grouped_rows</text>

<text 
x="551" 
y="1098" 
class="s6_191"
>)</text>

<text 
x="266" 
y="1113" 
class="s11_191"
>for</text>

<text 
x="298" 
y="1113" 
class="s5_191"
>symbol</text>

<text 
x="345" 
y="1113" 
class="s6_191"
>,</text>

<text 
x="361" 
y="1113" 
class="s5_191"
>grouped_rows</text>

<text 
x="464" 
y="1113" 
class="s12_191"
>in</text>

<text 
x="487" 
y="1113" 
class="s5_191"
>by_symbol</text>

<text 
x="559" 
y="1113" 
class="s6_191"
>.</text>

<text 
x="567" 
y="1113" 
class="s5_191"
>iteritems</text>

<text 
x="638" 
y="1113" 
dx="0,0,0,4.6" 
class="s6_191"
>() }</text>

<text 
x="55" 
y="1166" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>There are some patterns here already. In both examples, we needed to pull the</text>

<text 
x="55" 
y="1193" 
class="s4_191"
>closing_price</text>

<text 
x="197" 
y="1193" 
class="s2_191"
>value out of every</text>

<text 
x="362" 
y="1193" 
class="s4_191"
>dict</text>

<text 
x="404" 
y="1193" 
dx="0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_191"
>. So let’s create a function to pick a field out of a</text>

<text 
x="55" 
y="1223" 
class="s4_191"
>dict</text>

<text 
x="97" 
y="1223" 
class="s2_191"
>, and another function to pluck the same field out of a collection of</text>

<text 
x="690" 
y="1223" 
class="s4_191"
>dict</text>

<text 
x="732" 
y="1223" 
class="s2_191"
>s:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
