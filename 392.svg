<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 392 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_392{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_392{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_392{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s4_392{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_392{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_392{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s7_392{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_392"
>Query Optimization</text>

<text 
x="55" 
y="122" 
class="s2_392"
>Recall the query to find all users who are interested in SQL:</text>

<text 
x="76" 
y="167" 
class="s3_392"
>SELECT</text>

<text 
x="132" 
y="167" 
class="s4_392"
>users</text>

<text 
x="171" 
y="167" 
class="s5_392"
>.</text>

<text 
x="179" 
y="167" 
class="s4_392"
>name</text>

<text 
x="76" 
y="182" 
class="s3_392"
>FROM</text>

<text 
x="116" 
y="182" 
class="s4_392"
>users</text>

<text 
x="76" 
y="198" 
class="s3_392"
>JOIN</text>

<text 
x="116" 
y="198" 
class="s4_392"
>user_interests</text>

<text 
x="76" 
y="213" 
class="s3_392"
>ON</text>

<text 
x="100" 
y="213" 
class="s4_392"
>users</text>

<text 
x="140" 
y="213" 
class="s5_392"
>.</text>

<text 
x="148" 
y="213" 
class="s4_392"
>user_id</text>

<text 
x="211" 
y="213" 
class="s5_392"
>=</text>

<text 
x="227" 
y="213" 
class="s4_392"
>user_interests</text>

<text 
x="337" 
y="213" 
class="s5_392"
>.</text>

<text 
x="345" 
y="213" 
class="s4_392"
>user_id</text>

<text 
x="76" 
y="228" 
class="s3_392"
>WHERE</text>

<text 
x="124" 
y="228" 
class="s4_392"
>user_interests</text>

<text 
x="235" 
y="228" 
class="s5_392"
>.</text>

<text 
x="242" 
y="228" 
class="s4_392"
>interest</text>

<text 
x="314" 
y="228" 
class="s5_392"
>=</text>

<text 
x="329" 
y="228" 
class="s6_392"
>'SQL'</text>

<text 
x="55" 
y="281" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,-2.2,0,0,0,0,0,0,0" 
class="s2_392"
>In NotQuiteABase there are (at least) two different ways to write this query. You could</text>

<text 
x="55" 
y="309" 
class="s2_392"
>filter the</text>

<text 
x="135" 
y="309" 
class="s7_392"
>user_interests</text>

<text 
x="288" 
y="309" 
class="s2_392"
>table before performing the join:</text>

<text 
x="76" 
y="356" 
class="s4_392"
>user_interests</text>

<text 
x="195" 
y="356" 
class="s5_392"
>\</text>

<text 
x="108" 
y="371" 
class="s5_392"
>.</text>

<text 
x="116" 
y="371" 
class="s4_392"
>where</text>

<text 
x="156" 
y="371" 
class="s5_392"
>(</text>

<text 
x="163" 
y="371" 
class="s3_392"
>lambda</text>

<text 
x="219" 
y="371" 
class="s4_392"
>row</text>

<text 
x="242" 
y="371" 
class="s5_392"
>:</text>

<text 
x="258" 
y="371" 
class="s4_392"
>row</text>

<text 
x="282" 
y="371" 
class="s5_392"
>[</text>

<text 
x="290" 
y="371" 
class="s6_392"
>"interest"</text>

<text 
x="369" 
y="371" 
dx="0,0,4.6,0" 
class="s5_392"
>] ==</text>

<text 
x="408" 
y="371" 
class="s6_392"
>"SQL"</text>

<text 
x="448" 
y="371" 
dx="0,0,4.6" 
class="s5_392"
>) \</text>

<text 
x="108" 
y="387" 
class="s5_392"
>.</text>

<text 
x="116" 
y="387" 
class="s4_392"
>join</text>

<text 
x="148" 
y="387" 
class="s5_392"
>(</text>

<text 
x="156" 
y="387" 
class="s4_392"
>users</text>

<text 
x="195" 
y="387" 
dx="0,0,4.6" 
class="s5_392"
>) \</text>

<text 
x="108" 
y="402" 
class="s5_392"
>.</text>

<text 
x="116" 
y="402" 
class="s4_392"
>select</text>

<text 
x="163" 
y="402" 
class="s5_392"
>([</text>

<text 
x="179" 
y="402" 
class="s6_392"
>"name"</text>

<text 
x="227" 
y="402" 
class="s5_392"
>])</text>

<text 
x="55" 
y="455" 
class="s2_392"
>Or you could filter the results of the join:</text>

<text 
x="76" 
y="500" 
class="s4_392"
>user_interests</text>

<text 
x="195" 
y="500" 
class="s5_392"
>\</text>

<text 
x="108" 
y="516" 
class="s5_392"
>.</text>

<text 
x="116" 
y="516" 
class="s4_392"
>join</text>

<text 
x="148" 
y="516" 
class="s5_392"
>(</text>

<text 
x="156" 
y="516" 
class="s4_392"
>users</text>

<text 
x="195" 
y="516" 
dx="0,0,4.6" 
class="s5_392"
>) \</text>

<text 
x="108" 
y="531" 
class="s5_392"
>.</text>

<text 
x="116" 
y="531" 
class="s4_392"
>where</text>

<text 
x="156" 
y="531" 
class="s5_392"
>(</text>

<text 
x="163" 
y="531" 
class="s3_392"
>lambda</text>

<text 
x="219" 
y="531" 
class="s4_392"
>row</text>

<text 
x="242" 
y="531" 
class="s5_392"
>:</text>

<text 
x="258" 
y="531" 
class="s4_392"
>row</text>

<text 
x="282" 
y="531" 
class="s5_392"
>[</text>

<text 
x="290" 
y="531" 
class="s6_392"
>"interest"</text>

<text 
x="369" 
y="531" 
dx="0,0,4.6,0" 
class="s5_392"
>] ==</text>

<text 
x="408" 
y="531" 
class="s6_392"
>"SQL"</text>

<text 
x="448" 
y="531" 
dx="0,0,4.6" 
class="s5_392"
>) \</text>

<text 
x="108" 
y="546" 
class="s5_392"
>.</text>

<text 
x="116" 
y="546" 
class="s4_392"
>select</text>

<text 
x="163" 
y="546" 
class="s5_392"
>([</text>

<text 
x="179" 
y="546" 
class="s6_392"
>"name"</text>

<text 
x="227" 
y="546" 
class="s5_392"
>])</text>

<text 
x="55" 
y="599" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_392"
>You’ll end up with the same results either way, but filter-before-join is almost certainly</text>

<text 
x="55" 
y="627" 
dx="0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_392"
>more efficient, since in that case</text>

<text 
x="344" 
y="627" 
class="s7_392"
>join</text>

<text 
x="392" 
y="627" 
class="s2_392"
>has many fewer rows to operate on.</text>

<text 
x="55" 
y="667" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_392"
>In SQL, you generally wouldn’t worry about this. You “declare” the results you want and</text>

<text 
x="55" 
y="695" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0" 
class="s2_392"
>leave it up to the query engine to execute them (and use indexes efficiently).</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
