<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 41 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_41{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_41{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_41{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_41{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_41{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s6_41{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s7_41{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_41{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s9_41{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s10_41{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s11_41{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_41"
>Modules</text>

<text 
x="55" 
y="115" 
class="s2_41"
>Certain features of Python are not loaded by default. These include both features included</text>

<text 
x="55" 
y="143" 
class="s2_41"
>as part of the language as well as third-party features that you download yourself. In order</text>

<text 
x="55" 
y="170" 
class="s2_41"
>to use these features, you’ll need to</text>

<text 
x="371" 
y="170" 
class="s3_41"
>import</text>

<text 
x="440" 
y="170" 
class="s2_41"
>the modules that contain them.</text>

<text 
x="55" 
y="211" 
class="s2_41"
>One approach is to simply import the module itself:</text>

<text 
x="76" 
y="256" 
class="s4_41"
>import</text>

<text 
x="132" 
y="256" 
class="s5_41"
>re</text>

<text 
x="76" 
y="271" 
class="s6_41"
>my_regex</text>

<text 
x="148" 
y="271" 
class="s7_41"
>=</text>

<text 
x="163" 
y="271" 
class="s6_41"
>re</text>

<text 
x="179" 
y="271" 
class="s7_41"
>.</text>

<text 
x="187" 
y="271" 
class="s6_41"
>compile</text>

<text 
x="242" 
y="271" 
class="s7_41"
>(</text>

<text 
x="250" 
y="271" 
class="s8_41"
>"[0-9]+"</text>

<text 
x="314" 
y="271" 
class="s7_41"
>,</text>

<text 
x="329" 
y="271" 
class="s6_41"
>re</text>

<text 
x="345" 
y="271" 
class="s7_41"
>.</text>

<text 
x="353" 
y="271" 
class="s6_41"
>I</text>

<text 
x="361" 
y="271" 
class="s7_41"
>)</text>

<text 
x="55" 
y="324" 
class="s2_41"
>Here</text>

<text 
x="103" 
y="324" 
class="s3_41"
>re</text>

<text 
x="129" 
y="324" 
class="s2_41"
>is the module containing functions and constants for working with regular</text>

<text 
x="55" 
y="354" 
class="s2_41"
>expressions. After this type of</text>

<text 
x="324" 
y="354" 
class="s3_41"
>import</text>

<text 
x="393" 
y="354" 
class="s2_41"
>you can only access those functions by prefixing</text>

<text 
x="55" 
y="383" 
class="s2_41"
>them with</text>

<text 
x="149" 
y="383" 
class="s3_41"
>re.</text>

<text 
x="180" 
y="383" 
class="s2_41"
>.</text>

<text 
x="55" 
y="424" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0" 
class="s2_41"
>If you already had a different</text>

<text 
x="317" 
y="424" 
class="s3_41"
>re</text>

<text 
x="343" 
y="424" 
class="s2_41"
>in your code you could use an alias:</text>

<text 
x="76" 
y="472" 
class="s4_41"
>import</text>

<text 
x="132" 
y="472" 
class="s5_41"
>re</text>

<text 
x="156" 
y="472" 
class="s4_41"
>as</text>

<text 
x="179" 
y="472" 
class="s5_41"
>regex</text>

<text 
x="76" 
y="487" 
class="s6_41"
>my_regex</text>

<text 
x="148" 
y="487" 
class="s7_41"
>=</text>

<text 
x="163" 
y="487" 
class="s6_41"
>regex</text>

<text 
x="203" 
y="487" 
class="s7_41"
>.</text>

<text 
x="211" 
y="487" 
class="s6_41"
>compile</text>

<text 
x="266" 
y="487" 
class="s7_41"
>(</text>

<text 
x="274" 
y="487" 
class="s8_41"
>"[0-9]+"</text>

<text 
x="337" 
y="487" 
class="s7_41"
>,</text>

<text 
x="353" 
y="487" 
class="s6_41"
>regex</text>

<text 
x="393" 
y="487" 
class="s7_41"
>.</text>

<text 
x="401" 
y="487" 
class="s6_41"
>I</text>

<text 
x="408" 
y="487" 
class="s7_41"
>)</text>

<text 
x="55" 
y="540" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_41"
>You might also do this if your module has an unwieldy name or if you’re going to be</text>

<text 
x="55" 
y="567" 
class="s2_41"
>typing it a lot. For example, when visualizing data with</text>

<text 
x="547" 
y="567" 
class="s3_41"
>matplotlib</text>

<text 
x="652" 
y="567" 
class="s2_41"
>, a standard</text>

<text 
x="55" 
y="597" 
class="s2_41"
>convention is:</text>

<text 
x="76" 
y="642" 
class="s4_41"
>import</text>

<text 
x="132" 
y="642" 
class="s5_41"
>matplotlib.pyplot</text>

<text 
x="274" 
y="642" 
class="s4_41"
>as</text>

<text 
x="298" 
y="642" 
class="s5_41"
>plt</text>

<text 
x="55" 
y="695" 
class="s2_41"
>If you need a few specific values from a module, you can import them explicitly and use</text>

<text 
x="55" 
y="722" 
class="s2_41"
>them without qualification:</text>

<text 
x="76" 
y="767" 
class="s4_41"
>from</text>

<text 
x="116" 
y="767" 
class="s5_41"
>collections</text>

<text 
x="211" 
y="767" 
class="s4_41"
>import</text>

<text 
x="266" 
y="767" 
class="s6_41"
>defaultdict</text>

<text 
x="353" 
y="767" 
class="s7_41"
>,</text>

<text 
x="369" 
y="767" 
class="s6_41"
>Counter</text>

<text 
x="76" 
y="783" 
class="s6_41"
>lookup</text>

<text 
x="132" 
y="783" 
class="s7_41"
>=</text>

<text 
x="148" 
y="783" 
class="s6_41"
>defaultdict</text>

<text 
x="235" 
y="783" 
class="s7_41"
>(</text>

<text 
x="242" 
y="783" 
class="s9_41"
>int</text>

<text 
x="266" 
y="783" 
class="s7_41"
>)</text>

<text 
x="76" 
y="798" 
class="s6_41"
>my_counter</text>

<text 
x="163" 
y="798" 
class="s7_41"
>=</text>

<text 
x="179" 
y="798" 
class="s6_41"
>Counter</text>

<text 
x="235" 
y="798" 
class="s7_41"
>()</text>

<text 
x="55" 
y="851" 
class="s2_41"
>If you were a bad person, you could import the entire contents of a module into your</text>

<text 
x="55" 
y="879" 
class="s2_41"
>namespace, which might inadvertently overwrite variables you’ve already defined:</text>

<text 
x="76" 
y="924" 
class="s6_41"
>match</text>

<text 
x="124" 
y="924" 
class="s7_41"
>=</text>

<text 
x="140" 
y="924" 
class="s10_41"
>10</text>

<text 
x="76" 
y="939" 
class="s4_41"
>from</text>

<text 
x="116" 
y="939" 
class="s5_41"
>re</text>

<text 
x="140" 
y="939" 
class="s4_41"
>import</text>

<text 
x="195" 
y="939" 
class="s7_41"
>*</text>

<text 
x="235" 
y="939" 
dx="0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_41"
># uh oh, re has a match function</text>

<text 
x="76" 
y="955" 
class="s4_41"
>print</text>

<text 
x="124" 
y="955" 
class="s6_41"
>match</text>

<text 
x="235" 
y="955" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s11_41"
># "&lt;function re.match&gt;"</text>

<text 
x="55" 
y="1007" 
dx="0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_41"
>However, since you are not a bad person, you won’t ever do this.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
