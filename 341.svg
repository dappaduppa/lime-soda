<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 341 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_341{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_341{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s3_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s4_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s7_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s8_341{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_341{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_341{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_341{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s12_341{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s13_341{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_341"
>How do we implement this? Well, to start, we’ll create a simple helper function to identify</text>

<text 
x="55" 
y="102" 
class="s1_341"
>terminals:</text>

<text 
x="76" 
y="147" 
class="s2_341"
>def</text>

<text 
x="108" 
y="147" 
class="s3_341"
>is_terminal</text>

<text 
x="195" 
y="147" 
class="s4_341"
>(</text>

<text 
x="203" 
y="147" 
class="s5_341"
>token</text>

<text 
x="242" 
y="147" 
class="s4_341"
>):</text>

<text 
x="108" 
y="162" 
class="s2_341"
>return</text>

<text 
x="163" 
y="162" 
class="s5_341"
>token</text>

<text 
x="203" 
y="162" 
class="s4_341"
>[</text>

<text 
x="211" 
y="162" 
class="s6_341"
>0</text>

<text 
x="219" 
y="162" 
dx="0,0,4.6,0" 
class="s4_341"
>] !=</text>

<text 
x="258" 
y="162" 
class="s7_341"
>"_"</text>

<text 
x="55" 
y="215" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_341"
>Next we need to write a function to turn a list of tokens into a sentence. We’ll look for the</text>

<text 
x="55" 
y="243" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_341"
>first nonterminal token. If we can’t find one, that means we have a completed sentence</text>

<text 
x="55" 
y="270" 
class="s1_341"
>and we’re done.</text>

<text 
x="55" 
y="309" 
class="s1_341"
>If we do find a nonterminal, then we randomly choose one of its productions. If that</text>

<text 
x="55" 
y="336" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0" 
class="s1_341"
>production is a terminal (i.e., a word), we simply replace the token with it. Otherwise it’s a</text>

<text 
x="55" 
y="364" 
class="s1_341"
>sequence of space-separated nonterminal tokens that we need to</text>

<text 
x="623" 
y="364" 
class="s8_341"
>split</text>

<text 
x="681" 
y="364" 
class="s1_341"
>and then splice into</text>

<text 
x="55" 
y="393" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_341"
>the current tokens. Either way, we repeat the process on the new set of tokens.</text>

<text 
x="55" 
y="432" 
class="s1_341"
>Putting it all together we get:</text>

<text 
x="76" 
y="477" 
class="s2_341"
>def</text>

<text 
x="108" 
y="477" 
class="s3_341"
>expand</text>

<text 
x="156" 
y="477" 
class="s4_341"
>(</text>

<text 
x="163" 
y="477" 
class="s5_341"
>grammar</text>

<text 
x="219" 
y="477" 
class="s4_341"
>,</text>

<text 
x="235" 
y="477" 
class="s5_341"
>tokens</text>

<text 
x="282" 
y="477" 
class="s4_341"
>):</text>

<text 
x="108" 
y="492" 
class="s2_341"
>for</text>

<text 
x="140" 
y="492" 
class="s5_341"
>i</text>

<text 
x="148" 
y="492" 
class="s4_341"
>,</text>

<text 
x="163" 
y="492" 
class="s5_341"
>token</text>

<text 
x="211" 
y="492" 
class="s9_341"
>in</text>

<text 
x="235" 
y="492" 
class="s10_341"
>enumerate</text>

<text 
x="306" 
y="492" 
class="s4_341"
>(</text>

<text 
x="314" 
y="492" 
class="s5_341"
>tokens</text>

<text 
x="361" 
y="492" 
class="s4_341"
>):</text>

<text 
x="140" 
y="523" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s11_341"
># skip over terminals</text>

<text 
x="140" 
y="539" 
class="s2_341"
>if</text>

<text 
x="163" 
y="539" 
class="s5_341"
>is_terminal</text>

<text 
x="250" 
y="539" 
class="s4_341"
>(</text>

<text 
x="258" 
y="539" 
class="s5_341"
>token</text>

<text 
x="298" 
y="539" 
class="s4_341"
>):</text>

<text 
x="322" 
y="539" 
class="s2_341"
>continue</text>

<text 
x="140" 
y="569" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s11_341"
># if we get here, we found a non-terminal token</text>

<text 
x="140" 
y="585" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s11_341"
># so we need to choose a replacement at random</text>

<text 
x="140" 
y="600" 
class="s5_341"
>replacement</text>

<text 
x="235" 
y="600" 
class="s4_341"
>=</text>

<text 
x="250" 
y="600" 
class="s5_341"
>random</text>

<text 
x="298" 
y="600" 
class="s4_341"
>.</text>

<text 
x="306" 
y="600" 
class="s5_341"
>choice</text>

<text 
x="353" 
y="600" 
class="s4_341"
>(</text>

<text 
x="361" 
y="600" 
class="s5_341"
>grammar</text>

<text 
x="416" 
y="600" 
class="s4_341"
>[</text>

<text 
x="424" 
y="600" 
class="s5_341"
>token</text>

<text 
x="464" 
y="600" 
class="s4_341"
>])</text>

<text 
x="140" 
y="631" 
class="s2_341"
>if</text>

<text 
x="163" 
y="631" 
class="s5_341"
>is_terminal</text>

<text 
x="250" 
y="631" 
class="s4_341"
>(</text>

<text 
x="258" 
y="631" 
class="s5_341"
>replacement</text>

<text 
x="345" 
y="631" 
class="s4_341"
>):</text>

<text 
x="171" 
y="646" 
class="s5_341"
>tokens</text>

<text 
x="219" 
y="646" 
class="s4_341"
>[</text>

<text 
x="227" 
y="646" 
class="s5_341"
>i</text>

<text 
x="235" 
y="646" 
dx="0,0,4.6" 
class="s4_341"
>] =</text>

<text 
x="266" 
y="646" 
class="s5_341"
>replacement</text>

<text 
x="140" 
y="662" 
class="s2_341"
>else</text>

<text 
x="171" 
y="662" 
class="s4_341"
>:</text>

<text 
x="171" 
y="677" 
class="s5_341"
>tokens</text>

<text 
x="227" 
y="677" 
class="s4_341"
>=</text>

<text 
x="242" 
y="677" 
class="s5_341"
>tokens</text>

<text 
x="290" 
y="677" 
class="s4_341"
>[:</text>

<text 
x="306" 
y="677" 
class="s5_341"
>i</text>

<text 
x="314" 
y="677" 
dx="0,0,4.6" 
class="s4_341"
>] +</text>

<text 
x="345" 
y="677" 
class="s5_341"
>replacement</text>

<text 
x="432" 
y="677" 
class="s4_341"
>.</text>

<text 
x="440" 
y="677" 
class="s5_341"
>split</text>

<text 
x="480" 
y="677" 
dx="0,0,0,4.6" 
class="s4_341"
>() +</text>

<text 
x="519" 
y="677" 
class="s5_341"
>tokens</text>

<text 
x="567" 
y="677" 
class="s4_341"
>[(</text>

<text 
x="582" 
y="677" 
class="s5_341"
>i</text>

<text 
x="590" 
y="677" 
class="s4_341"
>+</text>

<text 
x="598" 
y="677" 
class="s6_341"
>1</text>

<text 
x="606" 
y="677" 
class="s4_341"
>):]</text>

<text 
x="140" 
y="708" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s11_341"
># now call expand on the new list of tokens</text>

<text 
x="140" 
y="723" 
class="s2_341"
>return</text>

<text 
x="195" 
y="723" 
class="s5_341"
>expand</text>

<text 
x="242" 
y="723" 
class="s4_341"
>(</text>

<text 
x="250" 
y="723" 
class="s5_341"
>grammar</text>

<text 
x="306" 
y="723" 
class="s4_341"
>,</text>

<text 
x="322" 
y="723" 
class="s5_341"
>tokens</text>

<text 
x="369" 
y="723" 
class="s4_341"
>)</text>

<text 
x="108" 
y="754" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0" 
class="s11_341"
># if we get here we had all terminals and are done</text>

<text 
x="108" 
y="770" 
class="s2_341"
>return</text>

<text 
x="163" 
y="770" 
class="s5_341"
>tokens</text>

<text 
x="55" 
y="822" 
class="s1_341"
>And now we can start generating sentences:</text>

<text 
x="76" 
y="868" 
class="s2_341"
>def</text>

<text 
x="108" 
y="868" 
class="s3_341"
>generate_sentence</text>

<text 
x="242" 
y="868" 
class="s4_341"
>(</text>

<text 
x="250" 
y="868" 
class="s5_341"
>grammar</text>

<text 
x="306" 
y="868" 
class="s4_341"
>):</text>

<text 
x="108" 
y="883" 
class="s2_341"
>return</text>

<text 
x="163" 
y="883" 
class="s5_341"
>expand</text>

<text 
x="211" 
y="883" 
class="s4_341"
>(</text>

<text 
x="219" 
y="883" 
class="s5_341"
>grammar</text>

<text 
x="274" 
y="883" 
dx="0,0,4.6" 
class="s4_341"
>, [</text>

<text 
x="298" 
y="883" 
class="s7_341"
>"_S"</text>

<text 
x="329" 
y="883" 
class="s4_341"
>])</text>

<text 
x="55" 
y="936" 
dx="0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_341"
>Try changing the grammar — add more words, add more rules, add your own parts of</text>

<text 
x="55" 
y="963" 
class="s1_341"
>speech — until you’re ready to generate as many web pages as your company needs.</text>

<text 
x="55" 
y="1002" 
class="s1_341"
>Grammars are actually more interesting when they’re used in the other direction. Given a</text>

<text 
x="55" 
y="1029" 
class="s1_341"
>sentence we can use a grammar to</text>

<text 
x="360" 
y="1029" 
class="s12_341"
>parse</text>

<text 
x="415" 
y="1029" 
class="s1_341"
>the sentence. This then allows us to identify</text>

<text 
x="55" 
y="1057" 
class="s1_341"
>subjects and verbs and helps us make sense of the sentence.</text>

<text 
x="55" 
y="1095" 
class="s1_341"
>Using data science to generate text is a neat trick; using it to</text>

<text 
x="589" 
y="1095" 
class="s12_341"
>understand</text>

<text 
x="693" 
y="1095" 
class="s1_341"
>text is more</text>

<text 
x="55" 
y="1123" 
class="s1_341"
>magical. (See</text>

<text 
x="180" 
y="1123" 
class="s13_341"
>“For Further Investigation”</text>

<text 
x="426" 
y="1123" 
class="s1_341"
>for libraries that you could use for this.)</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
