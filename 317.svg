<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 317 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_317{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_317{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_317{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_317{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_317{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s6_317{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s7_317{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00AA88;
}
.s8_317{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_317{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s10_317{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s11_317{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s12_317{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s13_317{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_317"
>The Model</text>

<text 
x="55" 
y="122" 
class="s2_317"
>For us, each</text>

<text 
x="167" 
y="122" 
class="s3_317"
>input</text>

<text 
x="225" 
y="122" 
class="s2_317"
>will be a vector in</text>

<text 
x="389" 
y="122" 
class="s4_317"
>d</text>

<text 
x="400" 
y="122" 
class="s2_317"
>-dimensional space (which, as usual, we will</text>

<text 
x="55" 
y="151" 
class="s2_317"
>represent as a list of numbers). Our goal will be to identify clusters of similar inputs and</text>

<text 
x="55" 
y="179" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_317"
>(sometimes) to find a representative value for each cluster.</text>

<text 
x="55" 
y="217" 
class="s2_317"
>For example, each input could be (a numeric vector that somehow represents) the title of a</text>

<text 
x="55" 
y="245" 
class="s2_317"
>blog post, in which case the goal might be to find clusters of similar posts, perhaps in</text>

<text 
x="55" 
y="272" 
class="s2_317"
>order to understand what our users are blogging about. Or imagine that we have a picture</text>

<text 
x="55" 
y="300" 
class="s2_317"
>containing thousands of</text>

<text 
x="270" 
y="300" 
dx="0,0,0,0,0,0,6.1,0,0,0,0,0,0,6.1,0,0,0,0" 
class="s3_317"
>(red, green, blue)</text>

<text 
x="465" 
y="300" 
class="s2_317"
>colors and that we need to screen-print a</text>

<text 
x="55" 
y="330" 
class="s2_317"
>10-color version of it. Clustering can help us choose 10 colors that will minimize the total</text>

<text 
x="55" 
y="357" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0" 
class="s2_317"
>“color error.”</text>

<text 
x="55" 
y="396" 
class="s2_317"
>One of the simplest clustering methods is</text>

<text 
x="424" 
y="396" 
class="s4_317"
>k-means</text>

<text 
x="497" 
y="396" 
class="s2_317"
>, in which the number of clusters</text>

<text 
x="791" 
y="396" 
class="s4_317"
>k</text>

<text 
x="807" 
y="396" 
class="s2_317"
>is</text>

<text 
x="55" 
y="428" 
class="s2_317"
>chosen in advance, after which the goal is to partition the inputs into sets</text>

<image preserveAspectRatio="none" x="700" y="403" width="106" height="25" xlink:href="317/img/1.png" />
<text 
x="811" 
y="428" 
class="s2_317"
>in a</text>

<text 
x="55" 
y="455" 
class="s2_317"
>way that minimizes the total sum of squared distances from each point to the mean of its</text>

<text 
x="55" 
y="483" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_317"
>assigned cluster.</text>

<text 
x="55" 
y="521" 
class="s2_317"
>There are a lot of ways to assign</text>

<text 
x="345" 
y="521" 
class="s4_317"
>n</text>

<text 
x="362" 
y="521" 
class="s2_317"
>points to</text>

<text 
x="443" 
y="521" 
class="s4_317"
>k</text>

<text 
x="459" 
y="521" 
class="s2_317"
>clusters, which means that finding an</text>

<text 
x="55" 
y="549" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>optimal clustering is a very hard problem. We’ll settle for an iterative algorithm that</text>

<text 
x="55" 
y="576" 
class="s2_317"
>usually finds a good clustering:</text>

<text 
x="75" 
y="613" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>1. Start with a set of</text>

<text 
x="265" 
y="613" 
class="s4_317"
>k-means</text>

<text 
x="338" 
y="613" 
class="s2_317"
>, which are points in</text>

<text 
x="522" 
y="613" 
class="s4_317"
>d</text>

<text 
x="533" 
y="613" 
class="s2_317"
>-dimensional space.</text>

<text 
x="75" 
y="661" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>2. Assign each point to the mean to which it is closest.</text>

<text 
x="75" 
y="708" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>3. If no point’s assignment has changed, stop and keep the clusters.</text>

<text 
x="75" 
y="755" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>4. If some point’s assignment has changed, recompute the means and return to step 2.</text>

<text 
x="55" 
y="804" 
class="s2_317"
>Using the</text>

<text 
x="145" 
y="804" 
class="s3_317"
>vector_mean</text>

<text 
x="266" 
y="804" 
class="s2_317"
>function from</text>

<text 
x="393" 
y="804" 
class="s5_317"
>Chapter 4</text>

<text 
x="479" 
y="804" 
dx="0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_317"
>, it’s pretty simple to create a class that</text>

<text 
x="55" 
y="833" 
class="s2_317"
>does this:</text>

<text 
x="76" 
y="879" 
class="s6_317"
>class</text>

<text 
x="124" 
y="879" 
class="s7_317"
>KMeans</text>

<text 
x="171" 
y="879" 
class="s8_317"
>:</text>

<text 
x="108" 
y="894" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s9_317"
>"""performs k-means clustering"""</text>

<text 
x="108" 
y="925" 
class="s6_317"
>def</text>

<text 
x="140" 
y="925" 
class="s10_317"
>__init__</text>

<text 
x="203" 
y="925" 
class="s8_317"
>(</text>

<text 
x="211" 
y="925" 
class="s11_317"
>self</text>

<text 
x="242" 
y="925" 
class="s8_317"
>,</text>

<text 
x="258" 
y="925" 
class="s12_317"
>k</text>

<text 
x="266" 
y="925" 
class="s8_317"
>):</text>

<text 
x="140" 
y="940" 
class="s11_317"
>self</text>

<text 
x="171" 
y="940" 
class="s8_317"
>.</text>

<text 
x="179" 
y="940" 
class="s12_317"
>k</text>

<text 
x="195" 
y="940" 
class="s8_317"
>=</text>

<text 
x="211" 
y="940" 
class="s12_317"
>k</text>

<text 
x="298" 
y="940" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s13_317"
># number of clusters</text>

<text 
x="140" 
y="956" 
class="s11_317"
>self</text>

<text 
x="171" 
y="956" 
class="s8_317"
>.</text>

<text 
x="179" 
y="956" 
class="s12_317"
>means</text>

<text 
x="227" 
y="956" 
class="s8_317"
>=</text>

<text 
x="242" 
y="956" 
class="s11_317"
>None</text>

<text 
x="298" 
y="956" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s13_317"
># means of clusters</text>

<text 
x="108" 
y="986" 
class="s6_317"
>def</text>

<text 
x="140" 
y="986" 
class="s10_317"
>classify</text>

<text 
x="203" 
y="986" 
class="s8_317"
>(</text>

<text 
x="211" 
y="986" 
class="s11_317"
>self</text>

<text 
x="242" 
y="986" 
class="s8_317"
>,</text>

<text 
x="258" 
y="986" 
class="s11_317"
>input</text>

<text 
x="298" 
y="986" 
class="s8_317"
>):</text>

<text 
x="140" 
y="1002" 
dx="0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s9_317"
>"""return the index of the cluster closest to the input"""</text>

<text 
x="140" 
y="1017" 
class="s6_317"
>return</text>

<text 
x="195" 
y="1017" 
class="s11_317"
>min</text>

<text 
x="219" 
y="1017" 
class="s8_317"
>(</text>

<text 
x="227" 
y="1017" 
class="s11_317"
>range</text>

<text 
x="266" 
y="1017" 
class="s8_317"
>(</text>

<text 
x="274" 
y="1017" 
class="s11_317"
>self</text>

<text 
x="306" 
y="1017" 
class="s8_317"
>.</text>

<text 
x="314" 
y="1017" 
class="s12_317"
>k</text>

<text 
x="322" 
y="1017" 
class="s8_317"
>),</text>

<text 
x="227" 
y="1033" 
class="s12_317"
>key</text>

<text 
x="250" 
y="1033" 
class="s8_317"
>=</text>

<text 
x="258" 
y="1033" 
class="s6_317"
>lambda</text>

<text 
x="314" 
y="1033" 
class="s12_317"
>i</text>

<text 
x="322" 
y="1033" 
class="s8_317"
>:</text>

<text 
x="337" 
y="1033" 
class="s12_317"
>squared_distance</text>

<text 
x="464" 
y="1033" 
class="s8_317"
>(</text>

<text 
x="472" 
y="1033" 
class="s11_317"
>input</text>

<text 
x="511" 
y="1033" 
class="s8_317"
>,</text>

<text 
x="527" 
y="1033" 
class="s11_317"
>self</text>

<text 
x="559" 
y="1033" 
class="s8_317"
>.</text>

<text 
x="567" 
y="1033" 
class="s12_317"
>means</text>

<text 
x="606" 
y="1033" 
class="s8_317"
>[</text>

<text 
x="614" 
y="1033" 
class="s12_317"
>i</text>

<text 
x="622" 
y="1033" 
class="s8_317"
>]))</text>

<text 
x="108" 
y="1063" 
class="s6_317"
>def</text>

<text 
x="140" 
y="1063" 
class="s10_317"
>train</text>

<text 
x="179" 
y="1063" 
class="s8_317"
>(</text>

<text 
x="187" 
y="1063" 
class="s11_317"
>self</text>

<text 
x="219" 
y="1063" 
class="s8_317"
>,</text>

<text 
x="235" 
y="1063" 
class="s12_317"
>inputs</text>

<text 
x="282" 
y="1063" 
class="s8_317"
>):</text>

<text 
x="140" 
y="1079" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s13_317"
># choose k random points as the initial means</text>

<text 
x="140" 
y="1094" 
class="s11_317"
>self</text>

<text 
x="171" 
y="1094" 
class="s8_317"
>.</text>

<text 
x="179" 
y="1094" 
class="s12_317"
>means</text>

<text 
x="227" 
y="1094" 
class="s8_317"
>=</text>

<text 
x="242" 
y="1094" 
class="s12_317"
>random</text>

<text 
x="290" 
y="1094" 
class="s8_317"
>.</text>

<text 
x="298" 
y="1094" 
class="s12_317"
>sample</text>

<text 
x="345" 
y="1094" 
class="s8_317"
>(</text>

<text 
x="353" 
y="1094" 
class="s12_317"
>inputs</text>

<text 
x="401" 
y="1094" 
class="s8_317"
>,</text>

<text 
x="416" 
y="1094" 
class="s11_317"
>self</text>

<text 
x="448" 
y="1094" 
class="s8_317"
>.</text>

<text 
x="456" 
y="1094" 
class="s12_317"
>k</text>

<text 
x="464" 
y="1094" 
class="s8_317"
>)</text>

<text 
x="140" 
y="1110" 
class="s12_317"
>assignments</text>

<text 
x="235" 
y="1110" 
class="s8_317"
>=</text>

<text 
x="250" 
y="1110" 
class="s11_317"
>None</text>

<text 
x="140" 
y="1140" 
class="s6_317"
>while</text>

<text 
x="187" 
y="1140" 
class="s11_317"
>True</text>

<text 
x="219" 
y="1140" 
class="s8_317"
>:</text>

<text 
x="171" 
y="1156" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s13_317"
># Find new assignments</text>

<text 
x="171" 
y="1171" 
class="s12_317"
>new_assignments</text>

<text 
x="298" 
y="1171" 
class="s8_317"
>=</text>

<text 
x="314" 
y="1171" 
class="s11_317"
>map</text>

<text 
x="337" 
y="1171" 
class="s8_317"
>(</text>

<text 
x="345" 
y="1171" 
class="s11_317"
>self</text>

<text 
x="377" 
y="1171" 
class="s8_317"
>.</text>

<text 
x="385" 
y="1171" 
class="s12_317"
>classify</text>

<text 
x="448" 
y="1171" 
class="s8_317"
>,</text>

<text 
x="464" 
y="1171" 
class="s12_317"
>inputs</text>

<text 
x="511" 
y="1171" 
class="s8_317"
>)</text>

<text 
x="171" 
y="1202" 
dx="0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0" 
class="s13_317"
># If no assignments have changed, we're done.</text>

<text 
x="171" 
y="1217" 
class="s6_317"
>if</text>

<text 
x="195" 
y="1217" 
class="s12_317"
>assignments</text>

<text 
x="290" 
y="1217" 
class="s8_317"
>==</text>

<text 
x="314" 
y="1217" 
class="s12_317"
>new_assignments</text>

<text 
x="432" 
y="1217" 
class="s8_317"
>:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
