<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 327 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_327{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s2_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s3_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s6_327{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s7_327{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s8_327{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s9_327{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s10_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_327{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s12_327{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="76" 
y="64" 
class="s1_327"
>def</text>

<text 
x="108" 
y="64" 
class="s2_327"
>cluster_distance</text>

<text 
x="235" 
y="64" 
class="s3_327"
>(</text>

<text 
x="242" 
y="64" 
class="s4_327"
>cluster1</text>

<text 
x="306" 
y="64" 
class="s3_327"
>,</text>

<text 
x="322" 
y="64" 
class="s4_327"
>cluster2</text>

<text 
x="385" 
y="64" 
class="s3_327"
>,</text>

<text 
x="401" 
y="64" 
class="s4_327"
>distance_agg</text>

<text 
x="495" 
y="64" 
class="s3_327"
>=</text>

<text 
x="503" 
y="64" 
class="s5_327"
>min</text>

<text 
x="527" 
y="64" 
class="s3_327"
>):</text>

<text 
x="108" 
y="80" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s6_327"
>"""compute all the pairwise distances between cluster1 and cluster2</text>

<text 
x="108" 
y="95" 
dx="0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s6_327"
>and apply _distance_agg_ to the resulting list"""</text>

<text 
x="108" 
y="111" 
class="s1_327"
>return</text>

<text 
x="163" 
y="111" 
class="s4_327"
>distance_agg</text>

<text 
x="258" 
y="111" 
class="s3_327"
>([</text>

<text 
x="274" 
y="111" 
class="s4_327"
>distance</text>

<text 
x="337" 
y="111" 
class="s3_327"
>(</text>

<text 
x="345" 
y="111" 
class="s4_327"
>input1</text>

<text 
x="393" 
y="111" 
class="s3_327"
>,</text>

<text 
x="408" 
y="111" 
class="s4_327"
>input2</text>

<text 
x="456" 
y="111" 
class="s3_327"
>)</text>

<text 
x="274" 
y="126" 
class="s1_327"
>for</text>

<text 
x="306" 
y="126" 
class="s4_327"
>input1</text>

<text 
x="361" 
y="126" 
class="s7_327"
>in</text>

<text 
x="385" 
y="126" 
class="s4_327"
>get_values</text>

<text 
x="464" 
y="126" 
class="s3_327"
>(</text>

<text 
x="472" 
y="126" 
class="s4_327"
>cluster1</text>

<text 
x="535" 
y="126" 
class="s3_327"
>)</text>

<text 
x="274" 
y="141" 
class="s1_327"
>for</text>

<text 
x="306" 
y="141" 
class="s4_327"
>input2</text>

<text 
x="361" 
y="141" 
class="s7_327"
>in</text>

<text 
x="385" 
y="141" 
class="s4_327"
>get_values</text>

<text 
x="464" 
y="141" 
class="s3_327"
>(</text>

<text 
x="472" 
y="141" 
class="s4_327"
>cluster2</text>

<text 
x="535" 
y="141" 
class="s3_327"
>)])</text>

<text 
x="55" 
y="194" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_327"
>We’ll use the merge order slot to track the order in which we did the merging. Smaller</text>

<text 
x="55" 
y="222" 
class="s8_327"
>numbers will represent</text>

<text 
x="261" 
y="222" 
class="s9_327"
>later</text>

<text 
x="308" 
y="222" 
dx="0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_327"
>merges. This means when we want to unmerge clusters, we</text>

<text 
x="55" 
y="249" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0" 
class="s8_327"
>do so from lowest merge order to highest. Since leaf clusters were never merged (which</text>

<text 
x="55" 
y="277" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_327"
>means we never want to unmerge them), we’ll assign them infinity:</text>

<text 
x="76" 
y="322" 
class="s1_327"
>def</text>

<text 
x="108" 
y="322" 
class="s2_327"
>get_merge_order</text>

<text 
x="227" 
y="322" 
class="s3_327"
>(</text>

<text 
x="235" 
y="322" 
class="s4_327"
>cluster</text>

<text 
x="290" 
y="322" 
class="s3_327"
>):</text>

<text 
x="108" 
y="337" 
class="s1_327"
>if</text>

<text 
x="132" 
y="337" 
class="s4_327"
>is_leaf</text>

<text 
x="187" 
y="337" 
class="s3_327"
>(</text>

<text 
x="195" 
y="337" 
class="s4_327"
>cluster</text>

<text 
x="250" 
y="337" 
class="s3_327"
>):</text>

<text 
x="140" 
y="353" 
class="s1_327"
>return</text>

<text 
x="195" 
y="353" 
class="s5_327"
>float</text>

<text 
x="235" 
y="353" 
class="s3_327"
>(</text>

<text 
x="242" 
y="353" 
class="s10_327"
>'inf'</text>

<text 
x="282" 
y="353" 
class="s3_327"
>)</text>

<text 
x="108" 
y="368" 
class="s1_327"
>else</text>

<text 
x="140" 
y="368" 
class="s3_327"
>:</text>

<text 
x="140" 
y="383" 
class="s1_327"
>return</text>

<text 
x="195" 
y="383" 
class="s4_327"
>cluster</text>

<text 
x="250" 
y="383" 
class="s3_327"
>[</text>

<text 
x="258" 
y="383" 
class="s11_327"
>0</text>

<text 
x="266" 
y="383" 
class="s3_327"
>]</text>

<text 
x="290" 
y="383" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0" 
class="s12_327"
># merge_order is first element of 2-tuple</text>

<text 
x="55" 
y="436" 
class="s8_327"
>Now we’re ready to create the clustering algorithm:</text>

<text 
x="76" 
y="481" 
class="s1_327"
>def</text>

<text 
x="108" 
y="481" 
class="s2_327"
>bottom_up_cluster</text>

<text 
x="242" 
y="481" 
class="s3_327"
>(</text>

<text 
x="250" 
y="481" 
class="s4_327"
>inputs</text>

<text 
x="298" 
y="481" 
class="s3_327"
>,</text>

<text 
x="314" 
y="481" 
class="s4_327"
>distance_agg</text>

<text 
x="408" 
y="481" 
class="s3_327"
>=</text>

<text 
x="416" 
y="481" 
class="s5_327"
>min</text>

<text 
x="440" 
y="481" 
class="s3_327"
>):</text>

<text 
x="108" 
y="497" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0" 
class="s12_327"
># start with every input a leaf cluster / 1-tuple</text>

<text 
x="108" 
y="512" 
class="s4_327"
>clusters</text>

<text 
x="179" 
y="512" 
dx="0,0,4.6,0" 
class="s3_327"
>= [(</text>

<text 
x="211" 
y="512" 
class="s5_327"
>input</text>

<text 
x="250" 
y="512" 
class="s3_327"
>,)</text>

<text 
x="274" 
y="512" 
class="s1_327"
>for</text>

<text 
x="306" 
y="512" 
class="s5_327"
>input</text>

<text 
x="353" 
y="512" 
class="s7_327"
>in</text>

<text 
x="377" 
y="512" 
class="s4_327"
>inputs</text>

<text 
x="424" 
y="512" 
class="s3_327"
>]</text>

<text 
x="108" 
y="543" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s12_327"
># as long as we have more than one cluster left…</text>

<text 
x="108" 
y="558" 
class="s1_327"
>while</text>

<text 
x="156" 
y="558" 
class="s5_327"
>len</text>

<text 
x="179" 
y="558" 
class="s3_327"
>(</text>

<text 
x="187" 
y="558" 
class="s4_327"
>clusters</text>

<text 
x="250" 
y="558" 
dx="0,0,4.6" 
class="s3_327"
>) &gt;</text>

<text 
x="282" 
y="558" 
class="s11_327"
>1</text>

<text 
x="290" 
y="558" 
class="s3_327"
>:</text>

<text 
x="140" 
y="574" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s12_327"
># find the two closest clusters</text>

<text 
x="140" 
y="589" 
class="s4_327"
>c1</text>

<text 
x="156" 
y="589" 
class="s3_327"
>,</text>

<text 
x="171" 
y="589" 
class="s4_327"
>c2</text>

<text 
x="195" 
y="589" 
class="s3_327"
>=</text>

<text 
x="211" 
y="589" 
class="s5_327"
>min</text>

<text 
x="235" 
y="589" 
class="s3_327"
>([(</text>

<text 
x="258" 
y="589" 
class="s4_327"
>cluster1</text>

<text 
x="322" 
y="589" 
class="s3_327"
>,</text>

<text 
x="337" 
y="589" 
class="s4_327"
>cluster2</text>

<text 
x="401" 
y="589" 
class="s3_327"
>)</text>

<text 
x="250" 
y="605" 
class="s1_327"
>for</text>

<text 
x="282" 
y="605" 
class="s4_327"
>i</text>

<text 
x="290" 
y="605" 
class="s3_327"
>,</text>

<text 
x="306" 
y="605" 
class="s4_327"
>cluster1</text>

<text 
x="377" 
y="605" 
class="s7_327"
>in</text>

<text 
x="401" 
y="605" 
class="s5_327"
>enumerate</text>

<text 
x="472" 
y="605" 
class="s3_327"
>(</text>

<text 
x="480" 
y="605" 
class="s4_327"
>clusters</text>

<text 
x="543" 
y="605" 
class="s3_327"
>)</text>

<text 
x="250" 
y="620" 
class="s1_327"
>for</text>

<text 
x="282" 
y="620" 
class="s4_327"
>cluster2</text>

<text 
x="353" 
y="620" 
class="s7_327"
>in</text>

<text 
x="377" 
y="620" 
class="s4_327"
>clusters</text>

<text 
x="440" 
y="620" 
class="s3_327"
>[:</text>

<text 
x="456" 
y="620" 
class="s4_327"
>i</text>

<text 
x="464" 
y="620" 
class="s3_327"
>]],</text>

<text 
x="250" 
y="635" 
class="s4_327"
>key</text>

<text 
x="274" 
y="635" 
class="s3_327"
>=</text>

<text 
x="282" 
y="635" 
class="s1_327"
>lambda</text>

<text 
x="337" 
y="635" 
class="s3_327"
>(</text>

<text 
x="345" 
y="635" 
class="s4_327"
>x</text>

<text 
x="353" 
y="635" 
class="s3_327"
>,</text>

<text 
x="369" 
y="635" 
class="s4_327"
>y</text>

<text 
x="377" 
y="635" 
class="s3_327"
>):</text>

<text 
x="401" 
y="635" 
class="s4_327"
>cluster_distance</text>

<text 
x="527" 
y="635" 
class="s3_327"
>(</text>

<text 
x="535" 
y="635" 
class="s4_327"
>x</text>

<text 
x="543" 
y="635" 
class="s3_327"
>,</text>

<text 
x="559" 
y="635" 
class="s4_327"
>y</text>

<text 
x="567" 
y="635" 
class="s3_327"
>,</text>

<text 
x="582" 
y="635" 
class="s4_327"
>distance_agg</text>

<text 
x="677" 
y="635" 
class="s3_327"
>))</text>

<text 
x="140" 
y="666" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s12_327"
># remove them from the list of clusters</text>

<text 
x="140" 
y="682" 
class="s4_327"
>clusters</text>

<text 
x="211" 
y="682" 
dx="0,0,4.6" 
class="s3_327"
>= [</text>

<text 
x="235" 
y="682" 
class="s4_327"
>c</text>

<text 
x="250" 
y="682" 
class="s1_327"
>for</text>

<text 
x="282" 
y="682" 
class="s4_327"
>c</text>

<text 
x="298" 
y="682" 
class="s7_327"
>in</text>

<text 
x="322" 
y="682" 
class="s4_327"
>clusters</text>

<text 
x="393" 
y="682" 
class="s1_327"
>if</text>

<text 
x="416" 
y="682" 
class="s4_327"
>c</text>

<text 
x="432" 
y="682" 
class="s3_327"
>!=</text>

<text 
x="456" 
y="682" 
class="s4_327"
>c1</text>

<text 
x="480" 
y="682" 
class="s7_327"
>and</text>

<text 
x="511" 
y="682" 
class="s4_327"
>c</text>

<text 
x="527" 
y="682" 
class="s3_327"
>!=</text>

<text 
x="551" 
y="682" 
class="s4_327"
>c2</text>

<text 
x="567" 
y="682" 
class="s3_327"
>]</text>

<text 
x="140" 
y="712" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s12_327"
># merge them, using merge_order = # of clusters left</text>

<text 
x="140" 
y="728" 
class="s4_327"
>merged_cluster</text>

<text 
x="258" 
y="728" 
dx="0,0,4.6" 
class="s3_327"
>= (</text>

<text 
x="282" 
y="728" 
class="s5_327"
>len</text>

<text 
x="306" 
y="728" 
class="s3_327"
>(</text>

<text 
x="314" 
y="728" 
class="s4_327"
>clusters</text>

<text 
x="377" 
y="728" 
dx="0,0,0,4.6" 
class="s3_327"
>), [</text>

<text 
x="408" 
y="728" 
class="s4_327"
>c1</text>

<text 
x="424" 
y="728" 
class="s3_327"
>,</text>

<text 
x="440" 
y="728" 
class="s4_327"
>c2</text>

<text 
x="456" 
y="728" 
class="s3_327"
>])</text>

<text 
x="140" 
y="759" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0" 
class="s12_327"
># and add their merge</text>

<text 
x="140" 
y="774" 
class="s4_327"
>clusters</text>

<text 
x="203" 
y="774" 
class="s3_327"
>.</text>

<text 
x="211" 
y="774" 
class="s4_327"
>append</text>

<text 
x="258" 
y="774" 
class="s3_327"
>(</text>

<text 
x="266" 
y="774" 
class="s4_327"
>merged_cluster</text>

<text 
x="377" 
y="774" 
class="s3_327"
>)</text>

<text 
x="108" 
y="805" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0" 
class="s12_327"
># when there's only one cluster left, return it</text>

<text 
x="108" 
y="820" 
class="s1_327"
>return</text>

<text 
x="163" 
y="820" 
class="s4_327"
>clusters</text>

<text 
x="227" 
y="820" 
class="s3_327"
>[</text>

<text 
x="235" 
y="820" 
class="s11_327"
>0</text>

<text 
x="242" 
y="820" 
class="s3_327"
>]</text>

<text 
x="55" 
y="873" 
class="s8_327"
>Its use is very simple:</text>

<text 
x="76" 
y="918" 
class="s4_327"
>base_cluster</text>

<text 
x="179" 
y="918" 
class="s3_327"
>=</text>

<text 
x="195" 
y="918" 
class="s4_327"
>bottom_up_cluster</text>

<text 
x="329" 
y="918" 
class="s3_327"
>(</text>

<text 
x="337" 
y="918" 
class="s4_327"
>inputs</text>

<text 
x="385" 
y="918" 
class="s3_327"
>)</text>

<text 
x="55" 
y="971" 
class="s8_327"
>This produces a cluster whose ugly representation is:</text>

<text 
x="76" 
y="1016" 
dx="0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s3_327"
>(0, [(1, [(3, [(14, [(18, [([19, 28],),</text>

<text 
x="290" 
y="1032" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([21, 27],)]),</text>

<text 
x="242" 
y="1047" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([20, 23],)]),</text>

<text 
x="195" 
y="1062" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([26, 13],)]),</text>

<text 
x="156" 
y="1078" 
dx="0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s3_327"
>(16, [([11, 15],),</text>

<text 
x="203" 
y="1093" 
dx="0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s3_327"
>([13, 13],)])]),</text>

<text 
x="116" 
y="1109" 
dx="0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s3_327"
>(2, [(4, [(5, [(9, [(11, [([-49, 0],),</text>

<text 
x="322" 
y="1124" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s3_327"
>([-46, 5],)]),</text>

<text 
x="274" 
y="1139" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s3_327"
>([-41, 8],)]),</text>

<text 
x="235" 
y="1155" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([-49, 15],)]),</text>

<text 
x="195" 
y="1170" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([-34, -1],)]),</text>

<text 
x="156" 
y="1186" 
dx="0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s3_327"
>(6, [(7, [(8, [(10, [([-22, -16],),</text>

<text 
x="322" 
y="1201" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0" 
class="s3_327"
>([-19, -11],)]),</text>

<text 
x="274" 
y="1216" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_327"
>([-25, -9],)]),</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
