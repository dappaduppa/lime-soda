<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 337 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_337{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_337{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_337{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s4_337{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_337{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_337{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s7_337{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_337{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s9_337{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s10_337{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #CC3300;
}
.s11_337{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s12_337{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s13_337{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_337"
>n-gram Models</text>

<text 
x="55" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>The DataSciencester VP of Search Engine Marketing wants to create thousands of web</text>

<text 
x="55" 
y="149" 
class="s2_337"
>pages about data science so that your site will rank higher in search results for data</text>

<text 
x="55" 
y="177" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>science–related terms. (You attempt to explain to her that search engine algorithms are</text>

<text 
x="55" 
y="204" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>clever enough that this won’t actually work, but she refuses to listen.)</text>

<text 
x="55" 
y="243" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>Of course, she doesn’t want to write thousands of web pages, nor does she want to pay a</text>

<text 
x="55" 
y="270" 
class="s2_337"
>horde of “content strategists” to do so. Instead she asks you whether you can somehow</text>

<text 
x="55" 
y="298" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>programatically generate these web pages. To do this, we’ll need some way of modeling</text>

<text 
x="55" 
y="325" 
class="s2_337"
>language.</text>

<text 
x="55" 
y="364" 
class="s2_337"
>One approach is to start with a corpus of documents and learn a statistical model of</text>

<text 
x="55" 
y="391" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0" 
class="s2_337"
>language. In our case, we’ll start with Mike Loukides’s essay</text>

<text 
x="598" 
y="391" 
class="s3_337"
>“What is data science?”</text>

<text 
x="55" 
y="430" 
class="s2_337"
>As in</text>

<text 
x="107" 
y="430" 
class="s3_337"
>Chapter 9</text>

<text 
x="193" 
y="430" 
class="s2_337"
>, we’ll use</text>

<text 
x="290" 
y="430" 
class="s4_337"
>requests</text>

<text 
x="379" 
y="430" 
class="s2_337"
>and</text>

<text 
x="417" 
y="430" 
class="s4_337"
>BeautifulSoup</text>

<text 
x="559" 
y="430" 
class="s2_337"
>to retrieve the data. There are a</text>

<text 
x="55" 
y="459" 
class="s2_337"
>couple of issues worth calling attention to.</text>

<text 
x="55" 
y="498" 
class="s2_337"
>The first is that the apostrophes in the text are actually the Unicode character</text>

<text 
x="736" 
y="498" 
class="s4_337"
>u"\u2019"</text>

<text 
x="831" 
y="498" 
class="s2_337"
>.</text>

<text 
x="55" 
y="528" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>We’ll create a helper function to replace them with normal apostrophes:</text>

<text 
x="76" 
y="573" 
class="s5_337"
>def</text>

<text 
x="108" 
y="573" 
class="s6_337"
>fix_unicode</text>

<text 
x="195" 
y="573" 
class="s7_337"
>(</text>

<text 
x="203" 
y="573" 
class="s8_337"
>text</text>

<text 
x="235" 
y="573" 
class="s7_337"
>):</text>

<text 
x="108" 
y="588" 
class="s5_337"
>return</text>

<text 
x="163" 
y="588" 
class="s8_337"
>text</text>

<text 
x="195" 
y="588" 
class="s7_337"
>.</text>

<text 
x="203" 
y="588" 
class="s8_337"
>replace</text>

<text 
x="258" 
y="588" 
class="s7_337"
>(</text>

<text 
x="266" 
y="588" 
class="s9_337"
>u"</text>

<text 
x="282" 
y="588" 
class="s10_337"
>\u2019</text>

<text 
x="329" 
y="588" 
class="s9_337"
>"</text>

<text 
x="337" 
y="588" 
class="s7_337"
>,</text>

<text 
x="353" 
y="588" 
class="s9_337"
>"'"</text>

<text 
x="377" 
y="588" 
class="s7_337"
>)</text>

<text 
x="55" 
y="641" 
class="s2_337"
>The second issue is that once we get the text of the web page, we’ll want to split it into a</text>

<text 
x="55" 
y="668" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>sequence of words and periods (so that we can tell where sentences end). We can do this</text>

<text 
x="55" 
y="696" 
class="s2_337"
>using</text>

<text 
x="108" 
y="696" 
class="s4_337"
>re.findall()</text>

<text 
x="234" 
y="696" 
class="s2_337"
>:</text>

<text 
x="76" 
y="743" 
class="s5_337"
>from</text>

<text 
x="116" 
y="743" 
class="s11_337"
>bs4</text>

<text 
x="148" 
y="743" 
class="s5_337"
>import</text>

<text 
x="203" 
y="743" 
class="s8_337"
>BeautifulSoup</text>

<text 
x="76" 
y="759" 
class="s5_337"
>import</text>

<text 
x="132" 
y="759" 
class="s11_337"
>requests</text>

<text 
x="76" 
y="774" 
class="s8_337"
>url</text>

<text 
x="108" 
y="774" 
class="s7_337"
>=</text>

<text 
x="124" 
y="774" 
class="s9_337"
>"http://radar.oreilly.com/2010/06/what-is-data-science.html"</text>

<text 
x="76" 
y="789" 
class="s8_337"
>html</text>

<text 
x="116" 
y="789" 
class="s7_337"
>=</text>

<text 
x="132" 
y="789" 
class="s8_337"
>requests</text>

<text 
x="195" 
y="789" 
class="s7_337"
>.</text>

<text 
x="203" 
y="789" 
class="s8_337"
>get</text>

<text 
x="227" 
y="789" 
class="s7_337"
>(</text>

<text 
x="235" 
y="789" 
class="s8_337"
>url</text>

<text 
x="258" 
y="789" 
class="s7_337"
>).</text>

<text 
x="274" 
y="789" 
class="s8_337"
>text</text>

<text 
x="76" 
y="805" 
class="s8_337"
>soup</text>

<text 
x="116" 
y="805" 
class="s7_337"
>=</text>

<text 
x="132" 
y="805" 
class="s8_337"
>BeautifulSoup</text>

<text 
x="235" 
y="805" 
class="s7_337"
>(</text>

<text 
x="242" 
y="805" 
class="s8_337"
>html</text>

<text 
x="274" 
y="805" 
class="s7_337"
>,</text>

<text 
x="290" 
y="805" 
class="s9_337"
>'html5lib'</text>

<text 
x="369" 
y="805" 
class="s7_337"
>)</text>

<text 
x="76" 
y="836" 
class="s8_337"
>content</text>

<text 
x="140" 
y="836" 
class="s7_337"
>=</text>

<text 
x="156" 
y="836" 
class="s8_337"
>soup</text>

<text 
x="187" 
y="836" 
class="s7_337"
>.</text>

<text 
x="195" 
y="836" 
class="s8_337"
>find</text>

<text 
x="227" 
y="836" 
class="s7_337"
>(</text>

<text 
x="235" 
y="836" 
class="s9_337"
>"div"</text>

<text 
x="274" 
y="836" 
class="s7_337"
>,</text>

<text 
x="290" 
y="836" 
class="s9_337"
>"entry-content"</text>

<text 
x="408" 
y="836" 
class="s7_337"
>)</text>

<text 
x="440" 
y="836" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0" 
class="s12_337"
># find entry-content div</text>

<text 
x="76" 
y="851" 
class="s8_337"
>regex</text>

<text 
x="124" 
y="851" 
class="s7_337"
>=</text>

<text 
x="140" 
y="851" 
class="s9_337"
>r"[\w']+|[\.]"</text>

<text 
x="440" 
y="851" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0" 
class="s12_337"
># matches a word or a period</text>

<text 
x="76" 
y="882" 
class="s8_337"
>document</text>

<text 
x="148" 
y="882" 
dx="0,0,4.6,0" 
class="s7_337"
>= []</text>

<text 
x="76" 
y="913" 
class="s5_337"
>for</text>

<text 
x="108" 
y="913" 
class="s8_337"
>paragraph</text>

<text 
x="187" 
y="913" 
class="s13_337"
>in</text>

<text 
x="211" 
y="913" 
class="s8_337"
>content</text>

<text 
x="266" 
y="913" 
class="s7_337"
>(</text>

<text 
x="274" 
y="913" 
class="s9_337"
>"p"</text>

<text 
x="298" 
y="913" 
class="s7_337"
>):</text>

<text 
x="108" 
y="928" 
class="s8_337"
>words</text>

<text 
x="156" 
y="928" 
class="s7_337"
>=</text>

<text 
x="171" 
y="928" 
class="s8_337"
>re</text>

<text 
x="187" 
y="928" 
class="s7_337"
>.</text>

<text 
x="195" 
y="928" 
class="s8_337"
>findall</text>

<text 
x="250" 
y="928" 
class="s7_337"
>(</text>

<text 
x="258" 
y="928" 
class="s8_337"
>regex</text>

<text 
x="298" 
y="928" 
class="s7_337"
>,</text>

<text 
x="314" 
y="928" 
class="s8_337"
>fix_unicode</text>

<text 
x="401" 
y="928" 
class="s7_337"
>(</text>

<text 
x="408" 
y="928" 
class="s8_337"
>paragraph</text>

<text 
x="480" 
y="928" 
class="s7_337"
>.</text>

<text 
x="487" 
y="928" 
class="s8_337"
>text</text>

<text 
x="519" 
y="928" 
class="s7_337"
>))</text>

<text 
x="108" 
y="944" 
class="s8_337"
>document</text>

<text 
x="171" 
y="944" 
class="s7_337"
>.</text>

<text 
x="179" 
y="944" 
class="s8_337"
>extend</text>

<text 
x="227" 
y="944" 
class="s7_337"
>(</text>

<text 
x="235" 
y="944" 
class="s8_337"
>words</text>

<text 
x="274" 
y="944" 
class="s7_337"
>)</text>

<text 
x="55" 
y="996" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>We certainly could (and likely should) clean this data further. There is still some amount</text>

<text 
x="55" 
y="1024" 
class="s2_337"
>of extraneous text in the document (for example, the first word is “Section”), and we’ve</text>

<text 
x="55" 
y="1051" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_337"
>split on midsentence periods (for example, in “Web 2.0”), and there are a handful of</text>

<text 
x="55" 
y="1079" 
class="s2_337"
>captions and lists sprinkled throughout. Having said that, we’ll work with the</text>

<text 
x="740" 
y="1079" 
class="s4_337"
>document</text>

<text 
x="829" 
y="1079" 
class="s2_337"
>as</text>

<text 
x="55" 
y="1109" 
class="s2_337"
>it is.</text>

<text 
x="55" 
y="1147" 
class="s2_337"
>Now that we have the text as a sequence of words, we can model language in the</text>

<text 
x="55" 
y="1175" 
class="s2_337"
>following way: given some starting word (say “book”) we look at all the words that follow</text>

<text 
x="55" 
y="1202" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.8" 
class="s2_337"
>it in the source documents (here “isn’t,” “a,” “shows,” “demonstrates,” and “teaches”). We</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
