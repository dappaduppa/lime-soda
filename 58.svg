<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 58 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_58{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_58{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_58{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_58{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_58{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_58{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s7_58{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s8_58{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s9_58{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_58{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s11_58{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
dx="0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0" 
class="s1_58"
>List Comprehensions</text>

<text 
x="55" 
y="115" 
dx="0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_58"
>Frequently, you’ll want to transform a list into another list, by choosing only certain</text>

<text 
x="55" 
y="143" 
class="s2_58"
>elements, or by transforming elements, or both. The Pythonic way of doing this is</text>

<text 
x="779" 
y="143" 
class="s3_58"
>list</text>

<text 
x="55" 
y="170" 
dx="0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0" 
class="s3_58"
>comprehensions</text>

<text 
x="197" 
y="170" 
class="s2_58"
>:</text>

<text 
x="76" 
y="215" 
class="s4_58"
>even_numbers</text>

<text 
x="179" 
y="215" 
dx="0,0,4.6" 
class="s5_58"
>= [</text>

<text 
x="203" 
y="215" 
class="s4_58"
>x</text>

<text 
x="219" 
y="215" 
class="s6_58"
>for</text>

<text 
x="250" 
y="215" 
class="s4_58"
>x</text>

<text 
x="266" 
y="215" 
class="s7_58"
>in</text>

<text 
x="290" 
y="215" 
class="s8_58"
>range</text>

<text 
x="329" 
y="215" 
class="s5_58"
>(</text>

<text 
x="337" 
y="215" 
class="s9_58"
>5</text>

<text 
x="345" 
y="215" 
class="s5_58"
>)</text>

<text 
x="361" 
y="215" 
class="s6_58"
>if</text>

<text 
x="385" 
y="215" 
class="s4_58"
>x</text>

<text 
x="401" 
y="215" 
class="s5_58"
>%</text>

<text 
x="416" 
y="215" 
class="s9_58"
>2</text>

<text 
x="432" 
y="215" 
class="s5_58"
>==</text>

<text 
x="456" 
y="215" 
class="s9_58"
>0</text>

<text 
x="464" 
y="215" 
class="s5_58"
>]</text>

<text 
x="487" 
y="215" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0" 
class="s10_58"
># [0, 2, 4]</text>

<text 
x="76" 
y="231" 
class="s4_58"
>squares</text>

<text 
x="179" 
y="231" 
dx="0,0,4.6" 
class="s5_58"
>= [</text>

<text 
x="203" 
y="231" 
class="s4_58"
>x</text>

<text 
x="219" 
y="231" 
class="s5_58"
>*</text>

<text 
x="235" 
y="231" 
class="s4_58"
>x</text>

<text 
x="250" 
y="231" 
class="s6_58"
>for</text>

<text 
x="282" 
y="231" 
class="s4_58"
>x</text>

<text 
x="298" 
y="231" 
class="s7_58"
>in</text>

<text 
x="322" 
y="231" 
class="s8_58"
>range</text>

<text 
x="361" 
y="231" 
class="s5_58"
>(</text>

<text 
x="369" 
y="231" 
class="s9_58"
>5</text>

<text 
x="377" 
y="231" 
class="s5_58"
>)]</text>

<text 
x="487" 
y="231" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,4.6,0,0" 
class="s10_58"
># [0, 1, 4, 9, 16]</text>

<text 
x="76" 
y="246" 
class="s4_58"
>even_squares</text>

<text 
x="179" 
y="246" 
dx="0,0,4.6" 
class="s5_58"
>= [</text>

<text 
x="203" 
y="246" 
class="s4_58"
>x</text>

<text 
x="219" 
y="246" 
class="s5_58"
>*</text>

<text 
x="235" 
y="246" 
class="s4_58"
>x</text>

<text 
x="250" 
y="246" 
class="s6_58"
>for</text>

<text 
x="282" 
y="246" 
class="s4_58"
>x</text>

<text 
x="298" 
y="246" 
class="s7_58"
>in</text>

<text 
x="322" 
y="246" 
class="s4_58"
>even_numbers</text>

<text 
x="416" 
y="246" 
class="s5_58"
>]</text>

<text 
x="487" 
y="246" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0,0" 
class="s10_58"
># [0, 4, 16]</text>

<text 
x="55" 
y="299" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_58"
>You can similarly turn lists into dictionaries or sets:</text>

<text 
x="76" 
y="344" 
class="s4_58"
>square_dict</text>

<text 
x="171" 
y="344" 
dx="0,0,4.6" 
class="s5_58"
>= {</text>

<text 
x="203" 
y="344" 
class="s4_58"
>x</text>

<text 
x="219" 
y="344" 
class="s5_58"
>:</text>

<text 
x="235" 
y="344" 
class="s4_58"
>x</text>

<text 
x="250" 
y="344" 
class="s5_58"
>*</text>

<text 
x="266" 
y="344" 
class="s4_58"
>x</text>

<text 
x="282" 
y="344" 
class="s6_58"
>for</text>

<text 
x="314" 
y="344" 
class="s4_58"
>x</text>

<text 
x="329" 
y="344" 
class="s7_58"
>in</text>

<text 
x="353" 
y="344" 
class="s8_58"
>range</text>

<text 
x="393" 
y="344" 
class="s5_58"
>(</text>

<text 
x="401" 
y="344" 
class="s9_58"
>5</text>

<text 
x="408" 
y="344" 
dx="0,0,4.6" 
class="s5_58"
>) }</text>

<text 
x="448" 
y="344" 
dx="0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6" 
class="s10_58"
># { 0:0, 1:1, 2:4, 3:9, 4:16 }</text>

<text 
x="76" 
y="359" 
class="s4_58"
>square_set</text>

<text 
x="171" 
y="359" 
dx="0,0,4.6" 
class="s5_58"
>= {</text>

<text 
x="203" 
y="359" 
class="s4_58"
>x</text>

<text 
x="219" 
y="359" 
class="s5_58"
>*</text>

<text 
x="235" 
y="359" 
class="s4_58"
>x</text>

<text 
x="250" 
y="359" 
class="s6_58"
>for</text>

<text 
x="282" 
y="359" 
class="s4_58"
>x</text>

<text 
x="298" 
y="359" 
class="s7_58"
>in</text>

<text 
x="322" 
y="359" 
class="s5_58"
>[</text>

<text 
x="329" 
y="359" 
class="s9_58"
>1</text>

<text 
x="337" 
y="359" 
dx="0,0,4.6" 
class="s5_58"
>, -</text>

<text 
x="361" 
y="359" 
class="s9_58"
>1</text>

<text 
x="369" 
y="359" 
dx="0,0,4.6" 
class="s5_58"
>] }</text>

<text 
x="448" 
y="359" 
dx="0,0,4.6,0,4.6,0,4.6" 
class="s10_58"
># { 1 }</text>

<text 
x="55" 
y="412" 
dx="0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_58"
>If you don’t need the value from the list, it’s conventional to use an underscore as the</text>

<text 
x="55" 
y="440" 
class="s2_58"
>variable:</text>

<text 
x="76" 
y="485" 
class="s4_58"
>zeroes</text>

<text 
x="132" 
y="485" 
dx="0,0,4.6" 
class="s5_58"
>= [</text>

<text 
x="156" 
y="485" 
class="s9_58"
>0</text>

<text 
x="171" 
y="485" 
class="s6_58"
>for</text>

<text 
x="203" 
y="485" 
class="s4_58"
>_</text>

<text 
x="219" 
y="485" 
class="s7_58"
>in</text>

<text 
x="242" 
y="485" 
class="s4_58"
>even_numbers</text>

<text 
x="337" 
y="485" 
class="s5_58"
>]</text>

<text 
x="393" 
y="485" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s10_58"
># has the same length as even_numbers</text>

<text 
x="55" 
y="538" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_58"
>A list comprehension can include multiple</text>

<text 
x="432" 
y="538" 
class="s11_58"
>for</text>

<text 
x="463" 
y="538" 
class="s2_58"
>s:</text>

<text 
x="76" 
y="585" 
class="s4_58"
>pairs</text>

<text 
x="124" 
y="585" 
dx="0,0,4.6,0" 
class="s5_58"
>= [(</text>

<text 
x="156" 
y="585" 
class="s4_58"
>x</text>

<text 
x="163" 
y="585" 
class="s5_58"
>,</text>

<text 
x="179" 
y="585" 
class="s4_58"
>y</text>

<text 
x="187" 
y="585" 
class="s5_58"
>)</text>

<text 
x="148" 
y="600" 
class="s6_58"
>for</text>

<text 
x="179" 
y="600" 
class="s4_58"
>x</text>

<text 
x="195" 
y="600" 
class="s7_58"
>in</text>

<text 
x="219" 
y="600" 
class="s8_58"
>range</text>

<text 
x="258" 
y="600" 
class="s5_58"
>(</text>

<text 
x="266" 
y="600" 
class="s9_58"
>10</text>

<text 
x="282" 
y="600" 
class="s5_58"
>)</text>

<text 
x="148" 
y="616" 
class="s6_58"
>for</text>

<text 
x="179" 
y="616" 
class="s4_58"
>y</text>

<text 
x="195" 
y="616" 
class="s7_58"
>in</text>

<text 
x="219" 
y="616" 
class="s8_58"
>range</text>

<text 
x="258" 
y="616" 
class="s5_58"
>(</text>

<text 
x="266" 
y="616" 
class="s9_58"
>10</text>

<text 
x="282" 
y="616" 
class="s5_58"
>)]</text>

<text 
x="322" 
y="616" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s10_58"
># 100 pairs (0,0) (0,1) ... (9,8), (9,9)</text>

<text 
x="55" 
y="668" 
class="s2_58"
>and later</text>

<text 
x="136" 
y="668" 
class="s11_58"
>for</text>

<text 
x="168" 
y="668" 
class="s2_58"
>s can use the results of earlier ones:</text>

<text 
x="76" 
y="716" 
class="s4_58"
>increasing_pairs</text>

<text 
x="211" 
y="716" 
dx="0,0,4.6,0" 
class="s5_58"
>= [(</text>

<text 
x="242" 
y="716" 
class="s4_58"
>x</text>

<text 
x="250" 
y="716" 
class="s5_58"
>,</text>

<text 
x="266" 
y="716" 
class="s4_58"
>y</text>

<text 
x="274" 
y="716" 
class="s5_58"
>)</text>

<text 
x="464" 
y="716" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,4.6,0" 
class="s10_58"
># only pairs with x &lt; y,</text>

<text 
x="235" 
y="731" 
class="s6_58"
>for</text>

<text 
x="266" 
y="731" 
class="s4_58"
>x</text>

<text 
x="282" 
y="731" 
class="s7_58"
>in</text>

<text 
x="306" 
y="731" 
class="s8_58"
>range</text>

<text 
x="345" 
y="731" 
class="s5_58"
>(</text>

<text 
x="353" 
y="731" 
class="s9_58"
>10</text>

<text 
x="369" 
y="731" 
class="s5_58"
>)</text>

<text 
x="464" 
y="731" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0" 
class="s10_58"
># range(lo, hi) equals</text>

<text 
x="235" 
y="747" 
class="s6_58"
>for</text>

<text 
x="266" 
y="747" 
class="s4_58"
>y</text>

<text 
x="282" 
y="747" 
class="s7_58"
>in</text>

<text 
x="306" 
y="747" 
class="s8_58"
>range</text>

<text 
x="345" 
y="747" 
class="s5_58"
>(</text>

<text 
x="353" 
y="747" 
class="s4_58"
>x</text>

<text 
x="369" 
y="747" 
class="s5_58"
>+</text>

<text 
x="385" 
y="747" 
class="s9_58"
>1</text>

<text 
x="393" 
y="747" 
class="s5_58"
>,</text>

<text 
x="408" 
y="747" 
class="s9_58"
>10</text>

<text 
x="424" 
y="747" 
class="s5_58"
>)]</text>

<text 
x="464" 
y="747" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,4.6,0" 
class="s10_58"
># [lo, lo + 1, ..., hi - 1]</text>

<text 
x="55" 
y="799" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_58"
>We will use list comprehensions a lot.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
