<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 65 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_65{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_65{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_65{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s4_65{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_65{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_65{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s7_65{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s8_65{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s9_65{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s10_65{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_65"
>enumerate</text>

<text 
x="55" 
y="115" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_65"
>Not infrequently, you’ll want to iterate over a list and use both its elements and their</text>

<text 
x="55" 
y="143" 
class="s2_65"
>indexes:</text>

<text 
x="76" 
y="188" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_65"
># not Pythonic</text>

<text 
x="76" 
y="203" 
class="s4_65"
>for</text>

<text 
x="108" 
y="203" 
class="s5_65"
>i</text>

<text 
x="124" 
y="203" 
class="s6_65"
>in</text>

<text 
x="148" 
y="203" 
class="s7_65"
>range</text>

<text 
x="187" 
y="203" 
class="s8_65"
>(</text>

<text 
x="195" 
y="203" 
class="s7_65"
>len</text>

<text 
x="219" 
y="203" 
class="s8_65"
>(</text>

<text 
x="227" 
y="203" 
class="s5_65"
>documents</text>

<text 
x="298" 
y="203" 
class="s8_65"
>)):</text>

<text 
x="108" 
y="218" 
class="s5_65"
>document</text>

<text 
x="179" 
y="218" 
class="s8_65"
>=</text>

<text 
x="195" 
y="218" 
class="s5_65"
>documents</text>

<text 
x="266" 
y="218" 
class="s8_65"
>[</text>

<text 
x="274" 
y="218" 
class="s5_65"
>i</text>

<text 
x="282" 
y="218" 
class="s8_65"
>]</text>

<text 
x="108" 
y="234" 
class="s5_65"
>do_something</text>

<text 
x="203" 
y="234" 
class="s8_65"
>(</text>

<text 
x="211" 
y="234" 
class="s5_65"
>i</text>

<text 
x="219" 
y="234" 
class="s8_65"
>,</text>

<text 
x="235" 
y="234" 
class="s5_65"
>document</text>

<text 
x="298" 
y="234" 
class="s8_65"
>)</text>

<text 
x="76" 
y="265" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_65"
># also not Pythonic</text>

<text 
x="76" 
y="280" 
class="s5_65"
>i</text>

<text 
x="92" 
y="280" 
class="s8_65"
>=</text>

<text 
x="108" 
y="280" 
class="s9_65"
>0</text>

<text 
x="76" 
y="295" 
class="s4_65"
>for</text>

<text 
x="108" 
y="295" 
class="s5_65"
>document</text>

<text 
x="179" 
y="295" 
class="s6_65"
>in</text>

<text 
x="203" 
y="295" 
class="s5_65"
>documents</text>

<text 
x="274" 
y="295" 
class="s8_65"
>:</text>

<text 
x="108" 
y="311" 
class="s5_65"
>do_something</text>

<text 
x="203" 
y="311" 
class="s8_65"
>(</text>

<text 
x="211" 
y="311" 
class="s5_65"
>i</text>

<text 
x="219" 
y="311" 
class="s8_65"
>,</text>

<text 
x="235" 
y="311" 
class="s5_65"
>document</text>

<text 
x="298" 
y="311" 
class="s8_65"
>)</text>

<text 
x="108" 
y="326" 
class="s5_65"
>i</text>

<text 
x="124" 
y="326" 
class="s8_65"
>+=</text>

<text 
x="148" 
y="326" 
class="s9_65"
>1</text>

<text 
x="55" 
y="379" 
class="s2_65"
>The Pythonic solution is</text>

<text 
x="274" 
y="379" 
class="s10_65"
>enumerate</text>

<text 
x="369" 
y="379" 
class="s2_65"
>, which produces tuples</text>

<text 
x="582" 
y="379" 
dx="0,0,0,0,0,0,0,0,6.1,0,0,0,0,0,0,0" 
class="s10_65"
>(index, element)</text>

<text 
x="751" 
y="379" 
class="s2_65"
>:</text>

<text 
x="76" 
y="426" 
class="s4_65"
>for</text>

<text 
x="108" 
y="426" 
class="s5_65"
>i</text>

<text 
x="116" 
y="426" 
class="s8_65"
>,</text>

<text 
x="132" 
y="426" 
class="s5_65"
>document</text>

<text 
x="203" 
y="426" 
class="s6_65"
>in</text>

<text 
x="227" 
y="426" 
class="s7_65"
>enumerate</text>

<text 
x="298" 
y="426" 
class="s8_65"
>(</text>

<text 
x="306" 
y="426" 
class="s5_65"
>documents</text>

<text 
x="377" 
y="426" 
class="s8_65"
>):</text>

<text 
x="108" 
y="442" 
class="s5_65"
>do_something</text>

<text 
x="203" 
y="442" 
class="s8_65"
>(</text>

<text 
x="211" 
y="442" 
class="s5_65"
>i</text>

<text 
x="219" 
y="442" 
class="s8_65"
>,</text>

<text 
x="235" 
y="442" 
class="s5_65"
>document</text>

<text 
x="298" 
y="442" 
class="s8_65"
>)</text>

<text 
x="55" 
y="495" 
dx="0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_65"
>Similarly, if we just want the indexes:</text>

<text 
x="76" 
y="540" 
class="s4_65"
>for</text>

<text 
x="108" 
y="540" 
class="s5_65"
>i</text>

<text 
x="124" 
y="540" 
class="s6_65"
>in</text>

<text 
x="148" 
y="540" 
class="s7_65"
>range</text>

<text 
x="187" 
y="540" 
class="s8_65"
>(</text>

<text 
x="195" 
y="540" 
class="s7_65"
>len</text>

<text 
x="219" 
y="540" 
class="s8_65"
>(</text>

<text 
x="227" 
y="540" 
class="s5_65"
>documents</text>

<text 
x="298" 
y="540" 
class="s8_65"
>)):</text>

<text 
x="329" 
y="540" 
class="s5_65"
>do_something</text>

<text 
x="424" 
y="540" 
class="s8_65"
>(</text>

<text 
x="432" 
y="540" 
class="s5_65"
>i</text>

<text 
x="440" 
y="540" 
class="s8_65"
>)</text>

<text 
x="487" 
y="540" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s3_65"
># not Pythonic</text>

<text 
x="76" 
y="555" 
class="s4_65"
>for</text>

<text 
x="108" 
y="555" 
class="s5_65"
>i</text>

<text 
x="116" 
y="555" 
class="s8_65"
>,</text>

<text 
x="132" 
y="555" 
class="s5_65"
>_</text>

<text 
x="148" 
y="555" 
class="s6_65"
>in</text>

<text 
x="171" 
y="555" 
class="s7_65"
>enumerate</text>

<text 
x="242" 
y="555" 
class="s8_65"
>(</text>

<text 
x="250" 
y="555" 
class="s5_65"
>documents</text>

<text 
x="322" 
y="555" 
class="s8_65"
>):</text>

<text 
x="345" 
y="555" 
class="s5_65"
>do_something</text>

<text 
x="440" 
y="555" 
class="s8_65"
>(</text>

<text 
x="448" 
y="555" 
class="s5_65"
>i</text>

<text 
x="456" 
y="555" 
class="s8_65"
>)</text>

<text 
x="487" 
y="555" 
dx="0,0,4.6,0,0,0,0,0,0,0" 
class="s3_65"
># Pythonic</text>

<text 
x="55" 
y="608" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_65"
>We’ll use this a lot.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
