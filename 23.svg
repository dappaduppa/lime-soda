<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 23 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_23{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s2_23{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s3_23{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s4_23{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_23{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s6_23{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_23{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s8_23{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s9_23{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s10_23{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s11_23{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s12_23{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s13_23{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s14_23{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="74" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,-1.2" 
class="s1_23"
>For example, we might want to add a list of friends to each user. First we set each user’s</text>

<text 
x="55" 
y="102" 
class="s2_23"
>friends</text>

<text 
x="134" 
y="102" 
class="s1_23"
>property to an empty list:</text>

<text 
x="76" 
y="149" 
class="s3_23"
>for</text>

<text 
x="108" 
y="149" 
class="s4_23"
>user</text>

<text 
x="148" 
y="149" 
class="s5_23"
>in</text>

<text 
x="171" 
y="149" 
class="s4_23"
>users</text>

<text 
x="211" 
y="149" 
class="s6_23"
>:</text>

<text 
x="108" 
y="165" 
class="s4_23"
>user</text>

<text 
x="140" 
y="165" 
class="s6_23"
>[</text>

<text 
x="148" 
y="165" 
class="s7_23"
>"friends"</text>

<text 
x="219" 
y="165" 
dx="0,0,4.6,0,4.6,0" 
class="s6_23"
>] = []</text>

<text 
x="55" 
y="217" 
class="s1_23"
>And then we populate the lists using the</text>

<text 
x="412" 
y="217" 
class="s2_23"
>friendships</text>

<text 
x="534" 
y="217" 
class="s1_23"
>data:</text>

<text 
x="76" 
y="265" 
class="s3_23"
>for</text>

<text 
x="108" 
y="265" 
class="s4_23"
>i</text>

<text 
x="116" 
y="265" 
class="s6_23"
>,</text>

<text 
x="132" 
y="265" 
class="s4_23"
>j</text>

<text 
x="148" 
y="265" 
class="s5_23"
>in</text>

<text 
x="171" 
y="265" 
class="s4_23"
>friendships</text>

<text 
x="258" 
y="265" 
class="s6_23"
>:</text>

<text 
x="108" 
y="280" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6" 
class="s8_23"
># this works because users[i] is the user whose id is i</text>

<text 
x="108" 
y="295" 
class="s4_23"
>users</text>

<text 
x="148" 
y="295" 
class="s6_23"
>[</text>

<text 
x="156" 
y="295" 
class="s4_23"
>i</text>

<text 
x="163" 
y="295" 
class="s6_23"
>][</text>

<text 
x="179" 
y="295" 
class="s7_23"
>"friends"</text>

<text 
x="250" 
y="295" 
class="s6_23"
>].</text>

<text 
x="266" 
y="295" 
class="s4_23"
>append</text>

<text 
x="314" 
y="295" 
class="s6_23"
>(</text>

<text 
x="322" 
y="295" 
class="s4_23"
>users</text>

<text 
x="361" 
y="295" 
class="s6_23"
>[</text>

<text 
x="369" 
y="295" 
class="s4_23"
>j</text>

<text 
x="377" 
y="295" 
class="s6_23"
>])</text>

<text 
x="401" 
y="295" 
dx="0,0,4.6,0,0,0,4.6,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6" 
class="s8_23"
># add i as a friend of j</text>

<text 
x="108" 
y="311" 
class="s4_23"
>users</text>

<text 
x="148" 
y="311" 
class="s6_23"
>[</text>

<text 
x="156" 
y="311" 
class="s4_23"
>j</text>

<text 
x="163" 
y="311" 
class="s6_23"
>][</text>

<text 
x="179" 
y="311" 
class="s7_23"
>"friends"</text>

<text 
x="250" 
y="311" 
class="s6_23"
>].</text>

<text 
x="266" 
y="311" 
class="s4_23"
>append</text>

<text 
x="314" 
y="311" 
class="s6_23"
>(</text>

<text 
x="322" 
y="311" 
class="s4_23"
>users</text>

<text 
x="361" 
y="311" 
class="s6_23"
>[</text>

<text 
x="369" 
y="311" 
class="s4_23"
>i</text>

<text 
x="377" 
y="311" 
class="s6_23"
>])</text>

<text 
x="401" 
y="311" 
dx="0,0,4.6,0,0,0,4.6,0,4.6,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6" 
class="s8_23"
># add j as a friend of i</text>

<text 
x="55" 
y="364" 
class="s1_23"
>Once each</text>

<text 
x="152" 
y="364" 
dx="0,0,0,0,0,1.1,0,0,0" 
class="s2_23"
>user dict</text>

<text 
x="248" 
y="364" 
class="s1_23"
>contains a list of friends, we can easily ask questions of our graph,</text>

<text 
x="55" 
y="393" 
dx="0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_23"
>like “what’s the average number of connections?”</text>

<text 
x="55" 
y="432" 
class="s1_23"
>First we find the</text>

<text 
x="205" 
y="432" 
class="s9_23"
>total</text>

<text 
x="250" 
y="432" 
class="s1_23"
>number of connections, by summing up the lengths of all the</text>

<text 
x="55" 
y="459" 
class="s2_23"
>friends</text>

<text 
x="134" 
y="459" 
class="s1_23"
>lists:</text>

<text 
x="76" 
y="507" 
class="s3_23"
>def</text>

<text 
x="108" 
y="507" 
class="s10_23"
>number_of_friends</text>

<text 
x="242" 
y="507" 
class="s6_23"
>(</text>

<text 
x="250" 
y="507" 
class="s4_23"
>user</text>

<text 
x="282" 
y="507" 
class="s6_23"
>):</text>

<text 
x="108" 
y="522" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s11_23"
>"""how many friends does _user_ have?"""</text>

<text 
x="108" 
y="538" 
class="s3_23"
>return</text>

<text 
x="163" 
y="538" 
class="s12_23"
>len</text>

<text 
x="187" 
y="538" 
class="s6_23"
>(</text>

<text 
x="195" 
y="538" 
class="s4_23"
>user</text>

<text 
x="227" 
y="538" 
class="s6_23"
>[</text>

<text 
x="235" 
y="538" 
class="s7_23"
>"friends"</text>

<text 
x="306" 
y="538" 
class="s6_23"
>])</text>

<text 
x="472" 
y="538" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s8_23"
># length of friend_ids list</text>

<text 
x="76" 
y="568" 
class="s4_23"
>total_connections</text>

<text 
x="219" 
y="568" 
class="s6_23"
>=</text>

<text 
x="235" 
y="568" 
class="s12_23"
>sum</text>

<text 
x="258" 
y="568" 
class="s6_23"
>(</text>

<text 
x="266" 
y="568" 
class="s4_23"
>number_of_friends</text>

<text 
x="401" 
y="568" 
class="s6_23"
>(</text>

<text 
x="408" 
y="568" 
class="s4_23"
>user</text>

<text 
x="440" 
y="568" 
class="s6_23"
>)</text>

<text 
x="266" 
y="584" 
class="s3_23"
>for</text>

<text 
x="298" 
y="584" 
class="s4_23"
>user</text>

<text 
x="337" 
y="584" 
class="s5_23"
>in</text>

<text 
x="361" 
y="584" 
class="s4_23"
>users</text>

<text 
x="401" 
y="584" 
class="s6_23"
>)</text>

<text 
x="472" 
y="584" 
dx="0,0,4.6,0" 
class="s8_23"
># 24</text>

<text 
x="55" 
y="637" 
class="s1_23"
>And then we just divide by the number of users:</text>

<text 
x="76" 
y="682" 
class="s3_23"
>from</text>

<text 
x="116" 
y="682" 
class="s13_23"
>__future__</text>

<text 
x="203" 
y="682" 
class="s3_23"
>import</text>

<text 
x="258" 
y="682" 
class="s4_23"
>division</text>

<text 
x="472" 
y="682" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0" 
class="s8_23"
># integer division is lame</text>

<text 
x="76" 
y="697" 
class="s4_23"
>num_users</text>

<text 
x="156" 
y="697" 
class="s6_23"
>=</text>

<text 
x="171" 
y="697" 
class="s12_23"
>len</text>

<text 
x="195" 
y="697" 
class="s6_23"
>(</text>

<text 
x="203" 
y="697" 
class="s4_23"
>users</text>

<text 
x="242" 
y="697" 
class="s6_23"
>)</text>

<text 
x="472" 
y="697" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0" 
class="s8_23"
># length of the users list</text>

<text 
x="76" 
y="712" 
class="s4_23"
>avg_connections</text>

<text 
x="203" 
y="712" 
class="s6_23"
>=</text>

<text 
x="219" 
y="712" 
class="s4_23"
>total_connections</text>

<text 
x="361" 
y="712" 
class="s6_23"
>/</text>

<text 
x="377" 
y="712" 
class="s4_23"
>num_users</text>

<text 
x="472" 
y="712" 
dx="0,0,4.6,0,0" 
class="s8_23"
># 2.4</text>

<text 
x="55" 
y="765" 
dx="0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0" 
class="s1_23"
>It’s also easy to find the most connected people — they’re the people who have the largest</text>

<text 
x="55" 
y="793" 
class="s1_23"
>number of friends.</text>

<text 
x="55" 
y="831" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_23"
>Since there aren’t very many users, we can sort them from “most friends” to “least</text>

<text 
x="55" 
y="859" 
class="s1_23"
>friends”:</text>

<text 
x="76" 
y="904" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_23"
># create a list (user_id, number_of_friends)</text>

<text 
x="76" 
y="919" 
class="s4_23"
>num_friends_by_id</text>

<text 
x="219" 
y="919" 
dx="0,0,4.6,0" 
class="s6_23"
>= [(</text>

<text 
x="250" 
y="919" 
class="s4_23"
>user</text>

<text 
x="282" 
y="919" 
class="s6_23"
>[</text>

<text 
x="290" 
y="919" 
class="s7_23"
>"id"</text>

<text 
x="322" 
y="919" 
class="s6_23"
>],</text>

<text 
x="345" 
y="919" 
class="s4_23"
>number_of_friends</text>

<text 
x="480" 
y="919" 
class="s6_23"
>(</text>

<text 
x="487" 
y="919" 
class="s4_23"
>user</text>

<text 
x="519" 
y="919" 
class="s6_23"
>))</text>

<text 
x="242" 
y="935" 
class="s3_23"
>for</text>

<text 
x="274" 
y="935" 
class="s4_23"
>user</text>

<text 
x="314" 
y="935" 
class="s5_23"
>in</text>

<text 
x="337" 
y="935" 
class="s4_23"
>users</text>

<text 
x="377" 
y="935" 
class="s6_23"
>]</text>

<text 
x="76" 
y="966" 
class="s12_23"
>sorted</text>

<text 
x="124" 
y="966" 
class="s6_23"
>(</text>

<text 
x="132" 
y="966" 
class="s4_23"
>num_friends_by_id</text>

<text 
x="266" 
y="966" 
class="s6_23"
>,</text>

<text 
x="527" 
y="966" 
dx="0,0,4.6,0,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s8_23"
># get it sorted</text>

<text 
x="132" 
y="981" 
class="s4_23"
>key</text>

<text 
x="156" 
y="981" 
class="s6_23"
>=</text>

<text 
x="163" 
y="981" 
class="s3_23"
>lambda</text>

<text 
x="219" 
y="981" 
class="s6_23"
>(</text>

<text 
x="227" 
y="981" 
class="s4_23"
>user_id</text>

<text 
x="282" 
y="981" 
class="s6_23"
>,</text>

<text 
x="298" 
y="981" 
class="s4_23"
>num_friends</text>

<text 
x="385" 
y="981" 
class="s6_23"
>):</text>

<text 
x="408" 
y="981" 
class="s4_23"
>num_friends</text>

<text 
x="495" 
y="981" 
class="s6_23"
>,</text>

<text 
x="527" 
y="981" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,0" 
class="s8_23"
># by num_friends</text>

<text 
x="132" 
y="996" 
class="s4_23"
>reverse</text>

<text 
x="187" 
y="996" 
class="s6_23"
>=</text>

<text 
x="195" 
y="996" 
class="s12_23"
>True</text>

<text 
x="227" 
y="996" 
class="s6_23"
>)</text>

<text 
x="527" 
y="996" 
dx="0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s8_23"
># largest to smallest</text>

<text 
x="76" 
y="1027" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_23"
># each pair is (user_id, num_friends)</text>

<text 
x="76" 
y="1043" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0" 
class="s8_23"
># [(1, 3), (2, 3), (3, 3), (5, 3), (8, 3),</text>

<text 
x="76" 
y="1058" 
class="s8_23"
>#</text>

<text 
x="100" 
y="1058" 
dx="0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0" 
class="s8_23"
>(0, 2), (4, 2), (6, 2), (7, 2), (9, 1)]</text>

<text 
x="55" 
y="1111" 
class="s1_23"
>One way to think of what we’ve done is as a way of identifying people who are somehow</text>

<text 
x="55" 
y="1138" 
class="s1_23"
>central to the network. In fact, what we’ve just computed is the network metric</text>

<text 
x="754" 
y="1138" 
dx="0,0,0,0,-0.8,0" 
class="s9_23"
>degree</text>

<text 
x="55" 
y="1166" 
class="s9_23"
>centrality</text>

<text 
x="144" 
y="1166" 
class="s1_23"
>(</text>

<text 
x="152" 
y="1166" 
class="s14_23"
>Figure 1-2</text>

<text 
x="244" 
y="1166" 
class="s1_23"
>).</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
