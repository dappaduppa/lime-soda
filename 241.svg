<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 241 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_241{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_241{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_241{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s4_241{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_241{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_241{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s7_241{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_241{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s9_241{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s10_241{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s11_241{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s12_241{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s13_241{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
dx="0,-2.8,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0" 
class="s1_241"
>Testing Our Model</text>

<text 
x="55" 
y="122" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_241"
>A good (if somewhat old) data set is the</text>

<text 
x="410" 
y="122" 
class="s3_241"
>SpamAssassin public corpus</text>

<text 
x="662" 
y="122" 
dx="0,0,0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_241"
>. We’ll look at the</text>

<text 
x="55" 
y="149" 
class="s2_241"
>files prefixed with</text>

<text 
x="221" 
y="149" 
class="s4_241"
>20021010</text>

<text 
x="309" 
y="149" 
dx="0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_241"
>. (On Windows, you might need a program like</text>

<text 
x="730" 
y="149" 
class="s3_241"
>7-Zip</text>

<text 
x="785" 
y="149" 
class="s2_241"
>to</text>

<text 
x="55" 
y="177" 
class="s2_241"
>decompress and extract them.)</text>

<text 
x="55" 
y="215" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4" 
class="s2_241"
>After extracting the data (to, say,</text>

<text 
x="349" 
y="215" 
class="s4_241"
>C:\spam</text>

<text 
x="423" 
y="215" 
class="s2_241"
>) you should have three folders:</text>

<text 
x="708" 
y="215" 
class="s4_241"
>spam</text>

<text 
x="754" 
y="215" 
class="s2_241"
>,</text>

<text 
x="55" 
y="243" 
class="s4_241"
>easy_ham</text>

<text 
x="142" 
y="243" 
class="s2_241"
>, and</text>

<text 
x="191" 
y="243" 
dx="0,0,0,-0.8,0,0,0,0" 
class="s4_241"
>hard_ham</text>

<text 
x="280" 
y="243" 
class="s2_241"
>. Each folder contains many emails, each contained in a single</text>

<text 
x="55" 
y="270" 
dx="0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_241"
>file. To keep things</text>

<text 
x="229" 
y="270" 
dx="0,-0.8,0,0,0,0" 
class="s4_241"
>really</text>

<text 
x="285" 
y="270" 
class="s2_241"
>simple, we’ll just look at the subject lines of each email.</text>

<text 
x="55" 
y="309" 
class="s2_241"
>How do we identify the subject line? Looking through the files, they all seem to start with</text>

<text 
x="55" 
y="336" 
class="s2_241"
>“Subject:”. So we’ll look for that:</text>

<text 
x="76" 
y="381" 
class="s5_241"
>import</text>

<text 
x="132" 
y="381" 
class="s6_241"
>glob</text>

<text 
x="163" 
y="381" 
class="s7_241"
>,</text>

<text 
x="179" 
y="381" 
class="s6_241"
>re</text>

<text 
x="76" 
y="412" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0" 
class="s8_241"
># modify the path with wherever you've put the files</text>

<text 
x="76" 
y="428" 
class="s9_241"
>path</text>

<text 
x="116" 
y="428" 
class="s7_241"
>=</text>

<text 
x="132" 
y="428" 
class="s10_241"
>r"C:\spam\*\*"</text>

<text 
x="76" 
y="458" 
class="s9_241"
>data</text>

<text 
x="116" 
y="458" 
dx="0,0,4.6,0" 
class="s7_241"
>= []</text>

<text 
x="76" 
y="489" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,4.6,0,0,0" 
class="s8_241"
># glob.glob returns every filename that matches the wildcarded path</text>

<text 
x="76" 
y="505" 
class="s5_241"
>for</text>

<text 
x="108" 
y="505" 
class="s9_241"
>fn</text>

<text 
x="132" 
y="505" 
class="s11_241"
>in</text>

<text 
x="156" 
y="505" 
class="s9_241"
>glob</text>

<text 
x="187" 
y="505" 
class="s7_241"
>.</text>

<text 
x="195" 
y="505" 
class="s9_241"
>glob</text>

<text 
x="227" 
y="505" 
class="s7_241"
>(</text>

<text 
x="235" 
y="505" 
class="s9_241"
>path</text>

<text 
x="266" 
y="505" 
class="s7_241"
>):</text>

<text 
x="108" 
y="520" 
class="s9_241"
>is_spam</text>

<text 
x="171" 
y="520" 
class="s7_241"
>=</text>

<text 
x="187" 
y="520" 
class="s10_241"
>"ham"</text>

<text 
x="235" 
y="520" 
dx="0,0,0,0,4.6,0" 
class="s11_241"
>not in</text>

<text 
x="290" 
y="520" 
class="s9_241"
>fn</text>

<text 
x="108" 
y="551" 
class="s5_241"
>with</text>

<text 
x="148" 
y="551" 
class="s12_241"
>open</text>

<text 
x="179" 
y="551" 
class="s7_241"
>(</text>

<text 
x="187" 
y="551" 
class="s9_241"
>fn</text>

<text 
x="203" 
y="551" 
class="s7_241"
>,</text>

<text 
x="211" 
y="551" 
class="s10_241"
>'r'</text>

<text 
x="235" 
y="551" 
class="s7_241"
>)</text>

<text 
x="250" 
y="551" 
class="s5_241"
>as</text>

<text 
x="274" 
y="551" 
class="s12_241"
>file</text>

<text 
x="306" 
y="551" 
class="s7_241"
>:</text>

<text 
x="140" 
y="566" 
class="s5_241"
>for</text>

<text 
x="171" 
y="566" 
class="s9_241"
>line</text>

<text 
x="211" 
y="566" 
class="s11_241"
>in</text>

<text 
x="235" 
y="566" 
class="s12_241"
>file</text>

<text 
x="266" 
y="566" 
class="s7_241"
>:</text>

<text 
x="171" 
y="582" 
class="s5_241"
>if</text>

<text 
x="195" 
y="582" 
class="s9_241"
>line</text>

<text 
x="227" 
y="582" 
class="s7_241"
>.</text>

<text 
x="235" 
y="582" 
class="s9_241"
>startswith</text>

<text 
x="314" 
y="582" 
class="s7_241"
>(</text>

<text 
x="322" 
y="582" 
class="s10_241"
>"Subject:"</text>

<text 
x="401" 
y="582" 
class="s7_241"
>):</text>

<text 
x="203" 
y="597" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0" 
class="s8_241"
># remove the leading "Subject: " and keep what's left</text>

<text 
x="203" 
y="612" 
class="s9_241"
>subject</text>

<text 
x="266" 
y="612" 
class="s7_241"
>=</text>

<text 
x="282" 
y="612" 
class="s9_241"
>re</text>

<text 
x="298" 
y="612" 
class="s7_241"
>.</text>

<text 
x="306" 
y="612" 
class="s9_241"
>sub</text>

<text 
x="329" 
y="612" 
class="s7_241"
>(</text>

<text 
x="337" 
y="612" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,4.6" 
class="s10_241"
>r"^Subject: "</text>

<text 
x="440" 
y="612" 
class="s7_241"
>,</text>

<text 
x="456" 
y="612" 
class="s10_241"
>""</text>

<text 
x="472" 
y="612" 
class="s7_241"
>,</text>

<text 
x="487" 
y="612" 
class="s9_241"
>line</text>

<text 
x="519" 
y="612" 
class="s7_241"
>).</text>

<text 
x="535" 
y="612" 
class="s9_241"
>strip</text>

<text 
x="574" 
y="612" 
class="s7_241"
>()</text>

<text 
x="203" 
y="628" 
class="s9_241"
>data</text>

<text 
x="235" 
y="628" 
class="s7_241"
>.</text>

<text 
x="242" 
y="628" 
class="s9_241"
>append</text>

<text 
x="290" 
y="628" 
class="s7_241"
>((</text>

<text 
x="306" 
y="628" 
class="s9_241"
>subject</text>

<text 
x="361" 
y="628" 
class="s7_241"
>,</text>

<text 
x="377" 
y="628" 
class="s9_241"
>is_spam</text>

<text 
x="432" 
y="628" 
class="s7_241"
>))</text>

<text 
x="55" 
y="681" 
class="s2_241"
>Now we can split the data into training data and test data, and then we’re ready to build a</text>

<text 
x="55" 
y="708" 
class="s2_241"
>classifier:</text>

<text 
x="76" 
y="753" 
class="s9_241"
>random</text>

<text 
x="124" 
y="753" 
class="s7_241"
>.</text>

<text 
x="132" 
y="753" 
class="s9_241"
>seed</text>

<text 
x="163" 
y="753" 
class="s7_241"
>(</text>

<text 
x="171" 
y="753" 
class="s13_241"
>0</text>

<text 
x="179" 
y="753" 
class="s7_241"
>)</text>

<text 
x="235" 
y="753" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0" 
class="s8_241"
># just so you get the same answers as me</text>

<text 
x="76" 
y="769" 
class="s9_241"
>train_data</text>

<text 
x="156" 
y="769" 
class="s7_241"
>,</text>

<text 
x="171" 
y="769" 
class="s9_241"
>test_data</text>

<text 
x="250" 
y="769" 
class="s7_241"
>=</text>

<text 
x="266" 
y="769" 
class="s9_241"
>split_data</text>

<text 
x="345" 
y="769" 
class="s7_241"
>(</text>

<text 
x="353" 
y="769" 
class="s9_241"
>data</text>

<text 
x="385" 
y="769" 
class="s7_241"
>,</text>

<text 
x="401" 
y="769" 
class="s13_241"
>0.75</text>

<text 
x="432" 
y="769" 
class="s7_241"
>)</text>

<text 
x="76" 
y="799" 
class="s9_241"
>classifier</text>

<text 
x="163" 
y="799" 
class="s7_241"
>=</text>

<text 
x="179" 
y="799" 
class="s9_241"
>NaiveBayesClassifier</text>

<text 
x="337" 
y="799" 
class="s7_241"
>()</text>

<text 
x="76" 
y="815" 
class="s9_241"
>classifier</text>

<text 
x="156" 
y="815" 
class="s7_241"
>.</text>

<text 
x="163" 
y="815" 
class="s9_241"
>train</text>

<text 
x="203" 
y="815" 
class="s7_241"
>(</text>

<text 
x="211" 
y="815" 
class="s9_241"
>train_data</text>

<text 
x="290" 
y="815" 
class="s7_241"
>)</text>

<text 
x="55" 
y="868" 
class="s2_241"
>And then we can check how our model does:</text>

<text 
x="76" 
y="913" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0" 
class="s8_241"
># triplets (subject, actual is_spam, predicted spam probability)</text>

<text 
x="76" 
y="928" 
class="s9_241"
>classified</text>

<text 
x="163" 
y="928" 
dx="0,0,4.6,0" 
class="s7_241"
>= [(</text>

<text 
x="195" 
y="928" 
class="s9_241"
>subject</text>

<text 
x="250" 
y="928" 
class="s7_241"
>,</text>

<text 
x="266" 
y="928" 
class="s9_241"
>is_spam</text>

<text 
x="322" 
y="928" 
class="s7_241"
>,</text>

<text 
x="337" 
y="928" 
class="s9_241"
>classifier</text>

<text 
x="416" 
y="928" 
class="s7_241"
>.</text>

<text 
x="424" 
y="928" 
class="s9_241"
>classify</text>

<text 
x="487" 
y="928" 
class="s7_241"
>(</text>

<text 
x="495" 
y="928" 
class="s9_241"
>subject</text>

<text 
x="551" 
y="928" 
class="s7_241"
>))</text>

<text 
x="187" 
y="944" 
class="s5_241"
>for</text>

<text 
x="219" 
y="944" 
class="s9_241"
>subject</text>

<text 
x="274" 
y="944" 
class="s7_241"
>,</text>

<text 
x="290" 
y="944" 
class="s9_241"
>is_spam</text>

<text 
x="353" 
y="944" 
class="s11_241"
>in</text>

<text 
x="377" 
y="944" 
class="s9_241"
>test_data</text>

<text 
x="448" 
y="944" 
class="s7_241"
>]</text>

<text 
x="76" 
y="974" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0" 
class="s8_241"
># assume that spam_probability &gt; 0.5 corresponds to spam prediction</text>

<text 
x="76" 
y="990" 
dx="0,0,4.6,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s8_241"
># and count the combinations of (actual is_spam, predicted is_spam)</text>

<text 
x="76" 
y="1005" 
class="s9_241"
>counts</text>

<text 
x="132" 
y="1005" 
class="s7_241"
>=</text>

<text 
x="148" 
y="1005" 
class="s9_241"
>Counter</text>

<text 
x="203" 
y="1005" 
class="s7_241"
>((</text>

<text 
x="219" 
y="1005" 
class="s9_241"
>is_spam</text>

<text 
x="274" 
y="1005" 
class="s7_241"
>,</text>

<text 
x="290" 
y="1005" 
class="s9_241"
>spam_probability</text>

<text 
x="424" 
y="1005" 
class="s7_241"
>&gt;</text>

<text 
x="440" 
y="1005" 
class="s13_241"
>0.5</text>

<text 
x="464" 
y="1005" 
class="s7_241"
>)</text>

<text 
x="211" 
y="1021" 
class="s5_241"
>for</text>

<text 
x="242" 
y="1021" 
class="s9_241"
>_</text>

<text 
x="250" 
y="1021" 
class="s7_241"
>,</text>

<text 
x="266" 
y="1021" 
class="s9_241"
>is_spam</text>

<text 
x="322" 
y="1021" 
class="s7_241"
>,</text>

<text 
x="337" 
y="1021" 
class="s9_241"
>spam_probability</text>

<text 
x="472" 
y="1021" 
class="s11_241"
>in</text>

<text 
x="495" 
y="1021" 
class="s9_241"
>classified</text>

<text 
x="574" 
y="1021" 
class="s7_241"
>)</text>

<text 
x="55" 
y="1073" 
class="s2_241"
>This gives 101 true positives (spam classified as “spam”), 33 false positives (ham</text>

<text 
x="55" 
y="1101" 
class="s2_241"
>classified as “spam”), 704 true negatives (ham classified as “ham”), and 38 false negatives</text>

<text 
x="55" 
y="1128" 
class="s2_241"
>(spam classified as “ham”). This means our precision is 101 / (101 + 33) = 75%, and our</text>

<text 
x="55" 
y="1156" 
class="s2_241"
>recall is 101 / (101 + 38) = 73%, which are not bad numbers for such a simple model.</text>

<text 
x="55" 
y="1194" 
dx="0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_241"
>It’s also interesting to look at the most misclassified:</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
