<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 59 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_59{
fill: #BEBEBE;
}

.s1_59{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_59{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_59{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_59{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s5_59{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_59{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s7_59{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_59{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s9_59{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #CC3300;
}
.s10_59{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s11_59{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s12_59{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s13_59{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s14_59{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,824.1l722.5,0c3,0,5.5,2.5,5.5,5.5l0,77c0,3.1,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.4,-5.5,-5.5l0,-77c0,-3,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,2,4.4,4.4l0,77c0,2.4,-2,4.4,-4.4,4.4L93.5,911c-2.4,0,-4.4,-2,-4.4,-4.4l0,-77c0,-2.4,2,-4.4,4.4,-4.4Z" class="g1_59" />
<text 
x="55" 
y="77" 
class="s1_59"
>Generators and Iterators</text>

<text 
x="55" 
y="115" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_59"
>A problem with lists is that they can easily grow very big.</text>

<text 
x="568" 
y="115" 
class="s3_59"
>range(1000000)</text>

<text 
x="721" 
y="115" 
class="s2_59"
>creates an</text>

<text 
x="55" 
y="145" 
class="s2_59"
>actual list of 1 million elements. If you only need to deal with them one at a time, this can</text>

<text 
x="55" 
y="172" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_59"
>be a huge source of inefficiency (or of running out of memory). If you potentially only</text>

<text 
x="55" 
y="200" 
class="s2_59"
>need the first few values, then calculating them all is a waste.</text>

<text 
x="55" 
y="238" 
class="s2_59"
>A</text>

<text 
x="75" 
y="238" 
class="s4_59"
>generator</text>

<text 
x="167" 
y="238" 
class="s2_59"
>is something that you can iterate over (for us, usually using</text>

<text 
x="693" 
y="238" 
class="s3_59"
>for</text>

<text 
x="725" 
y="238" 
class="s2_59"
>) but whose</text>

<text 
x="55" 
y="268" 
class="s2_59"
>values are produced only as needed (</text>

<text 
x="379" 
y="268" 
class="s4_59"
>lazily</text>

<text 
x="427" 
y="268" 
class="s2_59"
>).</text>

<text 
x="55" 
y="306" 
class="s2_59"
>One way to create generators is with functions and the</text>

<text 
x="538" 
y="306" 
class="s3_59"
>yield</text>

<text 
x="596" 
y="306" 
class="s2_59"
>operator:</text>

<text 
x="76" 
y="354" 
class="s5_59"
>def</text>

<text 
x="108" 
y="354" 
class="s6_59"
>lazy_range</text>

<text 
x="187" 
y="354" 
class="s7_59"
>(</text>

<text 
x="195" 
y="354" 
class="s8_59"
>n</text>

<text 
x="203" 
y="354" 
class="s7_59"
>):</text>

<text 
x="108" 
y="369" 
dx="0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,0" 
class="s9_59"
>"""a lazy version of range"""</text>

<text 
x="108" 
y="385" 
class="s8_59"
>i</text>

<text 
x="124" 
y="385" 
class="s7_59"
>=</text>

<text 
x="140" 
y="385" 
class="s10_59"
>0</text>

<text 
x="108" 
y="400" 
class="s5_59"
>while</text>

<text 
x="156" 
y="400" 
class="s8_59"
>i</text>

<text 
x="171" 
y="400" 
class="s7_59"
>&lt;</text>

<text 
x="187" 
y="400" 
class="s8_59"
>n</text>

<text 
x="195" 
y="400" 
class="s7_59"
>:</text>

<text 
x="140" 
y="415" 
class="s5_59"
>yield</text>

<text 
x="187" 
y="415" 
class="s8_59"
>i</text>

<text 
x="140" 
y="431" 
class="s8_59"
>i</text>

<text 
x="156" 
y="431" 
class="s7_59"
>+=</text>

<text 
x="179" 
y="431" 
class="s10_59"
>1</text>

<text 
x="55" 
y="484" 
class="s2_59"
>The following loop will consume the</text>

<text 
x="385" 
y="484" 
class="s3_59"
>yield</text>

<text 
x="438" 
y="484" 
class="s2_59"
>ed values one at a time until none are left:</text>

<text 
x="76" 
y="531" 
class="s5_59"
>for</text>

<text 
x="108" 
y="531" 
class="s8_59"
>i</text>

<text 
x="124" 
y="531" 
class="s11_59"
>in</text>

<text 
x="148" 
y="531" 
class="s8_59"
>lazy_range</text>

<text 
x="227" 
y="531" 
class="s7_59"
>(</text>

<text 
x="235" 
y="531" 
class="s10_59"
>10</text>

<text 
x="250" 
y="531" 
class="s7_59"
>):</text>

<text 
x="108" 
y="546" 
class="s8_59"
>do_something_with</text>

<text 
x="242" 
y="546" 
class="s7_59"
>(</text>

<text 
x="250" 
y="546" 
class="s8_59"
>i</text>

<text 
x="258" 
y="546" 
class="s7_59"
>)</text>

<text 
x="55" 
y="599" 
class="s2_59"
>(Python actually comes with a</text>

<text 
x="326" 
y="599" 
class="s3_59"
>lazy_range</text>

<text 
x="437" 
y="599" 
class="s2_59"
>function called</text>

<text 
x="574" 
y="599" 
class="s3_59"
>xrange</text>

<text 
x="637" 
y="599" 
class="s2_59"
>, and in Python 3,</text>

<text 
x="798" 
y="599" 
class="s3_59"
>range</text>

<text 
x="55" 
y="629" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_59"
>itself is lazy.) This means you could even create an infinite sequence:</text>

<text 
x="76" 
y="674" 
class="s5_59"
>def</text>

<text 
x="108" 
y="674" 
class="s6_59"
>natural_numbers</text>

<text 
x="227" 
y="674" 
class="s7_59"
>():</text>

<text 
x="108" 
y="689" 
dx="0,0,0,0,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,4.6,0,0,4.6,0,0,0,0,0" 
class="s9_59"
>"""returns 1, 2, 3, ..."""</text>

<text 
x="108" 
y="705" 
class="s8_59"
>n</text>

<text 
x="124" 
y="705" 
class="s7_59"
>=</text>

<text 
x="140" 
y="705" 
class="s10_59"
>1</text>

<text 
x="108" 
y="720" 
class="s5_59"
>while</text>

<text 
x="156" 
y="720" 
class="s12_59"
>True</text>

<text 
x="187" 
y="720" 
class="s7_59"
>:</text>

<text 
x="140" 
y="736" 
class="s5_59"
>yield</text>

<text 
x="187" 
y="736" 
class="s8_59"
>n</text>

<text 
x="140" 
y="751" 
class="s8_59"
>n</text>

<text 
x="156" 
y="751" 
class="s7_59"
>+=</text>

<text 
x="179" 
y="751" 
class="s10_59"
>1</text>

<text 
x="55" 
y="804" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_59"
>although you probably shouldn’t iterate over it without using some kind of</text>

<text 
x="716" 
y="804" 
class="s3_59"
>break</text>

<text 
x="774" 
y="804" 
class="s2_59"
>logic.</text>

<text 
x="434" 
y="849" 
dx="0,1.1,1.1" 
class="s13_59"
>TIP</text>

<text 
x="97" 
y="879" 
class="s14_59"
>The flip side of laziness is that you can only iterate through a generator once. If you need to iterate through</text>

<text 
x="97" 
y="898" 
class="s14_59"
>something multiple times, you’ll need to either recreate the generator each time or use a list.</text>

<text 
x="55" 
y="944" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_59"
>A second way to create generators is by using</text>

<text 
x="462" 
y="944" 
class="s3_59"
>for</text>

<text 
x="499" 
y="944" 
class="s2_59"
>comprehensions wrapped in</text>

<text 
x="55" 
y="973" 
class="s2_59"
>parentheses:</text>

<text 
x="76" 
y="1018" 
class="s8_59"
>lazy_evens_below_20</text>

<text 
x="235" 
y="1018" 
dx="0,0,4.6" 
class="s7_59"
>= (</text>

<text 
x="258" 
y="1018" 
class="s8_59"
>i</text>

<text 
x="274" 
y="1018" 
class="s5_59"
>for</text>

<text 
x="306" 
y="1018" 
class="s8_59"
>i</text>

<text 
x="322" 
y="1018" 
class="s11_59"
>in</text>

<text 
x="345" 
y="1018" 
class="s8_59"
>lazy_range</text>

<text 
x="424" 
y="1018" 
class="s7_59"
>(</text>

<text 
x="432" 
y="1018" 
class="s10_59"
>20</text>

<text 
x="448" 
y="1018" 
class="s7_59"
>)</text>

<text 
x="464" 
y="1018" 
class="s5_59"
>if</text>

<text 
x="487" 
y="1018" 
class="s8_59"
>i</text>

<text 
x="503" 
y="1018" 
class="s7_59"
>%</text>

<text 
x="519" 
y="1018" 
class="s10_59"
>2</text>

<text 
x="535" 
y="1018" 
class="s7_59"
>==</text>

<text 
x="559" 
y="1018" 
class="s10_59"
>0</text>

<text 
x="567" 
y="1018" 
class="s7_59"
>)</text>

<text 
x="55" 
y="1071" 
class="s2_59"
>Recall also that every</text>

<text 
x="250" 
y="1071" 
class="s3_59"
>dict</text>

<text 
x="298" 
y="1071" 
class="s2_59"
>has an</text>

<text 
x="359" 
y="1071" 
class="s3_59"
>items()</text>

<text 
x="438" 
y="1071" 
class="s2_59"
>method that returns a list of its key-value pairs.</text>

<text 
x="55" 
y="1101" 
class="s2_59"
>More frequently we’ll use the</text>

<text 
x="321" 
y="1101" 
class="s3_59"
>iteritems()</text>

<text 
x="443" 
y="1101" 
class="s2_59"
>method, which lazily</text>

<text 
x="633" 
y="1101" 
class="s3_59"
>yield</text>

<text 
x="686" 
y="1101" 
class="s2_59"
>s the key-value</text>

<text 
x="55" 
y="1131" 
class="s2_59"
>pairs one at a time as we iterate over it.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
