<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 324 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_324{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_324{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_324{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_324{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s5_324{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s6_324{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s7_324{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s8_324{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s9_324{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s10_324{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s11_324{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s12_324{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s13_324{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s14_324{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_324"
>Example: Clustering Colors</text>

<text 
x="55" 
y="122" 
dx="0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>The VP of Swag has designed attractive DataSciencester stickers that he’d like you to</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>hand out at meetups. Unfortunately, your sticker printer can print at most five colors per</text>

<text 
x="55" 
y="177" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>sticker. And since the VP of Art is on sabbatical, the VP of Swag asks if there’s some way</text>

<text 
x="55" 
y="204" 
class="s2_324"
>you can take his design and modify it so that it only contains five colors.</text>

<text 
x="55" 
y="243" 
class="s2_324"
>Computer images can be represented as two-dimensional array of pixels, where each pixel</text>

<text 
x="55" 
y="270" 
class="s2_324"
>is itself a three-dimensional vector</text>

<text 
x="364" 
y="270" 
dx="0,0,0,0,0,0,6.1,0,0,0,0,0,0,6.1,0,0,0,0" 
class="s3_324"
>(red, green, blue)</text>

<text 
x="559" 
y="270" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_324"
>indicating its color.</text>

<text 
x="55" 
y="311" 
class="s2_324"
>Creating a five-color version of the image then entails:</text>

<text 
x="75" 
y="348" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>1. Choosing five colors</text>

<text 
x="75" 
y="396" 
dx="0,0,0,6.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>2. Assigning one of those colors to each pixel</text>

<text 
x="55" 
y="444" 
class="s2_324"
>It turns out this is a great task for k-means clustering, which can partition the pixels into</text>

<text 
x="55" 
y="472" 
class="s2_324"
>five clusters in red-green-blue space. If we then recolor the pixels in each cluster to the</text>

<text 
x="55" 
y="499" 
dx="0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>mean color, we’re done.</text>

<text 
x="55" 
y="538" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>To start with, we’ll need a way to load an image into Python. It turns out we can do this</text>

<text 
x="55" 
y="565" 
class="s2_324"
>with</text>

<text 
x="99" 
y="565" 
class="s3_324"
>matplotlib</text>

<text 
x="205" 
y="565" 
class="s2_324"
>:</text>

<text 
x="76" 
y="612" 
class="s4_324"
>path_to_png_file</text>

<text 
x="211" 
y="612" 
class="s5_324"
>=</text>

<text 
x="227" 
y="612" 
class="s6_324"
>r"C:\images\image.png"</text>

<text 
x="424" 
y="612" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0" 
class="s7_324"
># wherever your image is</text>

<text 
x="76" 
y="628" 
class="s8_324"
>import</text>

<text 
x="132" 
y="628" 
class="s9_324"
>matplotlib.image</text>

<text 
x="266" 
y="628" 
class="s8_324"
>as</text>

<text 
x="290" 
y="628" 
class="s9_324"
>mpimg</text>

<text 
x="76" 
y="643" 
class="s4_324"
>img</text>

<text 
x="108" 
y="643" 
class="s5_324"
>=</text>

<text 
x="124" 
y="643" 
class="s4_324"
>mpimg</text>

<text 
x="163" 
y="643" 
class="s5_324"
>.</text>

<text 
x="171" 
y="643" 
class="s4_324"
>imread</text>

<text 
x="219" 
y="643" 
class="s5_324"
>(</text>

<text 
x="227" 
y="643" 
class="s4_324"
>path_to_png_file</text>

<text 
x="353" 
y="643" 
class="s5_324"
>)</text>

<text 
x="55" 
y="696" 
class="s2_324"
>Behind the scenes</text>

<text 
x="219" 
y="696" 
class="s3_324"
>img</text>

<text 
x="256" 
y="696" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>is a NumPy array, but for our purposes, we can treat it as a list of</text>

<text 
x="55" 
y="726" 
class="s2_324"
>lists of lists.</text>

<text 
x="55" 
y="764" 
class="s3_324"
>img[i][j]</text>

<text 
x="155" 
y="764" 
class="s2_324"
>is the pixel in the</text>

<text 
x="312" 
y="764" 
class="s10_324"
>i</text>

<text 
x="318" 
y="764" 
class="s2_324"
>th row and</text>

<text 
x="417" 
y="764" 
class="s10_324"
>j</text>

<text 
x="424" 
y="764" 
class="s2_324"
>th column, and each pixel is a list</text>

<text 
x="723" 
y="764" 
dx="0,0,0,0,0,0,6.1,0,0,0,0,0" 
class="s3_324"
>[red, green,</text>

<text 
x="55" 
y="794" 
class="s3_324"
>blue]</text>

<text 
x="113" 
y="794" 
class="s2_324"
>of numbers between 0 and 1 indicating the</text>

<text 
x="493" 
y="794" 
class="s11_324"
>color of that pixel</text>

<text 
x="649" 
y="794" 
class="s2_324"
>:</text>

<text 
x="76" 
y="841" 
class="s4_324"
>top_row</text>

<text 
x="140" 
y="841" 
class="s5_324"
>=</text>

<text 
x="156" 
y="841" 
class="s4_324"
>img</text>

<text 
x="179" 
y="841" 
class="s5_324"
>[</text>

<text 
x="187" 
y="841" 
class="s12_324"
>0</text>

<text 
x="195" 
y="841" 
class="s5_324"
>]</text>

<text 
x="76" 
y="857" 
class="s4_324"
>top_left_pixel</text>

<text 
x="195" 
y="857" 
class="s5_324"
>=</text>

<text 
x="211" 
y="857" 
class="s4_324"
>top_row</text>

<text 
x="266" 
y="857" 
class="s5_324"
>[</text>

<text 
x="274" 
y="857" 
class="s12_324"
>0</text>

<text 
x="282" 
y="857" 
class="s5_324"
>]</text>

<text 
x="76" 
y="872" 
class="s4_324"
>red</text>

<text 
x="100" 
y="872" 
class="s5_324"
>,</text>

<text 
x="116" 
y="872" 
class="s4_324"
>green</text>

<text 
x="156" 
y="872" 
class="s5_324"
>,</text>

<text 
x="171" 
y="872" 
class="s4_324"
>blue</text>

<text 
x="211" 
y="872" 
class="s5_324"
>=</text>

<text 
x="227" 
y="872" 
class="s4_324"
>top_left_pixel</text>

<text 
x="55" 
y="925" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_324"
>In particular, we can get a flattened list of all the pixels as:</text>

<text 
x="76" 
y="970" 
class="s4_324"
>pixels</text>

<text 
x="132" 
y="970" 
dx="0,0,4.6" 
class="s5_324"
>= [</text>

<text 
x="156" 
y="970" 
class="s4_324"
>pixel</text>

<text 
x="203" 
y="970" 
class="s8_324"
>for</text>

<text 
x="235" 
y="970" 
class="s4_324"
>row</text>

<text 
x="266" 
y="970" 
class="s13_324"
>in</text>

<text 
x="290" 
y="970" 
class="s4_324"
>img</text>

<text 
x="322" 
y="970" 
class="s8_324"
>for</text>

<text 
x="353" 
y="970" 
class="s4_324"
>pixel</text>

<text 
x="401" 
y="970" 
class="s13_324"
>in</text>

<text 
x="424" 
y="970" 
class="s4_324"
>row</text>

<text 
x="448" 
y="970" 
class="s5_324"
>]</text>

<text 
x="55" 
y="1023" 
class="s2_324"
>and then feed them to our clusterer:</text>

<text 
x="76" 
y="1068" 
class="s4_324"
>clusterer</text>

<text 
x="156" 
y="1068" 
class="s5_324"
>=</text>

<text 
x="171" 
y="1068" 
class="s4_324"
>KMeans</text>

<text 
x="219" 
y="1068" 
class="s5_324"
>(</text>

<text 
x="227" 
y="1068" 
class="s12_324"
>5</text>

<text 
x="235" 
y="1068" 
class="s5_324"
>)</text>

<text 
x="76" 
y="1083" 
class="s4_324"
>clusterer</text>

<text 
x="148" 
y="1083" 
class="s5_324"
>.</text>

<text 
x="156" 
y="1083" 
class="s4_324"
>train</text>

<text 
x="195" 
y="1083" 
class="s5_324"
>(</text>

<text 
x="203" 
y="1083" 
class="s4_324"
>pixels</text>

<text 
x="250" 
y="1083" 
class="s5_324"
>)</text>

<text 
x="282" 
y="1083" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0,0" 
class="s7_324"
># this might take a while</text>

<text 
x="55" 
y="1136" 
class="s2_324"
>Once it finishes, we just construct a new image with the same format:</text>

<text 
x="76" 
y="1181" 
class="s8_324"
>def</text>

<text 
x="108" 
y="1181" 
class="s14_324"
>recolor</text>

<text 
x="163" 
y="1181" 
class="s5_324"
>(</text>

<text 
x="171" 
y="1181" 
class="s4_324"
>pixel</text>

<text 
x="211" 
y="1181" 
class="s5_324"
>):</text>

<text 
x="108" 
y="1197" 
class="s4_324"
>cluster</text>

<text 
x="171" 
y="1197" 
class="s5_324"
>=</text>

<text 
x="187" 
y="1197" 
class="s4_324"
>clusterer</text>

<text 
x="258" 
y="1197" 
class="s5_324"
>.</text>

<text 
x="266" 
y="1197" 
class="s4_324"
>classify</text>

<text 
x="329" 
y="1197" 
class="s5_324"
>(</text>

<text 
x="337" 
y="1197" 
class="s4_324"
>pixel</text>

<text 
x="377" 
y="1197" 
class="s5_324"
>)</text>

<text 
x="448" 
y="1197" 
dx="0,0,4.6,0,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s7_324"
># index of the closest cluster</text>

<text 
x="108" 
y="1212" 
class="s8_324"
>return</text>

<text 
x="163" 
y="1212" 
class="s4_324"
>clusterer</text>

<text 
x="235" 
y="1212" 
class="s5_324"
>.</text>

<text 
x="242" 
y="1212" 
class="s4_324"
>means</text>

<text 
x="282" 
y="1212" 
class="s5_324"
>[</text>

<text 
x="290" 
y="1212" 
class="s4_324"
>cluster</text>

<text 
x="345" 
y="1212" 
class="s5_324"
>]</text>

<text 
x="448" 
y="1212" 
dx="0,0,4.6,0,0,0,0,4.6,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0" 
class="s7_324"
># mean of the closest cluster</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
