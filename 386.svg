<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 386 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_386{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_386{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_386{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s4_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s7_386{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s9_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s10_386{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s11_386{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="81" 
class="s1_386"
>ORDER BY</text>

<text 
x="55" 
y="122" 
dx="0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_386"
>Frequently, you’ll want to sort your results. For example, you might want to know the</text>

<text 
x="55" 
y="149" 
class="s2_386"
>(alphabetically) first two names of your users:</text>

<text 
x="76" 
y="194" 
class="s3_386"
>SELECT</text>

<text 
x="132" 
y="194" 
class="s4_386"
>*</text>

<text 
x="148" 
y="194" 
class="s3_386"
>FROM</text>

<text 
x="187" 
y="194" 
class="s5_386"
>users</text>

<text 
x="76" 
y="210" 
dx="0,0,0,0,0,0,4.6,0" 
class="s3_386"
>ORDER BY</text>

<text 
x="148" 
y="210" 
class="s5_386"
>name</text>

<text 
x="76" 
y="225" 
class="s3_386"
>LIMIT</text>

<text 
x="124" 
y="225" 
class="s6_386"
>2</text>

<text 
x="132" 
y="225" 
class="s4_386"
>;</text>

<text 
x="55" 
y="278" 
class="s2_386"
>This is easy to implement by giving our</text>

<text 
x="410" 
y="278" 
class="s7_386"
>Table</text>

<text 
x="468" 
y="278" 
class="s2_386"
>an</text>

<text 
x="494" 
y="278" 
class="s7_386"
>order_by()</text>

<text 
x="605" 
y="278" 
class="s2_386"
>method that takes an</text>

<text 
x="792" 
y="278" 
class="s7_386"
>order</text>

<text 
x="55" 
y="308" 
class="s2_386"
>function:</text>

<text 
x="108" 
y="353" 
class="s3_386"
>def</text>

<text 
x="140" 
y="353" 
class="s8_386"
>order_by</text>

<text 
x="203" 
y="353" 
class="s4_386"
>(</text>

<text 
x="211" 
y="353" 
class="s9_386"
>self</text>

<text 
x="242" 
y="353" 
class="s4_386"
>,</text>

<text 
x="258" 
y="353" 
class="s5_386"
>order</text>

<text 
x="298" 
y="353" 
class="s4_386"
>):</text>

<text 
x="140" 
y="368" 
class="s5_386"
>new_table</text>

<text 
x="219" 
y="368" 
class="s4_386"
>=</text>

<text 
x="235" 
y="368" 
class="s9_386"
>self</text>

<text 
x="266" 
y="368" 
class="s4_386"
>.</text>

<text 
x="274" 
y="368" 
class="s5_386"
>select</text>

<text 
x="322" 
y="368" 
class="s4_386"
>()</text>

<text 
x="393" 
y="368" 
dx="0,0,4.6,0,0,0,0,4.6,0,4.6,0,0,0" 
class="s10_386"
># make a copy</text>

<text 
x="140" 
y="383" 
class="s5_386"
>new_table</text>

<text 
x="211" 
y="383" 
class="s4_386"
>.</text>

<text 
x="219" 
y="383" 
class="s5_386"
>rows</text>

<text 
x="250" 
y="383" 
class="s4_386"
>.</text>

<text 
x="258" 
y="383" 
class="s5_386"
>sort</text>

<text 
x="290" 
y="383" 
class="s4_386"
>(</text>

<text 
x="298" 
y="383" 
class="s5_386"
>key</text>

<text 
x="322" 
y="383" 
class="s4_386"
>=</text>

<text 
x="329" 
y="383" 
class="s5_386"
>order</text>

<text 
x="369" 
y="383" 
class="s4_386"
>)</text>

<text 
x="140" 
y="399" 
class="s3_386"
>return</text>

<text 
x="195" 
y="399" 
class="s5_386"
>new_table</text>

<text 
x="55" 
y="452" 
class="s2_386"
>which we can then use as follows:</text>

<text 
x="76" 
y="497" 
class="s5_386"
>friendliest_letters</text>

<text 
x="235" 
y="497" 
class="s4_386"
>=</text>

<text 
x="250" 
y="497" 
class="s5_386"
>avg_friends_by_letter</text>

<text 
x="424" 
y="497" 
class="s4_386"
>\</text>

<text 
x="108" 
y="512" 
class="s4_386"
>.</text>

<text 
x="116" 
y="512" 
class="s5_386"
>order_by</text>

<text 
x="179" 
y="512" 
class="s4_386"
>(</text>

<text 
x="187" 
y="512" 
class="s3_386"
>lambda</text>

<text 
x="242" 
y="512" 
class="s5_386"
>row</text>

<text 
x="266" 
y="512" 
dx="0,0,4.6" 
class="s4_386"
>: -</text>

<text 
x="290" 
y="512" 
class="s5_386"
>row</text>

<text 
x="314" 
y="512" 
class="s4_386"
>[</text>

<text 
x="322" 
y="512" 
class="s11_386"
>"avg_num_friends"</text>

<text 
x="456" 
y="512" 
dx="0,0,0,4.6" 
class="s4_386"
>]) \</text>

<text 
x="108" 
y="528" 
class="s4_386"
>.</text>

<text 
x="116" 
y="528" 
class="s5_386"
>limit</text>

<text 
x="156" 
y="528" 
class="s4_386"
>(</text>

<text 
x="163" 
y="528" 
class="s6_386"
>4</text>

<text 
x="171" 
y="528" 
class="s4_386"
>)</text>

<text 
x="55" 
y="580" 
class="s2_386"
>The SQL</text>

<text 
x="140" 
y="580" 
dx="0,0,0,0,0,0,6.1,0" 
class="s7_386"
>ORDER BY</text>

<text 
x="230" 
y="580" 
class="s2_386"
>lets you specify</text>

<text 
x="374" 
y="580" 
class="s7_386"
>ASC</text>

<text 
x="411" 
y="580" 
class="s2_386"
>(ascending) or</text>

<text 
x="543" 
y="580" 
class="s7_386"
>DESC</text>

<text 
x="590" 
y="580" 
class="s2_386"
>(descending) for each sort</text>

<text 
x="55" 
y="610" 
class="s2_386"
>field; here we’d have to bake that into our</text>

<text 
x="429" 
y="610" 
class="s7_386"
>order</text>

<text 
x="487" 
y="610" 
class="s2_386"
>function.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
