<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 178 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_178{
fill: #BEBEBE;
}

.s1_178{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s2_178{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s3_178{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_178{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s5_178{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s6_178{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_178{
font-size: 13.20px;
font-family: LiberationMono-Italic_10;
fill: #0099FF;
}
.s8_178{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s9_178{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_178{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s11_178{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s12_178{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s13_178{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,721.8l722.5,0c3,0,5.5,2.4,5.5,5.5l0,79.2c0,3,-2.5,5.5,-5.5,5.5L93.5,812c-3,0,-5.5,-2.5,-5.5,-5.5l0,-79.2c0,-3.1,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,1.9,4.4,4.4l0,79.2c0,2.4,-2,4.4,-4.4,4.4l-722.5,0c-2.4,0,-4.4,-2,-4.4,-4.4l0,-79.2c0,-2.5,2,-4.4,4.4,-4.4Z" class="g1_178" />
<text 
x="140" 
y="65" 
class="s1_178"
>print</text>

<text 
x="187" 
y="65" 
class="s2_178"
>status_code</text>

<text 
x="274" 
y="65" 
class="s3_178"
>,</text>

<text 
x="290" 
y="65" 
class="s2_178"
>data</text>

<text 
x="140" 
y="81" 
class="s4_178"
>self</text>

<text 
x="171" 
y="81" 
class="s3_178"
>.</text>

<text 
x="179" 
y="81" 
class="s2_178"
>disconnect</text>

<text 
x="258" 
y="81" 
class="s3_178"
>()</text>

<text 
x="55" 
y="133" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s5_178"
>MyStreamer will connect to the Twitter stream and wait for Twitter to feed it data. Each</text>

<text 
x="55" 
y="160" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s5_178"
>time it receives some data (here, a Tweet represented as a Python object) it passes it to the</text>

<text 
x="55" 
y="188" 
class="s6_178"
>on_success</text>

<text 
x="165" 
y="188" 
class="s5_178"
>method, which appends it to our</text>

<text 
x="454" 
y="188" 
class="s6_178"
>tweets</text>

<text 
x="523" 
y="188" 
class="s5_178"
>list if its language is English, and</text>

<text 
x="55" 
y="217" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s5_178"
>then disconnects the streamer after it’s collected 1,000 tweets.</text>

<text 
x="55" 
y="256" 
dx="0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s5_178"
>All that’s left is to initialize it and start it running:</text>

<text 
x="76" 
y="301" 
class="s2_178"
>stream</text>

<text 
x="132" 
y="301" 
class="s3_178"
>=</text>

<text 
x="148" 
y="301" 
class="s2_178"
>MyStreamer</text>

<text 
x="227" 
y="301" 
class="s3_178"
>(</text>

<text 
x="235" 
y="301" 
class="s2_178"
>CONSUMER_KEY</text>

<text 
x="329" 
y="301" 
class="s3_178"
>,</text>

<text 
x="345" 
y="301" 
class="s2_178"
>CONSUMER_SECRET</text>

<text 
x="464" 
y="301" 
class="s3_178"
>,</text>

<text 
x="235" 
y="316" 
class="s2_178"
>ACCESS_TOKEN</text>

<text 
x="329" 
y="316" 
class="s3_178"
>,</text>

<text 
x="345" 
y="316" 
class="s2_178"
>ACCESS_TOKEN_SECRET</text>

<text 
x="495" 
y="316" 
class="s3_178"
>)</text>

<text 
x="76" 
y="347" 
dx="0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,4.6,0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s7_178"
># starts consuming public statuses that contain the keyword 'data'</text>

<text 
x="76" 
y="363" 
class="s2_178"
>stream</text>

<text 
x="124" 
y="363" 
class="s3_178"
>.</text>

<text 
x="132" 
y="363" 
class="s2_178"
>statuses</text>

<text 
x="195" 
y="363" 
class="s3_178"
>.</text>

<text 
x="203" 
y="363" 
class="s2_178"
>filter</text>

<text 
x="250" 
y="363" 
class="s3_178"
>(</text>

<text 
x="258" 
y="363" 
class="s2_178"
>track</text>

<text 
x="298" 
y="363" 
class="s3_178"
>=</text>

<text 
x="306" 
y="363" 
class="s8_178"
>'data'</text>

<text 
x="353" 
y="363" 
class="s3_178"
>)</text>

<text 
x="76" 
y="393" 
dx="0,0,4.6,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,0,0,0,4.6,0,4.6,0,0,0,0,0,0,4.6,0,0,4.6,0,0,0,0,0,4.6,0,0,0,0,0,0,4.6,0,0,0,0,0,0,0" 
class="s7_178"
># if instead we wanted to start consuming a sample of *all* public statuses</text>

<text 
x="76" 
y="409" 
dx="0,0,4.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s7_178"
># stream.statuses.sample()</text>

<text 
x="55" 
y="462" 
class="s5_178"
>This will run until it collects 1,000 tweets (or until it encounters an error) and stop, at</text>

<text 
x="55" 
y="489" 
class="s5_178"
>which point you can start analyzing those tweets. For instance, you could find the most</text>

<text 
x="55" 
y="517" 
class="s5_178"
>common hashtags with:</text>

<text 
x="76" 
y="562" 
class="s2_178"
>top_hashtags</text>

<text 
x="179" 
y="562" 
class="s3_178"
>=</text>

<text 
x="195" 
y="562" 
class="s2_178"
>Counter</text>

<text 
x="250" 
y="562" 
class="s3_178"
>(</text>

<text 
x="258" 
y="562" 
class="s2_178"
>hashtag</text>

<text 
x="314" 
y="562" 
class="s3_178"
>[</text>

<text 
x="322" 
y="562" 
class="s8_178"
>'text'</text>

<text 
x="369" 
y="562" 
class="s3_178"
>].</text>

<text 
x="385" 
y="562" 
class="s2_178"
>lower</text>

<text 
x="424" 
y="562" 
class="s3_178"
>()</text>

<text 
x="258" 
y="577" 
class="s1_178"
>for</text>

<text 
x="290" 
y="577" 
class="s2_178"
>tweet</text>

<text 
x="337" 
y="577" 
class="s9_178"
>in</text>

<text 
x="361" 
y="577" 
class="s2_178"
>tweets</text>

<text 
x="258" 
y="593" 
class="s1_178"
>for</text>

<text 
x="290" 
y="593" 
class="s2_178"
>hashtag</text>

<text 
x="353" 
y="593" 
class="s9_178"
>in</text>

<text 
x="377" 
y="593" 
class="s2_178"
>tweet</text>

<text 
x="416" 
y="593" 
class="s3_178"
>[</text>

<text 
x="424" 
y="593" 
class="s8_178"
>"entities"</text>

<text 
x="503" 
y="593" 
class="s3_178"
>][</text>

<text 
x="519" 
y="593" 
class="s8_178"
>"hashtags"</text>

<text 
x="598" 
y="593" 
class="s3_178"
>])</text>

<text 
x="76" 
y="623" 
class="s1_178"
>print</text>

<text 
x="124" 
y="623" 
class="s2_178"
>top_hashtags</text>

<text 
x="219" 
y="623" 
class="s3_178"
>.</text>

<text 
x="227" 
y="623" 
class="s2_178"
>most_common</text>

<text 
x="314" 
y="623" 
class="s3_178"
>(</text>

<text 
x="322" 
y="623" 
class="s10_178"
>5</text>

<text 
x="329" 
y="623" 
class="s3_178"
>)</text>

<text 
x="55" 
y="676" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s5_178"
>Each tweet contains a lot of data. You can either poke around yourself or dig through the</text>

<text 
x="55" 
y="704" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s11_178"
>Twitter API documentation</text>

<text 
x="295" 
y="704" 
class="s5_178"
>.</text>

<text 
x="421" 
y="747" 
dx="0,1.1,1.1,1.1" 
class="s12_178"
>NOTE</text>

<text 
x="97" 
y="776" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s13_178"
>In a non-toy project you probably wouldn’t want to rely on an in-memory</text>

<text 
x="587" 
y="776" 
class="s3_178"
>list</text>

<text 
x="623" 
y="776" 
class="s13_178"
>for storing the tweets.</text>

<text 
x="97" 
y="798" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1" 
class="s13_178"
>Instead you’d want to save them to a file or a database, so that you’d have them permanently.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Italic_10;
	src: url("fonts/LiberationMono-Italic_10.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

]]></style>

</svg>
