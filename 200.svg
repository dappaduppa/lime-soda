<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 200 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_200{
font-size: 16.50px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s2_200{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_200{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s4_200{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s5_200{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s6_200{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}
.s7_200{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s8_200{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s9_200{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s10_200{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_200{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<image preserveAspectRatio="none" x="91" y="54" width="727" height="572" xlink:href="200/img/1.png" />
<text 
x="258" 
y="652" 
dx="0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s1_200"
>Figure 10-8. Data after removing first principal component</text>

<text 
x="55" 
y="694" 
class="s2_200"
>At that point, we can find the next principal component by repeating the process on the</text>

<text 
x="55" 
y="721" 
class="s2_200"
>result of</text>

<text 
x="133" 
y="721" 
class="s3_200"
>remove_projection</text>

<text 
x="317" 
y="721" 
class="s2_200"
>(</text>

<text 
x="325" 
y="721" 
class="s4_200"
>Figure 10-9</text>

<text 
x="428" 
y="721" 
class="s2_200"
>).</text>

<text 
x="55" 
y="762" 
dx="0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_200"
>On a higher-dimensional data set, we can iteratively find as many components as we want:</text>

<text 
x="76" 
y="807" 
class="s5_200"
>def</text>

<text 
x="108" 
y="807" 
class="s6_200"
>principal_component_analysis</text>

<text 
x="329" 
y="807" 
class="s7_200"
>(</text>

<text 
x="337" 
y="807" 
class="s8_200"
>X</text>

<text 
x="345" 
y="807" 
class="s7_200"
>,</text>

<text 
x="361" 
y="807" 
class="s8_200"
>num_components</text>

<text 
x="472" 
y="807" 
class="s7_200"
>):</text>

<text 
x="108" 
y="822" 
class="s8_200"
>components</text>

<text 
x="195" 
y="822" 
dx="0,0,4.6,0" 
class="s7_200"
>= []</text>

<text 
x="108" 
y="838" 
class="s5_200"
>for</text>

<text 
x="140" 
y="838" 
class="s8_200"
>_</text>

<text 
x="156" 
y="838" 
class="s9_200"
>in</text>

<text 
x="179" 
y="838" 
class="s10_200"
>range</text>

<text 
x="219" 
y="838" 
class="s7_200"
>(</text>

<text 
x="227" 
y="838" 
class="s8_200"
>num_components</text>

<text 
x="337" 
y="838" 
class="s7_200"
>):</text>

<text 
x="140" 
y="853" 
class="s8_200"
>component</text>

<text 
x="219" 
y="853" 
class="s7_200"
>=</text>

<text 
x="235" 
y="853" 
class="s8_200"
>first_principal_component</text>

<text 
x="432" 
y="853" 
class="s7_200"
>(</text>

<text 
x="440" 
y="853" 
class="s8_200"
>X</text>

<text 
x="448" 
y="853" 
class="s7_200"
>)</text>

<text 
x="140" 
y="869" 
class="s8_200"
>components</text>

<text 
x="219" 
y="869" 
class="s7_200"
>.</text>

<text 
x="227" 
y="869" 
class="s8_200"
>append</text>

<text 
x="274" 
y="869" 
class="s7_200"
>(</text>

<text 
x="282" 
y="869" 
class="s8_200"
>component</text>

<text 
x="353" 
y="869" 
class="s7_200"
>)</text>

<text 
x="140" 
y="884" 
class="s8_200"
>X</text>

<text 
x="156" 
y="884" 
class="s7_200"
>=</text>

<text 
x="171" 
y="884" 
class="s8_200"
>remove_projection</text>

<text 
x="306" 
y="884" 
class="s7_200"
>(</text>

<text 
x="314" 
y="884" 
class="s8_200"
>X</text>

<text 
x="322" 
y="884" 
class="s7_200"
>,</text>

<text 
x="337" 
y="884" 
class="s8_200"
>component</text>

<text 
x="408" 
y="884" 
class="s7_200"
>)</text>

<text 
x="108" 
y="915" 
class="s5_200"
>return</text>

<text 
x="163" 
y="915" 
class="s8_200"
>components</text>

<text 
x="55" 
y="968" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0" 
class="s2_200"
>We can then</text>

<text 
x="168" 
y="968" 
class="s11_200"
>transform</text>

<text 
x="260" 
y="968" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_200"
>our data into the lower-dimensional space spanned by the</text>

<text 
x="55" 
y="995" 
class="s2_200"
>components:</text>

<text 
x="76" 
y="1040" 
class="s5_200"
>def</text>

<text 
x="108" 
y="1040" 
class="s6_200"
>transform_vector</text>

<text 
x="235" 
y="1040" 
class="s7_200"
>(</text>

<text 
x="242" 
y="1040" 
class="s8_200"
>v</text>

<text 
x="250" 
y="1040" 
class="s7_200"
>,</text>

<text 
x="266" 
y="1040" 
class="s8_200"
>components</text>

<text 
x="345" 
y="1040" 
class="s7_200"
>):</text>

<text 
x="108" 
y="1056" 
class="s5_200"
>return</text>

<text 
x="163" 
y="1056" 
class="s7_200"
>[</text>

<text 
x="171" 
y="1056" 
class="s8_200"
>dot</text>

<text 
x="195" 
y="1056" 
class="s7_200"
>(</text>

<text 
x="203" 
y="1056" 
class="s8_200"
>v</text>

<text 
x="211" 
y="1056" 
class="s7_200"
>,</text>

<text 
x="227" 
y="1056" 
class="s8_200"
>w</text>

<text 
x="235" 
y="1056" 
class="s7_200"
>)</text>

<text 
x="250" 
y="1056" 
class="s5_200"
>for</text>

<text 
x="282" 
y="1056" 
class="s8_200"
>w</text>

<text 
x="298" 
y="1056" 
class="s9_200"
>in</text>

<text 
x="322" 
y="1056" 
class="s8_200"
>components</text>

<text 
x="401" 
y="1056" 
class="s7_200"
>]</text>

<text 
x="76" 
y="1087" 
class="s5_200"
>def</text>

<text 
x="108" 
y="1087" 
class="s6_200"
>transform</text>

<text 
x="179" 
y="1087" 
class="s7_200"
>(</text>

<text 
x="187" 
y="1087" 
class="s8_200"
>X</text>

<text 
x="195" 
y="1087" 
class="s7_200"
>,</text>

<text 
x="211" 
y="1087" 
class="s8_200"
>components</text>

<text 
x="290" 
y="1087" 
class="s7_200"
>):</text>

<text 
x="108" 
y="1102" 
class="s5_200"
>return</text>

<text 
x="163" 
y="1102" 
class="s7_200"
>[</text>

<text 
x="171" 
y="1102" 
class="s8_200"
>transform_vector</text>

<text 
x="298" 
y="1102" 
class="s7_200"
>(</text>

<text 
x="306" 
y="1102" 
class="s8_200"
>x_i</text>

<text 
x="329" 
y="1102" 
class="s7_200"
>,</text>

<text 
x="345" 
y="1102" 
class="s8_200"
>components</text>

<text 
x="424" 
y="1102" 
class="s7_200"
>)</text>

<text 
x="440" 
y="1102" 
class="s5_200"
>for</text>

<text 
x="472" 
y="1102" 
class="s8_200"
>x_i</text>

<text 
x="503" 
y="1102" 
class="s9_200"
>in</text>

<text 
x="527" 
y="1102" 
class="s8_200"
>X</text>

<text 
x="535" 
y="1102" 
class="s7_200"
>]</text>

<text 
x="55" 
y="1155" 
class="s2_200"
>This technique is valuable for a couple of reasons. First, it can help us clean our data by</text>

<text 
x="55" 
y="1182" 
class="s2_200"
>eliminating noise dimensions and consolidating dimensions that are highly correlated.</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
