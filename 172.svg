<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 172 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[


.s1_172{
font-size: 25.31px;
font-family: LiberationSerif-Bold_b;
fill: #000000;
}
.s2_172{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_172{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #8E0012;
}
.s4_172{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s5_172{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00CCFF;
}
.s6_172{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_172{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s8_172{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s9_172{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s10_172{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #000000;
}
.s11_172{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s12_172{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<text 
x="55" 
y="77" 
class="s1_172"
>Using an Unauthenticated API</text>

<text 
x="55" 
y="115" 
class="s2_172"
>Most APIs these days require you to first authenticate yourself in order to use them. While</text>

<text 
x="55" 
y="143" 
dx="0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>we don’t begrudge them this policy, it creates a lot of extra boilerplate that muddies up our</text>

<text 
x="55" 
y="170" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>exposition. Accordingly, we’ll first take a look at</text>

<text 
x="491" 
y="170" 
dx="0,0,0,0,0,0,0,-1.2,0,0,0,0" 
class="s3_172"
>GitHub’s API</text>

<text 
x="613" 
y="170" 
class="s2_172"
>, with which you can do</text>

<text 
x="55" 
y="198" 
class="s2_172"
>some simple things unauthenticated:</text>

<text 
x="76" 
y="243" 
class="s4_172"
>import</text>

<text 
x="132" 
y="243" 
class="s5_172"
>requests</text>

<text 
x="195" 
y="243" 
class="s6_172"
>,</text>

<text 
x="211" 
y="243" 
class="s5_172"
>json</text>

<text 
x="76" 
y="258" 
class="s7_172"
>endpoint</text>

<text 
x="148" 
y="258" 
class="s6_172"
>=</text>

<text 
x="163" 
y="258" 
class="s8_172"
>"https://api.github.com/users/joelgrus/repos"</text>

<text 
x="76" 
y="289" 
class="s7_172"
>repos</text>

<text 
x="124" 
y="289" 
class="s6_172"
>=</text>

<text 
x="140" 
y="289" 
class="s7_172"
>json</text>

<text 
x="171" 
y="289" 
class="s6_172"
>.</text>

<text 
x="179" 
y="289" 
class="s7_172"
>loads</text>

<text 
x="219" 
y="289" 
class="s6_172"
>(</text>

<text 
x="227" 
y="289" 
class="s7_172"
>requests</text>

<text 
x="290" 
y="289" 
class="s6_172"
>.</text>

<text 
x="298" 
y="289" 
class="s7_172"
>get</text>

<text 
x="322" 
y="289" 
class="s6_172"
>(</text>

<text 
x="329" 
y="289" 
class="s7_172"
>endpoint</text>

<text 
x="393" 
y="289" 
class="s6_172"
>).</text>

<text 
x="408" 
y="289" 
class="s7_172"
>text</text>

<text 
x="440" 
y="289" 
class="s6_172"
>)</text>

<text 
x="55" 
y="342" 
class="s2_172"
>At this point</text>

<text 
x="170" 
y="342" 
class="s9_172"
>repos</text>

<text 
x="228" 
y="342" 
class="s2_172"
>is a</text>

<text 
x="264" 
y="342" 
class="s9_172"
>list</text>

<text 
x="311" 
y="342" 
class="s2_172"
>of Python</text>

<text 
x="403" 
y="342" 
class="s9_172"
>dict</text>

<text 
x="445" 
y="342" 
class="s2_172"
>s, each representing a public repository in my</text>

<text 
x="55" 
y="371" 
class="s2_172"
>GitHub account. (Feel free to substitute your username and get your GitHub repository</text>

<text 
x="55" 
y="399" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>data instead. You do have a GitHub account, right?)</text>

<text 
x="55" 
y="437" 
dx="0,-1.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>We can use this to figure out which months and days of the week I’m most likely to create</text>

<text 
x="55" 
y="465" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>a repository. The only issue is that the dates in the response are (Unicode) strings:</text>

<text 
x="76" 
y="510" 
class="s8_172"
>u'created_at'</text>

<text 
x="179" 
y="510" 
class="s6_172"
>:</text>

<text 
x="195" 
y="510" 
class="s8_172"
>u'2013-07-05T02:02:28Z'</text>

<text 
x="55" 
y="563" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>Python doesn’t come with a great date parser, so we’ll need to install one:</text>

<text 
x="76" 
y="608" 
dx="0,0,0,0,4.6,0,0,0,0,0,0,0,4.6,0,0,0,0,0" 
class="s7_172"
>pip install python</text>

<text 
x="219" 
y="608" 
class="s6_172"
>-</text>

<text 
x="227" 
y="608" 
class="s7_172"
>dateutil</text>

<text 
x="55" 
y="661" 
class="s2_172"
>from which you’ll probably only ever need the</text>

<text 
x="471" 
y="661" 
class="s9_172"
>dateutil.parser.parse</text>

<text 
x="698" 
y="661" 
class="s2_172"
>function:</text>

<text 
x="76" 
y="708" 
class="s4_172"
>from</text>

<text 
x="116" 
y="708" 
class="s5_172"
>dateutil.parser</text>

<text 
x="242" 
y="708" 
class="s4_172"
>import</text>

<text 
x="298" 
y="708" 
class="s7_172"
>parse</text>

<text 
x="76" 
y="739" 
class="s7_172"
>dates</text>

<text 
x="124" 
y="739" 
dx="0,0,4.6" 
class="s6_172"
>= [</text>

<text 
x="148" 
y="739" 
class="s7_172"
>parse</text>

<text 
x="187" 
y="739" 
class="s6_172"
>(</text>

<text 
x="195" 
y="739" 
class="s7_172"
>repo</text>

<text 
x="227" 
y="739" 
class="s6_172"
>[</text>

<text 
x="235" 
y="739" 
class="s8_172"
>"created_at"</text>

<text 
x="329" 
y="739" 
class="s6_172"
>])</text>

<text 
x="353" 
y="739" 
class="s4_172"
>for</text>

<text 
x="385" 
y="739" 
class="s7_172"
>repo</text>

<text 
x="424" 
y="739" 
class="s10_172"
>in</text>

<text 
x="448" 
y="739" 
class="s7_172"
>repos</text>

<text 
x="487" 
y="739" 
class="s6_172"
>]</text>

<text 
x="76" 
y="754" 
class="s7_172"
>month_counts</text>

<text 
x="179" 
y="754" 
class="s6_172"
>=</text>

<text 
x="195" 
y="754" 
class="s7_172"
>Counter</text>

<text 
x="250" 
y="754" 
class="s6_172"
>(</text>

<text 
x="258" 
y="754" 
class="s7_172"
>date</text>

<text 
x="290" 
y="754" 
class="s6_172"
>.</text>

<text 
x="298" 
y="754" 
class="s7_172"
>month</text>

<text 
x="345" 
y="754" 
class="s4_172"
>for</text>

<text 
x="377" 
y="754" 
class="s7_172"
>date</text>

<text 
x="416" 
y="754" 
class="s10_172"
>in</text>

<text 
x="440" 
y="754" 
class="s7_172"
>dates</text>

<text 
x="480" 
y="754" 
class="s6_172"
>)</text>

<text 
x="76" 
y="770" 
class="s7_172"
>weekday_counts</text>

<text 
x="195" 
y="770" 
class="s6_172"
>=</text>

<text 
x="211" 
y="770" 
class="s7_172"
>Counter</text>

<text 
x="266" 
y="770" 
class="s6_172"
>(</text>

<text 
x="274" 
y="770" 
class="s7_172"
>date</text>

<text 
x="306" 
y="770" 
class="s6_172"
>.</text>

<text 
x="314" 
y="770" 
class="s7_172"
>weekday</text>

<text 
x="369" 
y="770" 
class="s6_172"
>()</text>

<text 
x="393" 
y="770" 
class="s4_172"
>for</text>

<text 
x="424" 
y="770" 
class="s7_172"
>date</text>

<text 
x="464" 
y="770" 
class="s10_172"
>in</text>

<text 
x="487" 
y="770" 
class="s7_172"
>dates</text>

<text 
x="527" 
y="770" 
class="s6_172"
>)</text>

<text 
x="55" 
y="822" 
dx="0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>Similarly, you can get the languages of my last five repositories:</text>

<text 
x="76" 
y="868" 
class="s7_172"
>last_5_repositories</text>

<text 
x="235" 
y="868" 
class="s6_172"
>=</text>

<text 
x="250" 
y="868" 
class="s11_172"
>sorted</text>

<text 
x="298" 
y="868" 
class="s6_172"
>(</text>

<text 
x="306" 
y="868" 
class="s7_172"
>repos</text>

<text 
x="345" 
y="868" 
class="s6_172"
>,</text>

<text 
x="306" 
y="883" 
class="s7_172"
>key</text>

<text 
x="329" 
y="883" 
class="s6_172"
>=</text>

<text 
x="337" 
y="883" 
class="s4_172"
>lambda</text>

<text 
x="393" 
y="883" 
class="s7_172"
>r</text>

<text 
x="401" 
y="883" 
class="s6_172"
>:</text>

<text 
x="416" 
y="883" 
class="s7_172"
>r</text>

<text 
x="424" 
y="883" 
class="s6_172"
>[</text>

<text 
x="432" 
y="883" 
class="s8_172"
>"created_at"</text>

<text 
x="527" 
y="883" 
class="s6_172"
>],</text>

<text 
x="306" 
y="898" 
class="s7_172"
>reverse</text>

<text 
x="361" 
y="898" 
class="s6_172"
>=</text>

<text 
x="369" 
y="898" 
class="s11_172"
>True</text>

<text 
x="401" 
y="898" 
class="s6_172"
>)[:</text>

<text 
x="424" 
y="898" 
class="s12_172"
>5</text>

<text 
x="432" 
y="898" 
class="s6_172"
>]</text>

<text 
x="76" 
y="929" 
class="s7_172"
>last_5_languages</text>

<text 
x="211" 
y="929" 
dx="0,0,4.6" 
class="s6_172"
>= [</text>

<text 
x="235" 
y="929" 
class="s7_172"
>repo</text>

<text 
x="266" 
y="929" 
class="s6_172"
>[</text>

<text 
x="274" 
y="929" 
class="s8_172"
>"language"</text>

<text 
x="353" 
y="929" 
class="s6_172"
>]</text>

<text 
x="235" 
y="945" 
class="s4_172"
>for</text>

<text 
x="266" 
y="945" 
class="s7_172"
>repo</text>

<text 
x="306" 
y="945" 
class="s10_172"
>in</text>

<text 
x="329" 
y="945" 
class="s7_172"
>last_5_repositories</text>

<text 
x="480" 
y="945" 
class="s6_172"
>]</text>

<text 
x="55" 
y="997" 
dx="0,-1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_172"
>Typically we won’t be working with APIs at this low “make the requests and parse the</text>

<text 
x="55" 
y="1025" 
class="s2_172"
>responses ourselves” level. One of the benefits of using Python is that someone has</text>

<text 
x="55" 
y="1052" 
class="s2_172"
>already built a library for pretty much any API you’re interested in accessing. When</text>

<text 
x="55" 
y="1080" 
class="s2_172"
>they’re done well, these libraries can save you a lot of the trouble of figuring out the</text>

<text 
x="55" 
y="1107" 
class="s2_172"
>hairier details of API access. (When they’re not done well, or when it turns out they’re</text>

<text 
x="55" 
y="1135" 
class="s2_172"
>based on defunct versions of the corresponding APIs, they can cause you enormous</text>

<text 
x="55" 
y="1162" 
class="s2_172"
>headaches.)</text>

<text 
x="55" 
y="1201" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0,0,0,0,0,0,0,0,0,0,0,-1.4" 
class="s2_172"
>Nonetheless, you’ll occasionally have to roll your own API-access library (or, more likely,</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
