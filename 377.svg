<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">


<!-- Page 377 -->
<svg x="0" y="0" width="909" height="1286" viewBox="0 0 909 1286" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: block;margin-left: auto;margin-right: auto;">
<defs>

<style type="text/css"><![CDATA[

.g1_377{
fill: #BEBEBE;
}

.s1_377{
font-size: 30.81px;
font-family: LiberationSerif-Bold_b;
fill: #8E0012;
}
.s2_377{
font-size: 22.01px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s3_377{
font-size: 22.01px;
font-family: LiberationSerif-Italic_l;
fill: #000000;
}
.s4_377{
font-size: 17.60px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s5_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000088;
}
.s6_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #000000;
}
.s7_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #FF6600;
}
.s8_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC3300;
}
.s9_377{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #006699;
}
.s10_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #336666;
}
.s11_377{
font-size: 22.01px;
font-family: LiberationSerif-Bold_b;
fill: #737373;
}
.s12_377{
font-size: 16.50px;
font-family: LiberationSerif_e;
fill: #000000;
}
.s13_377{
font-size: 13.20px;
font-family: LiberationMono-Bold_1w;
fill: #00AA88;
}
.s14_377{
font-size: 13.20px;
font-family: LiberationMono_1q;
fill: #CC00FF;
}

]]></style>

</defs>
<path d="M0,0
L0,1286
L909,1286
L909,0 Z " 
fill="#FFFFFF" stroke="none" />
<path fill-rule="evenodd" d="M93.5,670.1l722.5,0c3,0,5.5,2.4,5.5,5.5l0,77c0,3,-2.5,5.5,-5.5,5.5l-722.5,0c-3,0,-5.5,-2.5,-5.5,-5.5l0,-77c0,-3.1,2.5,-5.5,5.5,-5.5m0,1.1l722.5,0c2.4,0,4.4,1.9,4.4,4.4l0,77c0,2.4,-2,4.4,-4.4,4.4L93.5,757c-2.4,0,-4.4,-2,-4.4,-4.4l0,-77c0,-2.5,2,-4.4,4.4,-4.4Z" class="g1_377" />
<text 
x="55" 
y="81" 
dx="0,0,0,0,-2.3,0,0,0,-2.3,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1" 
class="s1_377"
>CREATE TABLE and INSERT</text>

<text 
x="55" 
y="122" 
dx="0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0" 
class="s2_377"
>A relational database is a collection of tables (and of relationships among them). A table is</text>

<text 
x="55" 
y="149" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9,0,0" 
class="s2_377"
>simply a collection of rows, not unlike the matrices we’ve been working with. However, a</text>

<text 
x="55" 
y="177" 
class="s2_377"
>table also has associated with it a fixed</text>

<text 
x="402" 
y="177" 
class="s3_377"
>schema</text>

<text 
x="474" 
y="177" 
class="s2_377"
>consisting of column names and column</text>

<text 
x="55" 
y="204" 
class="s2_377"
>types.</text>

<text 
x="55" 
y="243" 
class="s2_377"
>For example, imagine a</text>

<text 
x="268" 
y="243" 
class="s4_377"
>users</text>

<text 
x="326" 
y="243" 
class="s2_377"
>data set containing for each user her</text>

<text 
x="649" 
y="243" 
class="s4_377"
>user_id</text>

<text 
x="723" 
y="243" 
class="s2_377"
>,</text>

<text 
x="734" 
y="243" 
class="s4_377"
>name</text>

<text 
x="776" 
y="243" 
class="s2_377"
>, and</text>

<text 
x="55" 
y="272" 
class="s4_377"
>num_friends</text>

<text 
x="171" 
y="272" 
class="s2_377"
>:</text>

<text 
x="76" 
y="320" 
class="s5_377"
>users</text>

<text 
x="124" 
y="320" 
dx="0,0,4.6,0" 
class="s6_377"
>= [[</text>

<text 
x="156" 
y="320" 
class="s7_377"
>0</text>

<text 
x="163" 
y="320" 
class="s6_377"
>,</text>

<text 
x="179" 
y="320" 
class="s8_377"
>"Hero"</text>

<text 
x="227" 
y="320" 
class="s6_377"
>,</text>

<text 
x="242" 
y="320" 
class="s7_377"
>0</text>

<text 
x="250" 
y="320" 
class="s6_377"
>],</text>

<text 
x="148" 
y="335" 
class="s6_377"
>[</text>

<text 
x="156" 
y="335" 
class="s7_377"
>1</text>

<text 
x="163" 
y="335" 
class="s6_377"
>,</text>

<text 
x="179" 
y="335" 
class="s8_377"
>"Dunn"</text>

<text 
x="227" 
y="335" 
class="s6_377"
>,</text>

<text 
x="242" 
y="335" 
class="s7_377"
>2</text>

<text 
x="250" 
y="335" 
class="s6_377"
>],</text>

<text 
x="148" 
y="350" 
class="s6_377"
>[</text>

<text 
x="156" 
y="350" 
class="s7_377"
>2</text>

<text 
x="163" 
y="350" 
class="s6_377"
>,</text>

<text 
x="179" 
y="350" 
class="s8_377"
>"Sue"</text>

<text 
x="219" 
y="350" 
class="s6_377"
>,</text>

<text 
x="235" 
y="350" 
class="s7_377"
>3</text>

<text 
x="242" 
y="350" 
class="s6_377"
>],</text>

<text 
x="148" 
y="366" 
class="s6_377"
>[</text>

<text 
x="156" 
y="366" 
class="s7_377"
>3</text>

<text 
x="163" 
y="366" 
class="s6_377"
>,</text>

<text 
x="179" 
y="366" 
class="s8_377"
>"Chi"</text>

<text 
x="219" 
y="366" 
class="s6_377"
>,</text>

<text 
x="235" 
y="366" 
class="s7_377"
>3</text>

<text 
x="242" 
y="366" 
class="s6_377"
>]]</text>

<text 
x="55" 
y="419" 
class="s2_377"
>In SQL, we might create this table with:</text>

<text 
x="76" 
y="464" 
dx="0,0,0,0,0,0,0,4.6,0,0,0,0" 
class="s9_377"
>CREATE TABLE</text>

<text 
x="179" 
y="464" 
class="s5_377"
>users</text>

<text 
x="227" 
y="464" 
class="s6_377"
>(</text>

<text 
x="108" 
y="479" 
class="s5_377"
>user_id</text>

<text 
x="171" 
y="479" 
class="s10_377"
>INT</text>

<text 
x="203" 
y="479" 
dx="0,0,0,0,4.6,0,0,0" 
class="s9_377"
>NOT NULL</text>

<text 
x="266" 
y="479" 
class="s6_377"
>,</text>

<text 
x="108" 
y="495" 
class="s5_377"
>name</text>

<text 
x="148" 
y="495" 
class="s10_377"
>VARCHAR</text>

<text 
x="203" 
y="495" 
class="s6_377"
>(</text>

<text 
x="211" 
y="495" 
class="s7_377"
>200</text>

<text 
x="235" 
y="495" 
class="s6_377"
>),</text>

<text 
x="108" 
y="510" 
class="s5_377"
>num_friends</text>

<text 
x="203" 
y="510" 
class="s10_377"
>INT</text>

<text 
x="227" 
y="510" 
class="s6_377"
>);</text>

<text 
x="55" 
y="563" 
class="s2_377"
>Notice that we specified that the</text>

<text 
x="344" 
y="563" 
class="s4_377"
>user_id</text>

<text 
x="423" 
y="563" 
class="s2_377"
>and</text>

<text 
x="460" 
y="563" 
class="s4_377"
>num_friends</text>

<text 
x="582" 
y="563" 
class="s2_377"
>must be integers (and that</text>

<text 
x="55" 
y="593" 
class="s4_377"
>user_id</text>

<text 
x="134" 
y="593" 
dx="0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_377"
>isn’t allowed to be</text>

<text 
x="302" 
y="593" 
class="s4_377"
>NULL</text>

<text 
x="344" 
y="593" 
class="s2_377"
>, which indicates a missing value and is sort of like our</text>

<text 
x="55" 
y="622" 
class="s4_377"
>None</text>

<text 
x="97" 
y="622" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4" 
class="s2_377"
>) and that the name should be a string of length 200 or less. NotQuiteABase won’t</text>

<text 
x="55" 
y="652" 
class="s2_377"
>take types into account, but we’ll behave as if it did.</text>

<text 
x="421" 
y="695" 
dx="0,1.1,1.1,1.1" 
class="s11_377"
>NOTE</text>

<text 
x="97" 
y="725" 
dx="0,0,0,0,-0.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s12_377"
>SQL is almost completely case and indentation insensitive. The capitalization and indentation style here is</text>

<text 
x="97" 
y="744" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.3,0,0,0,0,0,0,0,-1.1" 
class="s12_377"
>my preferred style. If you start learning SQL, you will surely encounter other examples styled differently.</text>

<text 
x="55" 
y="789" 
dx="0,-2.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_377"
>You can insert the rows with</text>

<text 
x="311" 
y="789" 
class="s4_377"
>INSERT</text>

<text 
x="380" 
y="789" 
class="s2_377"
>statements:</text>

<text 
x="76" 
y="837" 
dx="0,0,0,0,0,0,0,4.6,0,0,0" 
class="s9_377"
>INSERT INTO</text>

<text 
x="171" 
y="837" 
class="s5_377"
>users</text>

<text 
x="219" 
y="837" 
class="s6_377"
>(</text>

<text 
x="227" 
y="837" 
class="s5_377"
>user_id</text>

<text 
x="282" 
y="837" 
class="s6_377"
>,</text>

<text 
x="298" 
y="837" 
class="s5_377"
>name</text>

<text 
x="329" 
y="837" 
class="s6_377"
>,</text>

<text 
x="345" 
y="837" 
class="s5_377"
>num_friends</text>

<text 
x="432" 
y="837" 
class="s6_377"
>)</text>

<text 
x="448" 
y="837" 
class="s9_377"
>VALUES</text>

<text 
x="503" 
y="837" 
class="s6_377"
>(</text>

<text 
x="511" 
y="837" 
class="s7_377"
>0</text>

<text 
x="519" 
y="837" 
class="s6_377"
>,</text>

<text 
x="535" 
y="837" 
class="s8_377"
>'Hero'</text>

<text 
x="582" 
y="837" 
class="s6_377"
>,</text>

<text 
x="598" 
y="837" 
class="s7_377"
>0</text>

<text 
x="606" 
y="837" 
class="s6_377"
>);</text>

<text 
x="55" 
y="890" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8,0,0,0,0,0,0,0" 
class="s2_377"
>Notice also that SQL statements need to end with semicolons, and that SQL requires</text>

<text 
x="55" 
y="917" 
class="s2_377"
>single quotes for its strings.</text>

<text 
x="55" 
y="956" 
class="s2_377"
>In NotQuiteABase, you’ll create a</text>

<text 
x="361" 
y="956" 
class="s4_377"
>Table</text>

<text 
x="419" 
y="956" 
class="s2_377"
>simply by specifying the names of its columns.</text>

<text 
x="55" 
y="985" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2" 
class="s2_377"
>And to insert a row, you’ll use the table’s</text>

<text 
x="422" 
y="985" 
class="s4_377"
>insert()</text>

<text 
x="512" 
y="985" 
class="s2_377"
>method, which takes a</text>

<text 
x="714" 
y="985" 
class="s4_377"
>list</text>

<text 
x="762" 
y="985" 
class="s2_377"
>of row</text>

<text 
x="55" 
y="1015" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0" 
class="s2_377"
>values that need to be in the same order as the table’s column names.</text>

<text 
x="55" 
y="1054" 
class="s2_377"
>Behind the scenes, we’ll store each row as a</text>

<text 
x="448" 
y="1054" 
class="s4_377"
>dict</text>

<text 
x="495" 
y="1054" 
dx="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0,0,0" 
class="s2_377"
>from column names to values. A real</text>

<text 
x="55" 
y="1083" 
class="s2_377"
>database would never use such a space-wasting representation, but doing so will make</text>

<text 
x="55" 
y="1111" 
class="s2_377"
>NotQuiteABase much easier to work with:</text>

<text 
x="76" 
y="1156" 
class="s9_377"
>class</text>

<text 
x="124" 
y="1156" 
class="s13_377"
>Table</text>

<text 
x="163" 
y="1156" 
class="s6_377"
>:</text>

<text 
x="108" 
y="1171" 
class="s9_377"
>def</text>

<text 
x="140" 
y="1171" 
class="s14_377"
>__init__</text>

<text 
x="203" 
y="1171" 
class="s6_377"
>(</text>

<text 
x="211" 
y="1171" 
class="s10_377"
>self</text>

<text 
x="242" 
y="1171" 
class="s6_377"
>,</text>

<text 
x="258" 
y="1171" 
class="s5_377"
>columns</text>

<text 
x="314" 
y="1171" 
class="s6_377"
>):</text>

<text 
x="140" 
y="1187" 
class="s10_377"
>self</text>

<text 
x="171" 
y="1187" 
class="s6_377"
>.</text>

<text 
x="179" 
y="1187" 
class="s5_377"
>columns</text>

<text 
x="242" 
y="1187" 
class="s6_377"
>=</text>

<text 
x="258" 
y="1187" 
class="s5_377"
>columns</text>

<text 
x="140" 
y="1202" 
class="s10_377"
>self</text>

<text 
x="171" 
y="1202" 
class="s6_377"
>.</text>

<text 
x="179" 
y="1202" 
class="s5_377"
>rows</text>

<text 
x="219" 
y="1202" 
dx="0,0,4.6,0" 
class="s6_377"
>= []</text>



<!-- Any embedded fonts defined here -->
<style type="text/css" ><![CDATA[

@font-face {
	font-family: LiberationSerif-Italic_l;
	src: url("fonts/LiberationSerif-Italic_l.woff") format("woff");
}

@font-face {
	font-family: LiberationMono-Bold_1w;
	src: url("fonts/LiberationMono-Bold_1w.woff") format("woff");
}

@font-face {
	font-family: LiberationMono_1q;
	src: url("fonts/LiberationMono_1q.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif-Bold_b;
	src: url("fonts/LiberationSerif-Bold_b.woff") format("woff");
}

@font-face {
	font-family: LiberationSerif_e;
	src: url("fonts/LiberationSerif_e.woff") format("woff");
}

]]></style>

</svg>
